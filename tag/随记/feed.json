{
    "version": "https://jsonfeed.org/version/1",
    "title": "学习笔记 • All posts by \"随记\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2017/06/28/%E9%9A%8F%E8%AE%B0/2/",
            "url": "http://example.com/2017/06/28/%E9%9A%8F%E8%AE%B0/2/",
            "title": "一些笔记",
            "date_published": "2017-06-28T07:00:00.000Z",
            "content_html": "<h2 id=\"一些项目经验\"><a class=\"markdownIt-Anchor\" href=\"#一些项目经验\">#</a> 一些项目经验</h2>\n<ol>\n<li>vue 用 cdn, 就不需要给其子组件 (vuex, vue-router 等) 使用 Vue.use</li>\n<li>toString.apply 可以用于区分数据类型</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toString.apply([]) // &#x27;[object Array]&#x27;</span><br><span class=\"line\">toString.apply(/aa/) // &quot;[object RegExp]&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>关于 scroll 进度条隐藏的小技巧</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width: ? // 父级宽度 + 20</span><br><span class=\"line\">overflow-y: scroll;</span><br><span class=\"line\">padding-right: 20px;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "随记"
            ]
        },
        {
            "id": "http://example.com/2017/06/02/%E9%9A%8F%E8%AE%B0/1/",
            "url": "http://example.com/2017/06/02/%E9%9A%8F%E8%AE%B0/1/",
            "title": "一些笔记",
            "date_published": "2017-06-02T03:00:00.000Z",
            "content_html": "<h2 id=\"你不知道的javascript中-笔记\"><a class=\"markdownIt-Anchor\" href=\"#你不知道的javascript中-笔记\">#</a> 《你不知道的 javascript》(中) 笔记</h2>\n<ol>\n<li>undefined 和 undeclared 是两码事</li>\n<li>通过 typeof 来检查变量是否存在，还能够适应不同环境 (不局限于浏览器)</li>\n<li>数字用指数格式显示用 toExponential () 方法</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 5E10;</span><br><span class=\"line\">a;                  /* 50000000000 */</span><br><span class=\"line\">a.toExponential();  /* &quot;5e+10&quot; */</span><br><span class=\"line\">var b = a * a;</span><br><span class=\"line\">b;                  /* 2.5e+21 */</span><br><span class=\"line\">var c = 1 / a;</span><br><span class=\"line\">c;                  /* 2e-11 */</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>toPrecision (…) 方法用来指定有效数位的显示位数:</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 42.59;</span><br><span class=\"line\"></span><br><span class=\"line\">a.toPrecision( 1 );  // &quot;4e+1&quot;</span><br><span class=\"line\">a.toPrecision( 2 );  // &quot;43&quot;</span><br><span class=\"line\">a.toPrecision( 3 );  // &quot;42.6&quot;</span><br><span class=\"line\">a.toPrecision( 4 );  // &quot;42.59&quot;</span><br><span class=\"line\">a.toPrecision( 5 );  // &quot;42.590&quot;</span><br><span class=\"line\">a.toPrecision( 6 );  // &quot;42.5900&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>es6 中，可以使用 Number.EPSILON 来比较两个数字是否相等 (在指定的误差范围内), 这个值 (误差精度) 通常是 2^-52 (2.220446049250313e-16)<br>\n 从 ES6 开始，该值定义在 Number.EPSILON 中，我们可以直接拿来用，也可以为 ES6 之前<br>\n的版本写 polyfill:</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!Number.EPSILON) &#123;</span><br><span class=\"line\">  Number.EPSILON = Math.pow(2,-52);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  <p></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function numbersCloseEnoughToEqual(n1,n2) &#123;</span><br><span class=\"line\">   return Math.abs( n1 - n2 ) &lt; Number.EPSILON;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = 0.1 + 0.2;</span><br><span class=\"line\">var b = 0.3;</span><br><span class=\"line\">numbersCloseEnoughToEqual( a, b );</span><br><span class=\"line\">numbersCloseEnoughToEqual( 0.0000001, 0.0000002 );  // false</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>按惯例我们用 void 0 来获得 undefined, void 运算符在其他地方也能派上用场，比如不让表达式返回任何结果 (即使其有副作用)。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething() &#123;</span><br><span class=\"line\">  // 注:APP.ready 由程序自己定义 </span><br><span class=\"line\">  if (!APP.ready) &#123;</span><br><span class=\"line\">     // 稍后再试</span><br><span class=\"line\">     return void setTimeout( doSomething,100 );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var result;</span><br><span class=\"line\">  // 其他</span><br><span class=\"line\">   return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  // 现在可以了吗?</span><br><span class=\"line\">if (doSomething()) &#123;</span><br><span class=\"line\">  // 立即执行下一个任务 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>将原型作为默认值<br>\n Function.prototype 是一个空函数，RegExp.prototype 是一个 “空” 的正则表达式 (无任何匹配)，而 Array.prototype 是一个空数组。对未赋值的变量来说，它们是很好的默认值。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isThisCool(vals,fn,rx) &#123;</span><br><span class=\"line\">  vals = vals || Array.prototype;</span><br><span class=\"line\">  fn = fn || Function.prototype;</span><br><span class=\"line\">  rx = rx || RegExp.prototype;</span><br><span class=\"line\">  return rx.test(vals.map( fn ).join( &quot;&quot; )); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isThisCool();       // true</span><br></pre></td></tr></table></figure>\n<p>这种方法的一个好处是 .prototypes 已被创建并且仅创建一次。相反，如果将 []、<br>\nfunction (){} 和 /(?😃/ 作为默认值，则每次调用 isThisCool (…) 时它们都会被创建一次 (具体创建与否取决于 JavaScript 引擎，稍后它们可能会被垃圾回收)，这样无疑会造成内<br>\n存和 CPU 资源的浪费。</p>\n<ol start=\"8\">\n<li>JSON.stringify</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123; </span><br><span class=\"line\">  b: 42,</span><br><span class=\"line\">  c: &quot;42&quot;,</span><br><span class=\"line\">  d: [1,2,3]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">JSON.stringify( a, [&quot;c&quot;,&quot;d&quot;], 3 );</span><br><span class=\"line\">&quot;&#123;</span><br><span class=\"line\">   &quot;c&quot;: &quot;42&quot;,</span><br><span class=\"line\">   &quot;d&quot;: [</span><br><span class=\"line\">      1,</span><br><span class=\"line\">      2,</span><br><span class=\"line\">      3</span><br><span class=\"line\">   ]</span><br><span class=\"line\">&#125;&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>关于～～，推荐在数据能控制在小范围的时候使用<br>\n一些开发人员使用～～来截除数字值的小数部分，以为这和 Math.floor (…) 的效果一样， 实际上并非如此。<br>\n~~ 中的第一个～执行 ToInt32 并反转字位，然后第二个～再进行一次字位反转，即将所有字位反转回原值，最后得到的仍然是 ToInt32 的结果。</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~ (1e20)</span><br><span class=\"line\">//1661992960</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>关于 &lt;= 和&gt;=<br>\nJavaScript 中 &lt;= 是 “不大于” 的意思 (即！(a &gt; b)，处理为！(b &lt; a))。同理 a &gt;= b 处理为 b &lt;= a。</li>\n</ol>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123; b: 42 &#125;;</span><br><span class=\"line\">var b = &#123; b: 43 &#125;;</span><br><span class=\"line\">a &lt; b;  // false</span><br><span class=\"line\">a == b; // false</span><br><span class=\"line\">a &gt; b;  // false</span><br><span class=\"line\">a &lt;= b; // true</span><br><span class=\"line\">a &gt;= b; // true</span><br></pre></td></tr></table></figure>\n<ol start=\"11\">\n<li>JavaScript 通过标签跳转能够实现 goto 的部分功能。continue 和 break 语句都可以带 一个标签，因此能够像 goto 那样进行跳转。例如:</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 标签为foo的循环</span><br><span class=\"line\">foo: for (var i=0; i&lt;4; i++) &#123;</span><br><span class=\"line\">  for (var j=0; j&lt;4; j++) &#123;</span><br><span class=\"line\">    // 如果j和i相等，继续外层循环 </span><br><span class=\"line\">    if (j == i) &#123;</span><br><span class=\"line\">      // 跳转到foo的下一个循环</span><br><span class=\"line\">      continue foo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 跳过奇数结果</span><br><span class=\"line\">    if ((j * i) % 2 == 1) &#123;</span><br><span class=\"line\">      // 继续内层循环(没有标签的)</span><br><span class=\"line\">      continue; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log( i, j );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      // 1 0</span><br><span class=\"line\">      // 2 0</span><br><span class=\"line\">      // 2 1</span><br><span class=\"line\">      // 3 0</span><br><span class=\"line\">      // 3 2</span><br></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li>关于 html 标签 id, 会在 js 全局变量上创建一个与 id 同名的变量</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html</span><br><span class=\"line\">&lt;div id=&#x27;foo&#x27;&gt;&lt;/div&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">js</span><br><span class=\"line\">console.log( foo ); // HTML元素</span><br></pre></td></tr></table></figure>\n<ol start=\"13\">\n<li>消息是双向传递的 ——yield</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function *foo(x) &#123;</span><br><span class=\"line\">    var y = x * (yield &quot;Hello&quot;); // &lt;-- yield一个值!</span><br><span class=\"line\">    return y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var it = foo( 6 );</span><br><span class=\"line\">var res = it.next(); // 第一个next()，并不传入任何东西</span><br><span class=\"line\">res.value;  // &quot;Hello&quot;</span><br><span class=\"line\">res = it.next( 7 ); // 向等待的yield传入7</span><br><span class=\"line\">res.value; // 42</span><br></pre></td></tr></table></figure>\n<ol start=\"14\">\n<li></li>\n</ol>\n",
            "tags": [
                "随记"
            ]
        }
    ]
}