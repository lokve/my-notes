{
    "version": "https://jsonfeed.org/version/1",
    "title": "学习笔记 • All posts by \"回溯\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/06/04/leetcode/51.N-Queens/index/",
            "url": "http://example.com/2024/06/04/leetcode/51.N-Queens/index/",
            "title": "51.N-Queens",
            "date_published": "2024-06-04T09:24:59.085Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbi1xdWVlbnMv\">地址</span></p>\n<h3 id=\"ai的答案\"><a class=\"markdownIt-Anchor\" href=\"#ai的答案\">#</a> AI 的答案</h3>\n<p>对每一个位置都进行判断是否可下，当行走完的时候，输出结果<br>\n这里判断条件可以优化，从上往下只要判断点位上方就够了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> solveNQueens = <span class=\"keyword\">function</span> (<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> board = <span class=\"title class_\">Array</span>(n)</span><br><span class=\"line\">        .<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Array</span>(n).<span class=\"title function_\">fill</span>(<span class=\"string\">&#x27;.&#x27;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">    <span class=\"title function_\">backtrack</span>(board, <span class=\"number\">0</span>, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">backtrack</span>(<span class=\"params\">board, row, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row === board.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">push</span>(board.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">row</span> =&gt;</span> row.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; board.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isQueenSafe</span>(board, row, i)) &#123;</span><br><span class=\"line\">            board[row][i] = <span class=\"string\">&#x27;Q&#x27;</span>;</span><br><span class=\"line\">            <span class=\"title function_\">backtrack</span>(board, row + <span class=\"number\">1</span>, res);</span><br><span class=\"line\">            board[row][i] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isQueenSafe</span>(<span class=\"params\">board, row, col</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; board.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[row][i] === <span class=\"string\">&#x27;Q&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[i][col] === <span class=\"string\">&#x27;Q&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (row - i &gt;= <span class=\"number\">0</span> &amp;&amp; col - i &gt;= <span class=\"number\">0</span> &amp;&amp; board[row - i][col - i] === <span class=\"string\">&#x27;Q&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (row - i &gt;= <span class=\"number\">0</span> &amp;&amp; col + i &lt; board.<span class=\"property\">length</span> &amp;&amp; board[row - i][col + i] === <span class=\"string\">&#x27;Q&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (row + i &lt; board.<span class=\"property\">length</span> &amp;&amp; col - i &gt;= <span class=\"number\">0</span> &amp;&amp; board[row + i][col - i] === <span class=\"string\">&#x27;Q&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (row + i &lt; board.<span class=\"property\">length</span> &amp;&amp; col + i &lt; board.<span class=\"property\">length</span> &amp;&amp; board[row + i][col + i] === <span class=\"string\">&#x27;Q&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">solveNQueens</span>(<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考答案\"><a class=\"markdownIt-Anchor\" href=\"#参考答案\">#</a> 参考答案</h3>\n<p>因 Queen 是横竖斜线不能共线，所以每一行只有一个 Q (board 只需要一维数组即可)，每一列的位置不能重复 (bc === c)，不在左下斜线 (bc === c + r - br)，不在右下斜线 (bc === c - r + br)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> solveNQueens = <span class=\"keyword\">function</span> (<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">    <span class=\"title function_\">backtrack</span>(res, n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">backtrack</span>(<span class=\"params\">res, n, board = [], r = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r === n) &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">push</span>(board.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> <span class=\"string\">&#x27;.&#x27;</span>.<span class=\"title function_\">repeat</span>(c) + <span class=\"string\">&#x27;Q&#x27;</span> + <span class=\"string\">&#x27;.&#x27;</span>.<span class=\"title function_\">repeat</span>(n - c - <span class=\"number\">1</span>)));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> c = <span class=\"number\">0</span>; c &lt; n; c++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!board.<span class=\"title function_\">some</span>(<span class=\"function\">(<span class=\"params\">bc, br</span>) =&gt;</span> bc === c || bc === c + r - br || bc === c - r + br)) &#123;</span><br><span class=\"line\">            board.<span class=\"title function_\">push</span>(c);</span><br><span class=\"line\">            <span class=\"title function_\">backtrack</span>(res, n, board, r + <span class=\"number\">1</span>);</span><br><span class=\"line\">            board.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "leetcode",
                "DFS"
            ]
        },
        {
            "id": "http://example.com/2024/05/28/leetcode/37.Sudoku%20Solver/index/",
            "url": "http://example.com/2024/05/28/leetcode/37.Sudoku%20Solver/index/",
            "title": "37.Sudoku Solver",
            "date_published": "2024-05-28T03:16:10.618Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3Vkb2t1LXNvbHZlci9kZXNjcmlwdGlvbi8=\">地址</span></p>\n<h3 id=\"我的答案\"><a class=\"markdownIt-Anchor\" href=\"#我的答案\">#</a> 我的答案</h3>\n<p>记录每一行、每一列、每一个块中数字是否出现过，然后遍历空格，尝试填入 1-9，如果填入的数字合法，则递归调用 dfs，如果 dfs 返回 true，则说明填入的数字合法，继续填下一个空格，如果 dfs 返回 false，则说明填入的数字不合法，则尝试下一个数字，如果尝试完 9 个数字都失败，则说明整个数独不合法，返回 false。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">character[][]</span>&#125; <span class=\"variable\">board</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125; Do not return anything, modify board in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> solveSudoku = <span class=\"keyword\">function</span> (<span class=\"params\">board</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> row = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">9</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">9</span>).<span class=\"title function_\">fill</span>(<span class=\"literal\">false</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> col = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">9</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">9</span>).<span class=\"title function_\">fill</span>(<span class=\"literal\">false</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> block = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">3</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">9</span>).<span class=\"title function_\">fill</span>(<span class=\"literal\">false</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> empty = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board[i][j] !== <span class=\"string\">&#x27;.&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> num = board[i][j] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                row[i][num - <span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                col[j][num - <span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                block[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(i / <span class=\"number\">3</span>)][<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(j / <span class=\"number\">3</span>)][num - <span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                empty.<span class=\"title function_\">push</span>([i, j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === empty.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> [i, j] = empty[index];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> rest = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">9</span>; k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!row[i][k] &amp;&amp; !col[j][k] &amp;&amp; !block[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(i / <span class=\"number\">3</span>)][<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(j / <span class=\"number\">3</span>)][k]) &#123;</span><br><span class=\"line\">                rest.<span class=\"title function_\">push</span>(k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rest.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num <span class=\"keyword\">of</span> rest) &#123;</span><br><span class=\"line\">            board[i][j] = num + <span class=\"number\">1</span> + <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            row[i][num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            col[j][num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            block[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(i / <span class=\"number\">3</span>)][<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(j / <span class=\"number\">3</span>)][num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">dfs</span>(index + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            board[i][j] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">            row[i][num] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            col[j][num] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            block[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(i / <span class=\"number\">3</span>)][<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(j / <span class=\"number\">3</span>)][num] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> board;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">    <span class=\"title function_\">solveSudoku</span>([</span><br><span class=\"line\">        [<span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>],</span><br><span class=\"line\">        [<span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>],</span><br><span class=\"line\">        [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>],</span><br><span class=\"line\">        [<span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>],</span><br><span class=\"line\">        [<span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>],</span><br><span class=\"line\">        [<span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>],</span><br><span class=\"line\">        [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>],</span><br><span class=\"line\">        [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>],</span><br><span class=\"line\">        [<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&#x27;9&#x27;</span>],</span><br><span class=\"line\">    ])</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考答案\"><a class=\"markdownIt-Anchor\" href=\"#参考答案\">#</a> 参考答案</h3>\n<p>更省空间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">solveSudoku</span>(<span class=\"params\">board</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = board.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(board, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">board, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// for every cell in the sudoku</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> row = <span class=\"number\">0</span>; row &lt; n; row++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> col = <span class=\"number\">0</span>; col &lt; n; col++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// if its empty</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (board[row][col] !== <span class=\"string\">&#x27;.&#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      <span class=\"comment\">// try every number 1-9</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> c = i.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">        <span class=\"comment\">// if that number is valid</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isValid</span>(board, row, col, n, c)) &#123;</span><br><span class=\"line\">          board[row][col] = c;</span><br><span class=\"line\">          <span class=\"comment\">// continue search for that board, ret true if solution is reached</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title function_\">dfs</span>(board, n)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// solution wasnt found for any num 1-9 here, must be a dead end...</span></span><br><span class=\"line\">      <span class=\"comment\">// set the current cell back to empty</span></span><br><span class=\"line\">      board[row][col] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">      <span class=\"comment\">// ret false to signal dead end </span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// all cells filled, must be a solution</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isValid</span>(<span class=\"params\">board, row, col, n, c</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> blockRow = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(row / <span class=\"number\">3</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> blockCol = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(col / <span class=\"number\">3</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (board[row][i] === c || board[i][col] === c) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> curRow = blockRow +  <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(i / <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> curCol = blockCol +  <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(i % <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (board[curRow][curCol] === c) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "leetcode",
                "DFS"
            ]
        }
    ]
}