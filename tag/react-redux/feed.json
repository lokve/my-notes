{
    "version": "https://jsonfeed.org/version/1",
    "title": "学习笔记 • All posts by \"react-redux\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/09/14/react-redux/Subscription/",
            "url": "http://example.com/2020/09/14/react-redux/Subscription/",
            "title": "selectorFactory",
            "date_published": "2020-09-14T06:00:00.000Z",
            "content_html": "<p>redux 订阅管理</p>\n<p>redux 默认 batch 来源</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;unstable_batchedUpdates&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">setBatch</span>(unstable_batchedUpdates);</span><br></pre></td></tr></table></figure>\n<p>batchedUpdates, 涉及到 react 跟新机制，在执行 listeners 后，执行同步队列，统一跟新</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> batchedUpdates&lt;A, R&gt;(<span class=\"attr\">fn</span>: <span class=\"function\">(<span class=\"params\">A</span>) =&gt;</span> R, <span class=\"attr\">a</span>: A): R &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevExecutionContext = executionContext;</span><br><span class=\"line\">    executionContext |= <span class=\"title class_\">BatchedContext</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(a);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        executionContext = prevExecutionContext;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executionContext === <span class=\"title class_\">NoContext</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Flush the immediate callbacks that were scheduled during this batch</span></span><br><span class=\"line\">            <span class=\"title function_\">flushSyncCallbackQueue</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// encapsulates the subscription logic for connecting a component to the redux store, as</span></span><br><span class=\"line\"><span class=\"comment\">// well as nesting subscriptions of descendant components, so that we can ensure the</span></span><br><span class=\"line\"><span class=\"comment\">// ancestor components re-render before descendants</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">CLEARED</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> nullListeners = &#123;<span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createListenerCollection</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> batch = <span class=\"title function_\">getBatch</span>();</span><br><span class=\"line\">    <span class=\"comment\">// the current/next pattern is copied from redux&#x27;s createStore code.</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> refactor+expose that code to be reusable here?</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> current = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">clear</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            next = <span class=\"variable constant_\">CLEARED</span>;</span><br><span class=\"line\">            current = <span class=\"variable constant_\">CLEARED</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> listeners = (current = next);</span><br><span class=\"line\">            <span class=\"title function_\">batch</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                    listeners[i]();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">subscribe</span>(<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (next === current) next = current.<span class=\"title function_\">slice</span>();</span><br><span class=\"line\">            next.<span class=\"title function_\">push</span>(listener);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unsubscribe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isSubscribed || current === <span class=\"variable constant_\">CLEARED</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                isSubscribed = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (next === current) next = current.<span class=\"title function_\">slice</span>();</span><br><span class=\"line\">                next.<span class=\"title function_\">splice</span>(next.<span class=\"title function_\">indexOf</span>(listener), <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Subscription</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">store, parentSub</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// store详细见createStore.md</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">store</span> = store;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">parentSub</span> = parentSub;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">listeners</span> = nullListeners;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">handleChangeWrapper</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">handleChangeWrapper</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">addNestedSub</span>(<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">trySubscribe</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">listeners</span>.<span class=\"title function_\">subscribe</span>(listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">notifyNestedSubs</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">listeners</span>.<span class=\"title function_\">notify</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">handleChangeWrapper</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onStateChange</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// onStateChange = notifyNestedSubs</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">onStateChange</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">isSubscribed</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Boolean</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">trySubscribe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">parentSub</span></span><br><span class=\"line\">                ? <span class=\"variable language_\">this</span>.<span class=\"property\">parentSub</span>.<span class=\"title function_\">addNestedSub</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleChangeWrapper</span>)</span><br><span class=\"line\">                : <span class=\"variable language_\">this</span>.<span class=\"property\">store</span>.<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleChangeWrapper</span>); <span class=\"comment\">//  createStore的subscribe，返回一个函数unsubscribe</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">listeners</span> = <span class=\"title function_\">createListenerCollection</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">tryUnsubscribe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">unsubscribe</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">listeners</span>.<span class=\"title function_\">clear</span>();</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">listeners</span> = nullListeners;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react-redux"
            ]
        },
        {
            "id": "http://example.com/2020/09/14/react-redux/bindActionCreators/",
            "url": "http://example.com/2020/09/14/react-redux/bindActionCreators/",
            "title": "bindActionCreators",
            "date_published": "2020-09-14T06:00:00.000Z",
            "content_html": "<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 本质 dispatch(&#123;type: &#x27;ADD&#x27;, value: &#x27;...&#x27;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindActionCreator</span>(<span class=\"params\">actionCreator, dispatch</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">dispatch</span>(actionCreator.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Turns an object whose values are action creators, into an object with the</span></span><br><span class=\"line\"><span class=\"comment\"> * same keys, but with every function wrapped into a `dispatch` call so they</span></span><br><span class=\"line\"><span class=\"comment\"> * may be invoked directly. This is just a convenience method, as you can call</span></span><br><span class=\"line\"><span class=\"comment\"> * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * For convenience, you can also pass a single function as the first argument,</span></span><br><span class=\"line\"><span class=\"comment\"> * and get a function in return.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function|Object</span>&#125; actionCreators An object whose values are action</span></span><br><span class=\"line\"><span class=\"comment\"> * creator functions. One handy way to obtain it is to use ES6 `import * as`</span></span><br><span class=\"line\"><span class=\"comment\"> * syntax. You may also pass a single function.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; dispatch The `dispatch` function available on your Redux</span></span><br><span class=\"line\"><span class=\"comment\"> * store.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Function|Object</span>&#125; The object mimicking the original object, but with</span></span><br><span class=\"line\"><span class=\"comment\"> * every action creator wrapped into the `dispatch` call. If you passed a</span></span><br><span class=\"line\"><span class=\"comment\"> * function as `actionCreators`, the return value will also be a single</span></span><br><span class=\"line\"><span class=\"comment\"> * function.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">bindActionCreators</span>(<span class=\"params\">actionCreators, dispatch</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">bindActionCreator</span>(actionCreators, dispatch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreators !== <span class=\"string\">&#x27;object&#x27;</span> || actionCreators === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">            <span class=\"string\">`bindActionCreators expected an object or a function, instead received <span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">                actionCreators === <span class=\"literal\">null</span> ? <span class=\"string\">&#x27;null&#x27;</span> : <span class=\"keyword\">typeof</span> actionCreators</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">            &#125;</span>. `</span> +</span><br><span class=\"line\">                <span class=\"string\">`Did you write &quot;import ActionCreators from&quot; instead of &quot;import * as ActionCreators from&quot;?`</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(actionCreators);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> boundActionCreators = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> key = keys[i];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> actionCreator = actionCreators[key];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> actionCreator === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">            boundActionCreators[key] = <span class=\"title function_\">bindActionCreator</span>(actionCreator, dispatch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> boundActionCreators;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react-redux"
            ]
        },
        {
            "id": "http://example.com/2020/09/14/react-redux/connect/",
            "url": "http://example.com/2020/09/14/react-redux/connect/",
            "title": "connect",
            "date_published": "2020-09-14T06:00:00.000Z",
            "content_html": "<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  connect is a facade over connectAdvanced. It turns its args into a compatible</span></span><br><span class=\"line\"><span class=\"comment\">  selectorFactory, which has the signature:</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    (dispatch, options) =&gt; (nextState, nextOwnProps) =&gt; nextFinalProps</span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">  connect passes its args to connectAdvanced as options, which will in turn pass them to</span></span><br><span class=\"line\"><span class=\"comment\">  selectorFactory each time a Connect component instance is instantiated or hot reloaded.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  selectorFactory returns a final props selector from its mapStateToProps,</span></span><br><span class=\"line\"><span class=\"comment\">  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,</span></span><br><span class=\"line\"><span class=\"comment\">  mergePropsFactories, and pure args.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  The resulting final props selector is called by the Connect component instance whenever</span></span><br><span class=\"line\"><span class=\"comment\">  it receives new props or store state.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">match</span>(<span class=\"params\">arg, factories, name</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 依次执行函数，直到有一个返回结果</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = factories.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = factories[i](arg);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result) <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch, options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">            <span class=\"string\">`Invalid value of type <span class=\"subst\">$&#123;<span class=\"keyword\">typeof</span> arg&#125;</span> for <span class=\"subst\">$&#123;name&#125;</span> argument when connecting component <span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">                options.wrappedComponentName</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">            &#125;</span>.`</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">strictEqual</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a === b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// createConnect with default args builds the &#x27;official&#x27; connect behavior. Calling it with</span></span><br><span class=\"line\"><span class=\"comment\">// different options opens up some testing and extensibility scenarios</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createConnect</span>(<span class=\"params\">&#123;</span></span><br><span class=\"line\"><span class=\"params\">    connectHOC = connectAdvanced,</span></span><br><span class=\"line\"><span class=\"params\">    mapStateToPropsFactories = defaultMapStateToPropsFactories,</span></span><br><span class=\"line\"><span class=\"params\">    mapDispatchToPropsFactories = defaultMapDispatchToPropsFactories,</span></span><br><span class=\"line\"><span class=\"params\">    mergePropsFactories = defaultMergePropsFactories,</span></span><br><span class=\"line\"><span class=\"params\">    selectorFactory = defaultSelectorFactory,</span></span><br><span class=\"line\"><span class=\"params\">&#125; = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用户传递的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">connect</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        mapStateToProps,</span></span><br><span class=\"line\"><span class=\"params\">        mapDispatchToProps,</span></span><br><span class=\"line\"><span class=\"params\">        mergeProps,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"comment\">// 比较方法</span></span></span><br><span class=\"line\"><span class=\"params\">        &#123;</span></span><br><span class=\"line\"><span class=\"params\">            pure = <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"params\">            areStatesEqual = strictEqual,</span></span><br><span class=\"line\"><span class=\"params\">            areOwnPropsEqual = shallowEqual,</span></span><br><span class=\"line\"><span class=\"params\">            areStatePropsEqual = shallowEqual,</span></span><br><span class=\"line\"><span class=\"params\">            areMergedPropsEqual = shallowEqual,</span></span><br><span class=\"line\"><span class=\"params\">            ...extraOptions</span></span><br><span class=\"line\"><span class=\"params\">        &#125; = &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"params\">    </span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回一个函数</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> initMapStateToProps = <span class=\"title function_\">match</span>(</span><br><span class=\"line\">            <span class=\"comment\">// mapStateToProps作为参数放到mapStateToPropsFactories[]执行，第三个是报错用</span></span><br><span class=\"line\">            mapStateToProps,</span><br><span class=\"line\">            mapStateToPropsFactories,</span><br><span class=\"line\">            <span class=\"string\">&#x27;mapStateToProps&#x27;</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">// 返回一个函数</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> initMapDispatchToProps = <span class=\"title function_\">match</span>(</span><br><span class=\"line\">            mapDispatchToProps,</span><br><span class=\"line\">            mapDispatchToPropsFactories,</span><br><span class=\"line\">            <span class=\"string\">&#x27;mapDispatchToProps&#x27;</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">// 返回一个函数</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> initMergeProps = <span class=\"title function_\">match</span>(mergeProps, mergePropsFactories, <span class=\"string\">&#x27;mergeProps&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 见connectAdvanced.md</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">connectHOC</span>(selectorFactory, &#123;</span><br><span class=\"line\">            <span class=\"comment\">// used in error messages</span></span><br><span class=\"line\">            <span class=\"comment\">// 用于错误消息</span></span><br><span class=\"line\">            <span class=\"attr\">methodName</span>: <span class=\"string\">&#x27;connect&#x27;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// used to compute Connect&#x27;s displayName from the wrapped component&#x27;s displayName.</span></span><br><span class=\"line\">            <span class=\"attr\">getDisplayName</span>: <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> <span class=\"string\">`Connect(<span class=\"subst\">$&#123;name&#125;</span>)`</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// if mapStateToProps is falsy, the Connect component doesn&#x27;t subscribe to store state changes</span></span><br><span class=\"line\">            <span class=\"attr\">shouldHandleStateChanges</span>: <span class=\"title class_\">Boolean</span>(mapStateToProps),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// passed through to selectorFactory</span></span><br><span class=\"line\">            initMapStateToProps,</span><br><span class=\"line\">            initMapDispatchToProps,</span><br><span class=\"line\">            initMergeProps,</span><br><span class=\"line\">            pure,</span><br><span class=\"line\">            areStatesEqual,</span><br><span class=\"line\">            areOwnPropsEqual,</span><br><span class=\"line\">            areStatePropsEqual,</span><br><span class=\"line\">            areMergedPropsEqual,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// any extra options args can override defaults of connect or connectAdvanced</span></span><br><span class=\"line\">            ...extraOptions,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createConnect</span>();</span><br></pre></td></tr></table></figure>\n<p>直接执行了 <code>createConnect</code> , 参数都取默认的</p>\n<h3 id=\"mapstatetoprops\"><a class=\"markdownIt-Anchor\" href=\"#mapstatetoprops\">#</a> mapStateToProps</h3>\n<p>判断用户的传递参数，对不同传递参数返回对应的结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当函数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">whenMapStateToPropsIsFunction</span>(<span class=\"params\">mapStateToProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> mapStateToProps === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">        ? <span class=\"title function_\">wrapMapToPropsFunc</span>(mapStateToProps, <span class=\"string\">&#x27;mapStateToProps&#x27;</span>)</span><br><span class=\"line\">        : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当不传的时候</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">whenMapStateToPropsIsMissing</span>(<span class=\"params\">mapStateToProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !mapStateToProps ? <span class=\"title function_\">wrapMapToPropsConstant</span>(<span class=\"function\">() =&gt;</span> (&#123;&#125;)) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];</span><br></pre></td></tr></table></figure>\n<h3 id=\"wrapmaptoprops\"><a class=\"markdownIt-Anchor\" href=\"#wrapmaptoprops\">#</a> wrapMapToProps</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">wrapMapToPropsConstant</span>(<span class=\"params\">getConstant</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initConstantSelector</span>(<span class=\"params\">dispatch, options</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> constant = <span class=\"title function_\">getConstant</span>(dispatch, options);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">constantSelector</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> constant;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        constantSelector.<span class=\"property\">dependsOnOwnProps</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> constantSelector;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args</span></span><br><span class=\"line\"><span class=\"comment\">// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine</span></span><br><span class=\"line\"><span class=\"comment\">// whether mapToProps needs to be invoked when props have changed.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// A length of one signals that mapToProps does not depend on props from the parent component.</span></span><br><span class=\"line\"><span class=\"comment\">// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and</span></span><br><span class=\"line\"><span class=\"comment\">// therefore not reporting its length accurately..</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getDependsOnOwnProps</span>(<span class=\"params\">mapToProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mapToProps.<span class=\"property\">dependsOnOwnProps</span> !== <span class=\"literal\">null</span> &amp;&amp; mapToProps.<span class=\"property\">dependsOnOwnProps</span> !== <span class=\"literal\">undefined</span></span><br><span class=\"line\">        ? <span class=\"title class_\">Boolean</span>(mapToProps.<span class=\"property\">dependsOnOwnProps</span>)</span><br><span class=\"line\">        : mapToProps.<span class=\"property\">length</span> !== <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,</span></span><br><span class=\"line\"><span class=\"comment\">// this function wraps mapToProps in a proxy function which does several things:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  * Detects whether the mapToProps function being called depends on props, which</span></span><br><span class=\"line\"><span class=\"comment\">//    is used by selectorFactory to decide if it should reinvoke on props changes.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  * On first call, handles mapToProps if returns another function, and treats that</span></span><br><span class=\"line\"><span class=\"comment\">//    new function as the true mapToProps for subsequent calls.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  * On first call, verifies the first result is a plain object, in order to warn</span></span><br><span class=\"line\"><span class=\"comment\">//    the developer that their mapToProps function is not returning a valid result.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">wrapMapToPropsFunc</span>(<span class=\"params\">mapToProps, methodName</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// mapToProps是用户在connect传进来的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initProxySelector</span>(<span class=\"params\">dispatch, &#123;displayName&#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> proxy = <span class=\"keyword\">function</span> <span class=\"title function_\">mapToPropsProxy</span>(<span class=\"params\">stateOrDispatch, ownProps</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// state或dispatch</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> proxy.<span class=\"property\">dependsOnOwnProps</span></span><br><span class=\"line\">                ? proxy.<span class=\"title function_\">mapToProps</span>(stateOrDispatch, ownProps)</span><br><span class=\"line\">                : proxy.<span class=\"title function_\">mapToProps</span>(stateOrDispatch);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// allow detectFactoryAndVerify to get ownProps</span></span><br><span class=\"line\">        proxy.<span class=\"property\">dependsOnOwnProps</span> = <span class=\"literal\">true</span>; <span class=\"comment\">// 是否依赖组件传进来的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        proxy.<span class=\"property\">mapToProps</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">detectFactoryAndVerify</span>(<span class=\"params\">stateOrDispatch, ownProps</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里的 mapToProps 是用户传递的 conncet 的参数</span></span><br><span class=\"line\">            proxy.<span class=\"property\">mapToProps</span> = mapToProps;</span><br><span class=\"line\">            proxy.<span class=\"property\">dependsOnOwnProps</span> = <span class=\"title function_\">getDependsOnOwnProps</span>(mapToProps); <span class=\"comment\">// mapToProps的参数数量 !== 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 这里执行第二遍proxy, 此时的mapToProps已经是用户传进来的mapToProps了，所以这里的返回对象是用户的返回</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> props = <span class=\"title function_\">proxy</span>(stateOrDispatch, ownProps);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果用户返回函数，就执行他</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> props === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">                proxy.<span class=\"property\">mapToProps</span> = props;</span><br><span class=\"line\">                proxy.<span class=\"property\">dependsOnOwnProps</span> = <span class=\"title function_\">getDependsOnOwnProps</span>(props);</span><br><span class=\"line\">                props = <span class=\"title function_\">proxy</span>(stateOrDispatch, ownProps);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>)</span><br><span class=\"line\">                <span class=\"title function_\">verifyPlainObject</span>(props, displayName, methodName);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 最后返回的用户返回的对象或者用户返回的函数的执行结果</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> props;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapdispatchtoprops\"><a class=\"markdownIt-Anchor\" href=\"#mapdispatchtoprops\">#</a> mapDispatchToProps</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;bindActionCreators&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;wrapMapToPropsConstant, wrapMapToPropsFunc&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./wrapMapToProps&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传了函数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">whenMapDispatchToPropsIsFunction</span>(<span class=\"params\">mapDispatchToProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> mapDispatchToProps === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">        ? <span class=\"title function_\">wrapMapToPropsFunc</span>(mapDispatchToProps, <span class=\"string\">&#x27;mapDispatchToProps&#x27;</span>)</span><br><span class=\"line\">        : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没穿</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">whenMapDispatchToPropsIsMissing</span>(<span class=\"params\">mapDispatchToProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !mapDispatchToProps ? <span class=\"title function_\">wrapMapToPropsConstant</span>(<span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> (&#123;dispatch&#125;)) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传了对象</span></span><br><span class=\"line\"><span class=\"comment\">// 这里mapDispatchToProps即action合集</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">whenMapDispatchToPropsIsObject</span>(<span class=\"params\">mapDispatchToProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mapDispatchToProps &amp;&amp; <span class=\"keyword\">typeof</span> mapDispatchToProps === <span class=\"string\">&#x27;object&#x27;</span></span><br><span class=\"line\">        ? <span class=\"title function_\">wrapMapToPropsConstant</span>(<span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> <span class=\"title function_\">bindActionCreators</span>(mapDispatchToProps, dispatch))</span><br><span class=\"line\">        : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">    whenMapDispatchToPropsIsFunction,</span><br><span class=\"line\">    whenMapDispatchToPropsIsMissing,</span><br><span class=\"line\">    whenMapDispatchToPropsIsObject,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<h3 id=\"mergeprops\"><a class=\"markdownIt-Anchor\" href=\"#mergeprops\">#</a> mergeProps</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defaultMergeProps</span>(<span class=\"params\">stateProps, dispatchProps, ownProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;...ownProps, ...stateProps, ...dispatchProps&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">wrapMergePropsFunc</span>(<span class=\"params\">mergeProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initMergePropsProxy</span>(<span class=\"params\">dispatch, &#123;displayName, pure, areMergedPropsEqual&#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> hasRunOnce = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mergedProps;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mergePropsProxy</span>(<span class=\"params\">stateProps, dispatchProps, ownProps</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> nextMergedProps = <span class=\"title function_\">mergeProps</span>(stateProps, dispatchProps, ownProps);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasRunOnce) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 后续</span></span><br><span class=\"line\">                <span class=\"comment\">// pure下才去比较</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!pure || !<span class=\"title function_\">areMergedPropsEqual</span>(nextMergedProps, mergedProps))</span><br><span class=\"line\">                    <span class=\"comment\">// 浅层比较新旧</span></span><br><span class=\"line\">                    mergedProps = nextMergedProps;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 第一次</span></span><br><span class=\"line\">                hasRunOnce = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                mergedProps = nextMergedProps;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>)</span><br><span class=\"line\">                    <span class=\"title function_\">verifyPlainObject</span>(mergedProps, displayName, <span class=\"string\">&#x27;mergeProps&#x27;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mergedProps;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传了函数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">whenMergePropsIsFunction</span>(<span class=\"params\">mergeProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> mergeProps === <span class=\"string\">&#x27;function&#x27;</span> ? <span class=\"title function_\">wrapMergePropsFunc</span>(mergeProps) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 没传直接合并3个参数&#123;...,...,...&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">whenMergePropsIsOmitted</span>(<span class=\"params\">mergeProps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !mergeProps ? <span class=\"function\">() =&gt;</span> defaultMergeProps : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [whenMergePropsIsFunction, whenMergePropsIsOmitted];</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react-redux"
            ]
        },
        {
            "id": "http://example.com/2020/09/14/react-redux/connectAdvanced/",
            "url": "http://example.com/2020/09/14/react-redux/connectAdvanced/",
            "title": "connectAdvanced",
            "date_published": "2020-09-14T06:00:00.000Z",
            "content_html": "<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> hoistStatics <span class=\"keyword\">from</span> <span class=\"string\">&#x27;hoist-non-react-statics&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> invariant <span class=\"keyword\">from</span> <span class=\"string\">&#x27;invariant&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;useContext, useMemo, useEffect, useLayoutEffect, useRef, useReducer&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;isValidElementType, isContextConsumer&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-is&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Subscription</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../utils/Subscription&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">ReactReduxContext</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./Context&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define some constant arrays just to avoid re-creating these</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">EMPTY_ARRAY</span> = [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">NO_SUBSCRIPTION_ARRAY</span> = [<span class=\"literal\">null</span>, <span class=\"literal\">null</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">stringifyComponent</span> = (<span class=\"params\">Comp</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"title class_\">Comp</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">String</span>(<span class=\"title class_\">Comp</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">storeStateUpdatesReducer</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [, updateCount] = state;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [action.<span class=\"property\">payload</span>, updateCount + <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">initStateUpdates</span> = (<span class=\"params\"></span>) =&gt; [<span class=\"literal\">null</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// React currently throws a warning when using useLayoutEffect on the server.</span></span><br><span class=\"line\"><span class=\"comment\">// To get around it, we can conditionally useEffect on the server (no-op) and</span></span><br><span class=\"line\"><span class=\"comment\">// useLayoutEffect in the browser. We need useLayoutEffect because we want</span></span><br><span class=\"line\"><span class=\"comment\">// `connect` to perform sync updates to a ref to save the latest props after</span></span><br><span class=\"line\"><span class=\"comment\">// a render is actually committed to the DOM.</span></span><br><span class=\"line\"><span class=\"comment\">// 在服务器上使用useEffect,浏览器使用useLayoutEffect</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> useIsomorphicLayoutEffect =</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span>.<span class=\"property\">document</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span>.<span class=\"property\">document</span>.<span class=\"property\">createElement</span> !== <span class=\"string\">&#x27;undefined&#x27;</span></span><br><span class=\"line\">        ? useLayoutEffect</span><br><span class=\"line\">        : useEffect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">connectAdvanced</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">    selectorFactory is a func that is responsible for returning the selector function used to</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">    compute new props from state, props, and dispatch. For example:</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">      export default connectAdvanced((dispatch, options) =&gt; (state, props) =&gt; (&#123;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">        thing: state.things[props.thingId],</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">        saveThing: fields =&gt; dispatch(actionCreators.saveThing(props.thingId, fields)),</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">      &#125;))(YourComponent)</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">    outside of their selector as an optimization. Options passed to connectAdvanced are passed to</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">    the selectorFactory, along with displayName and WrappedComponent, as the second argument.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">    Note that selectorFactory is responsible for all caching/memoization of inbound and outbound</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">    props. Do not use connectAdvanced directly without memoizing results between calls to your</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">    selector, otherwise the Connect component will re-render on every state or props change.</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"params\">  */</span></span></span><br><span class=\"line\"><span class=\"params\">    selectorFactory,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"comment\">// options object:</span></span></span><br><span class=\"line\"><span class=\"params\">    &#123;</span></span><br><span class=\"line\"><span class=\"params\">        // the func used to compute <span class=\"variable language_\">this</span> HOC<span class=\"string\">&#x27;s displayName from the wrapped component&#x27;</span>s displayName.</span></span><br><span class=\"line\"><span class=\"params\">        // probably overridden by wrapper functions such <span class=\"keyword\">as</span> connect()</span></span><br><span class=\"line\"><span class=\"params\">        getDisplayName = (name) =&gt; <span class=\"string\">`ConnectAdvanced(<span class=\"subst\">$&#123;name&#125;</span>)`</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        // shown <span class=\"keyword\">in</span> error messages</span></span><br><span class=\"line\"><span class=\"params\">        // probably overridden by wrapper functions such <span class=\"keyword\">as</span> connect()</span></span><br><span class=\"line\"><span class=\"params\">        methodName = <span class=\"string\">&#x27;connectAdvanced&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        // REMOVED: <span class=\"keyword\">if</span> defined, the name <span class=\"keyword\">of</span> the property passed to the wrapped element indicating the number <span class=\"keyword\">of</span></span></span><br><span class=\"line\"><span class=\"params\">        // calls to render. useful <span class=\"keyword\">for</span> watching <span class=\"keyword\">in</span> react devtools <span class=\"keyword\">for</span> unnecessary re-renders.</span></span><br><span class=\"line\"><span class=\"params\">        renderCountProp = <span class=\"literal\">undefined</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        // determines whether <span class=\"variable language_\">this</span> HOC subscribes to store changes</span></span><br><span class=\"line\"><span class=\"params\">        // 有mapStateToProps传递才是<span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"params\">        shouldHandleStateChanges = <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        // REMOVED: the key <span class=\"keyword\">of</span> props/context to get the store</span></span><br><span class=\"line\"><span class=\"params\">        storeKey = <span class=\"string\">&#x27;store&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        // REMOVED: expose the wrapped component via refs</span></span><br><span class=\"line\"><span class=\"params\">        withRef = <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        // use React<span class=\"string\">&#x27;s forwardRef to expose a ref of the wrapped component</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        forwardRef = false,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        // the context consumer to use</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        context = ReactReduxContext,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        // additional options are passed through to the selectorFactory</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        ...connectOptions</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    &#125; = &#123;&#125;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    invariant(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        renderCountProp === undefined,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        `renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension`,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    );</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    invariant(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        !withRef,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        &#x27;</span>withRef is removed. To access the wrapped instance, use a ref on the connected component<span class=\"string\">&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    );</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    const customStoreWarningMessage =</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        &#x27;</span>To use a custom Redux store <span class=\"keyword\">for</span> specific components, create a custom React context <span class=\"keyword\">with</span> <span class=\"string\">&#x27; +</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        &quot;React.createContext(), and pass the context object to React Redux&#x27;</span>s Provider and specific components<span class=\"string\">&quot; +</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        &#x27; like: &lt;Provider context=&#123;MyContext&#125;&gt;&lt;ConnectedComponent context=&#123;MyContext&#125; /&gt;&lt;/Provider&gt;. &#x27; +</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        &#x27;You may also pass a &#123;context : MyContext&#125; option to connect&#x27;;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    invariant(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        storeKey === &#x27;store&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        &#x27;storeKey has been removed and does not do anything. &#x27; + customStoreWarningMessage,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    );</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    const Context = context;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    // 高阶组件执行到这一步，WrappedComponent是用户业务组件</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    return function wrapWithConnect(WrappedComponent) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            invariant(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                isValidElementType(WrappedComponent),</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                `You must pass a component to the function returned by ` +</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    `$&#123;methodName&#125;. Instead received $&#123;stringifyComponent(WrappedComponent)&#125;`,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            );</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        const wrappedComponentName =</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            WrappedComponent.displayName || WrappedComponent.name || &#x27;Component&#x27;;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        const displayName = getDisplayName(wrappedComponentName);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        const selectorFactoryOptions = &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            ...connectOptions,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            getDisplayName,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            methodName,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            renderCountProp,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            shouldHandleStateChanges,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            storeKey,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            displayName,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            wrappedComponentName,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            WrappedComponent,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        &#125;;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        // 默认是true,可被用户覆盖</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        const &#123;pure&#125; = connectOptions;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        // 见 selectorFactory.md -&gt; finalPropsSelectorFactory</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        function createChildSelector(store) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            return selectorFactory(store.dispatch, selectorFactoryOptions);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        // If we aren&#x27;t running in &quot;</span>pure<span class=\"string\">&quot; mode, we don&#x27;t want to memoize values.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        // To avoid conditionally calling hooks, we fall back to a tiny wrapper</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        // that just executes the given callback immediately.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        const usePureOnlyMemo = pure ? useMemo : (callback) =&gt; callback();</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        function ConnectFunction(props) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // context, ref, rest其他props属性</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const [propsContext, forwardedRef, wrapperProps] = useMemo(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // Distinguish between actual &quot;</span>data<span class=\"string\">&quot; props that were passed to the wrapper component,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // and values needed to control behavior (forwarded refs, alternate context instances).</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // To maintain the wrapperProps object reference, memoize this destructuring.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                const &#123;forwardedRef, ...wrapperProps&#125; = props;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                return [props.context, forwardedRef, wrapperProps];</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            &#125;, [props]);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // 判断使用哪个context(用户or默认)</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const ContextToUse = useMemo(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // 使用用户传递的context或默认context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // Memoize the check that determines which context instance we should use.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                return propsContext &amp;&amp;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    propsContext.Consumer &amp;&amp;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    isContextConsumer(&lt;propsContext.Consumer /&gt;)</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    ? propsContext</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    : Context;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            &#125;, [propsContext, Context]);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // Retrieve the store and ancestor subscription via context, if available</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            /**</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">       * &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            store,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            subscription</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">       */</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // useContext见react context.md</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // contextValue应该是&#123;store,subscription&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const contextValue = useContext(ContextToUse);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // The store _must_ exist as either a prop or in context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // 按照规范来使用redux, didStoreComeFromContext应该是true</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // 用户传递的store</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const didStoreComeFromProps = Boolean(props.store);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // redux生成的store</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const didStoreComeFromContext = Boolean(contextValue) &amp;&amp; Boolean(contextValue.store);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            invariant(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                didStoreComeFromProps || didStoreComeFromContext,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                `Could not find &quot;</span>store<span class=\"string\">&quot; in the context of ` +</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    `&quot;</span>$&#123;displayName&#125;<span class=\"string\">&quot;. Either wrap the root component in a &lt;Provider&gt;, ` +</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    `or pass a custom React context provider to &lt;Provider&gt; and the corresponding ` +</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    `React context consumer to $&#123;displayName&#125; in connect options.`,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            );</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const store = props.store || contextValue.store;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // 返回了函数 selectorFactory 的 pureFinalPropsSelector</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const childPropsSelector = useMemo(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // 处理connect参数（MapStateToProps等），执行在下面</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // The child props selector needs the store reference as an input.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // Re-create this selector whenever the store changes.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                return createChildSelector(store);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            &#125;, [store]);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const [subscription, notifyNestedSubs] = useMemo(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // This Subscription&#x27;s source should match where store came from: props vs. context. A component</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // connected to the store via props shouldn&#x27;t use subscription from context, or vice versa.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // 如果是react-redux生成的context, 传递subscription</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // 用户自定义context,就不传</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // 这里其实是关联了provider生成的contextValue</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                const subscription = new Subscription(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    store,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    didStoreComeFromProps ? null : contextValue.subscription,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                );</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // the middle of the notification loop, where `subscription` will then be null. This can</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // probably be avoided if Subscription&#x27;s listeners logic is changed to not call listeners</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // that have been unsubscribed in the  middle of the notification loop.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // 都没`trySubscribe`,第一次就是个空函数</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                const notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                return [subscription, notifyNestedSubs];</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            &#125;, [store, didStoreComeFromProps, contextValue]);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // Determine what &#123;store, subscription&#125; value should be put into nested context, if necessary,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // and memoize that value to avoid unnecessary context updates.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // 替换了`contextValue`里原来的`subscription`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const overriddenContextValue = useMemo(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                if (didStoreComeFromProps) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    // This component is directly subscribed to a store from props.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    // We don&#x27;t want descendants reading from this store - pass down whatever</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    // the existing context value is from the nearest connected ancestor.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    return contextValue;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // Otherwise, put this component&#x27;s subscription instance into context, so that</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // connected descendants won&#x27;t update until after this component is done</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                return &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    ...contextValue,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    subscription,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                &#125;;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            &#125;, [didStoreComeFromProps, contextValue, subscription]);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // We need to force this wrapper component to re-render whenever a Redux store update</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // causes a change to the calculated child component props (or we caught an error in mapState)</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // 建了一个count计数，用于forceUpdate,或者用于报错</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const [[previousStateUpdateResult], forceComponentUpdateDispatch] = useReducer(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                storeStateUpdatesReducer,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                EMPTY_ARRAY,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                initStateUpdates,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            );</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // Propagate any mapState/mapDispatch errors upwards</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            if (previousStateUpdateResult &amp;&amp; previousStateUpdateResult.error) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                throw previousStateUpdateResult.error;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // Set up refs to coordinate values between the subscription effect and the render logic</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const lastChildProps = useRef(); // &#123;current: undefined&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const lastWrapperProps = useRef(wrapperProps); // &#123;current: wrapperProps&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const childPropsFromStoreUpdate = useRef();</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const renderIsScheduled = useRef(false);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // 如果 pure,是useMemo,否则就是无视依赖的必定执行函数</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // 返回connect传递参数mergedProps的结果，如果不传mergedProps，返回前2个参数结果和props的&#123;...a,...b, ...props&#125;结果</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // 这也是最终的传给子组件的props</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const actualChildProps = usePureOnlyMemo(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // Tricky logic here:</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // - This render may have been triggered by a Redux store update that produced new child props</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // - However, we may have gotten new wrapper props after that</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // So, we&#x27;ll use the child props from store update only if the wrapper props are the same as last time.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                if (</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    childPropsFromStoreUpdate.current &amp;&amp;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    wrapperProps === lastWrapperProps.current</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                ) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    return childPropsFromStoreUpdate.current;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // TODO We&#x27;re reading the store directly in render() here. Bad idea?</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // This will likely cause Bad Things (TM) to happen in Concurrent Mode.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // Note that we do this because on renders _not_ caused by store updates, we need the latest store state</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // to determine what the child props should be.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // 执行connect参数（MapStateToProps等），即 pureFinalPropsSelector</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                return childPropsSelector(store.getState(), wrapperProps);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            &#125;, [store, previousStateUpdateResult, wrapperProps]);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // We need this to execute synchronously every time we re-render. However, React warns</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // about useLayoutEffect in SSR, so we try to detect environment and fall back to</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // just useEffect instead to avoid the warning, since neither will run anyway.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            useIsomorphicLayoutEffect(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // We want to capture the wrapper props and child props we used for later comparisons</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                lastWrapperProps.current = wrapperProps;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                lastChildProps.current = actualChildProps;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                renderIsScheduled.current = false;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // If the render was from a store update, clear out that reference and cascade the subscriber update</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                if (childPropsFromStoreUpdate.current) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    childPropsFromStoreUpdate.current = null;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    notifyNestedSubs();</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            &#125;);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // Our re-subscribe logic only runs when the store/subscription setup changes</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            useIsomorphicLayoutEffect(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // If we&#x27;re not subscribed to the store, nothing to do here</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                if (!shouldHandleStateChanges) return;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // Capture values for checking if and when this component unmounts</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                let didUnsubscribe = false;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                let lastThrownError = null;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // We&#x27;ll run this callback every time a store subscription update propagates to this component</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                const checkForUpdates = () =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    if (didUnsubscribe) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // Don&#x27;t run stale listeners.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // Redux doesn&#x27;t guarantee unsubscriptions happen until next dispatch.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        return;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    const latestStoreState = store.getState();</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    let newChildProps, error;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    try &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // Actually run the selector with the most recent store state and wrapper props</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // to determine what the child props should be</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // 同上面返回合并结果</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        newChildProps = childPropsSelector(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                            latestStoreState,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                            lastWrapperProps.current,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        );</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    &#125; catch (e) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        error = e;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        lastThrownError = e;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    if (!error) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        lastThrownError = null;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    // If the child props haven&#x27;t changed, nothing to do here - cascade the subscription update</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    // 第一次参数相同，但renderIsScheduled.current是false</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    if (newChildProps === lastChildProps.current) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        if (!renderIsScheduled.current) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                            notifyNestedSubs();</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    &#125; else &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // Save references to the new child props.  Note that we track the &quot;</span>child props <span class=\"keyword\">from</span> store update<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // as a ref instead of a useState/useReducer because we need a way to determine if that value has</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // been processed.  If this went into useState/useReducer, we couldn&#x27;t clear out the value without</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // forcing another re-render, which we don&#x27;t want.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        lastChildProps.current = newChildProps;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        childPropsFromStoreUpdate.current = newChildProps;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        renderIsScheduled.current = true;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // If the child props _did_ change (or we caught an error), this wrapper component needs to re-render</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        forceComponentUpdateDispatch(&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                            type: &#x27;STORE_UPDATED&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                            payload: &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                                latestStoreState,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                                error,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                            &#125;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        &#125;);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                &#125;;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // Actually subscribe to the nearest connected ancestor (or store)</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                subscription.onStateChange = checkForUpdates;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                subscription.trySubscribe();</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // Pull data from the store after first render in case the store has</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                // changed since we began.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                checkForUpdates();</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                const unsubscribeWrapper = () =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    // 取消监听</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    didUnsubscribe = true;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    subscription.tryUnsubscribe();</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    subscription.onStateChange = null;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    if (lastThrownError) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // It&#x27;s possible that we caught an error due to a bad mapState function, but the</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // parent re-rendered without this component and we&#x27;re about to unmount.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // This shouldn&#x27;t happen as long as we do top-down subscriptions correctly, but</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // if we ever do those wrong, this throw will surface the error in our tests.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        // In that case, throw the error from here so it doesn&#x27;t get lost.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        throw lastThrownError;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                &#125;;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                return unsubscribeWrapper;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            &#125;, [store, subscription, childPropsSelector]);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // Now that all that&#x27;s done, we can finally try to actually render the child component.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // We memoize the elements for the rendered child component as an optimization.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const renderedWrappedComponent = useMemo(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                () =&gt; &lt;WrappedComponent &#123;...actualChildProps&#125; ref=&#123;forwardedRef&#125; /&gt;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                [forwardedRef, WrappedComponent, actualChildProps],</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            );</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // If React sees the exact same element reference as last time, it bails out of re-rendering</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const renderedChild = useMemo(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                if (shouldHandleStateChanges) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    // If this component is subscribed to store updates, we need to pass its own</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    // subscription instance down to our descendants. That means rendering the same</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    // Context instance, and putting a different value into the context.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    // overriddenContextValue在一般情况下应该是最上层store的clone数据</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    return (</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        &lt;ContextToUse.Provider value=&#123;overriddenContextValue&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                            &#123;renderedWrappedComponent&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                        &lt;/ContextToUse.Provider&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                    );</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                return renderedWrappedComponent;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            &#125;, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            // connect执行到此结束</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            return renderedChild;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        // If we&#x27;re in &quot;</span>pure<span class=\"string\">&quot; mode, ensure our wrapper component only re-renders when incoming props have changed.</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        const Connect = pure ? React.memo(ConnectFunction) : ConnectFunction;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        Connect.WrappedComponent = WrappedComponent;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        Connect.displayName = displayName;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        if (forwardRef) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            const forwarded = React.forwardRef(function forwardConnectRef(props, ref) &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">                return &lt;Connect &#123;...props&#125; forwardedRef=&#123;ref&#125; /&gt;;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            &#125;);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            forwarded.displayName = displayName;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            forwarded.WrappedComponent = WrappedComponent;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">            return hoistStatics(forwarded, WrappedComponent);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        // 把WrappedComponent不是react内部的属性复制到Connect里，并返回Connect</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">        return hoistStatics(Connect, WrappedComponent);</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">    &#125;;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"params\">&#125;</span></span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react-redux"
            ]
        },
        {
            "id": "http://example.com/2020/09/14/react-redux/createStore/",
            "url": "http://example.com/2020/09/14/react-redux/createStore/",
            "title": "createStore",
            "date_published": "2020-09-14T06:00:00.000Z",
            "content_html": "<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a Redux store that holds the state tree.</span></span><br><span class=\"line\"><span class=\"comment\"> * The only way to change the data in the store is to call `dispatch()` on it.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * There should only be a single store in your app. To specify how different</span></span><br><span class=\"line\"><span class=\"comment\"> * parts of the state tree respond to actions, you may combine several reducers</span></span><br><span class=\"line\"><span class=\"comment\"> * into a single reducer function by using `combineReducers`.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; reducer A function that returns the next state tree, given</span></span><br><span class=\"line\"><span class=\"comment\"> * the current state tree and the action to handle.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any</span>&#125; [preloadedState] The initial state. You may optionally specify it</span></span><br><span class=\"line\"><span class=\"comment\"> * to hydrate the state from the server in universal apps, or to restore a</span></span><br><span class=\"line\"><span class=\"comment\"> * previously serialized user session.</span></span><br><span class=\"line\"><span class=\"comment\"> * If you use `combineReducers` to produce the root reducer function, this must be</span></span><br><span class=\"line\"><span class=\"comment\"> * an object with the same shape as `combineReducers` keys.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; [enhancer] The store enhancer. You may optionally specify it</span></span><br><span class=\"line\"><span class=\"comment\"> * to enhance the store with third-party capabilities such as middleware,</span></span><br><span class=\"line\"><span class=\"comment\"> * time travel, persistence, etc. The only store enhancer that ships with Redux</span></span><br><span class=\"line\"><span class=\"comment\"> * is `applyMiddleware()`.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Store</span>&#125; A Redux store that lets you read the state, dispatch actions</span></span><br><span class=\"line\"><span class=\"comment\"> * and subscribe to changes.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createStore</span>(<span class=\"params\">reducer, preloadedState, enhancer</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类型不对，报错</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">&#x27;function&#x27;</span>) ||</span><br><span class=\"line\">        (<span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"variable language_\">arguments</span>[<span class=\"number\">3</span>] === <span class=\"string\">&#x27;function&#x27;</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">            <span class=\"string\">&#x27;It looks like you are passing several store enhancers to &#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;createStore(). This is not supported. Instead, compose them &#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;together to a single function&#x27;</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可以不传preloadedState反而传enhancer（单独省略第二个参数）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> preloadedState === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> enhancer === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">        enhancer = preloadedState;</span><br><span class=\"line\">        preloadedState = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> enhancer !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Expected the enhancer to be a function.&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">enhancer</span>(createStore)(reducer, preloadedState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reducer !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Expected the reducer to be a function.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentReducer = reducer;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentState = preloadedState;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentListeners = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextListeners = currentListeners;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isDispatching = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 相同就取一个备份</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">ensureCanMutateNextListeners</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextListeners === currentListeners) &#123;</span><br><span class=\"line\">            nextListeners = currentListeners.<span class=\"title function_\">slice</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Reads the state tree managed by the store.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">any</span>&#125; The current state tree of your application.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">getState</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">                <span class=\"string\">&#x27;You may not call store.getState() while the reducer is executing. &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;The reducer has already received the state as an argument. &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Pass it down from the top reducer instead of reading it from the store.&#x27;</span>,</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> currentState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Adds a change listener. It will be called any time an action is dispatched,</span></span><br><span class=\"line\"><span class=\"comment\">     * and some part of the state tree may potentially have changed. You may then</span></span><br><span class=\"line\"><span class=\"comment\">     * call `getState()` to read the current state tree inside the callback.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * You may call `dispatch()` from a change listener, with the following</span></span><br><span class=\"line\"><span class=\"comment\">     * caveats:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. The subscriptions are snapshotted just before every `dispatch()` call.</span></span><br><span class=\"line\"><span class=\"comment\">     * If you subscribe or unsubscribe while the listeners are being invoked, this</span></span><br><span class=\"line\"><span class=\"comment\">     * will not have any effect on the `dispatch()` that is currently in progress.</span></span><br><span class=\"line\"><span class=\"comment\">     * However, the next `dispatch()` call, whether nested or not, will use a more</span></span><br><span class=\"line\"><span class=\"comment\">     * recent snapshot of the subscription list.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. The listener should not expect to see all state changes, as the state</span></span><br><span class=\"line\"><span class=\"comment\">     * might have been updated multiple times during a nested `dispatch()` before</span></span><br><span class=\"line\"><span class=\"comment\">     * the listener is called. It is, however, guaranteed that all subscribers</span></span><br><span class=\"line\"><span class=\"comment\">     * registered before the `dispatch()` started will be called with the latest</span></span><br><span class=\"line\"><span class=\"comment\">     * state by the time it exits.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; listener A callback to be invoked on every dispatch.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Function</span>&#125; A function to remove this change listener.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">subscribe</span>(<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> listener !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Expected the listener to be a function.&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">                <span class=\"string\">&#x27;You may not call store.subscribe() while the reducer is executing. &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;If you would like to be notified after the store has been updated, subscribe from a &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;component and invoke store.getState() in the callback to access the latest state. &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;See https://redux.js.org/api-reference/store#subscribe(listener) for more details.&#x27;</span>,</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> isSubscribed = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">ensureCanMutateNextListeners</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 添加监听函数</span></span><br><span class=\"line\">        nextListeners.<span class=\"title function_\">push</span>(listener);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unsubscribe</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isSubscribed) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">                    <span class=\"string\">&#x27;You may not unsubscribe from a store listener while the reducer is executing. &#x27;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&#x27;See https://redux.js.org/api-reference/store#subscribe(listener) for more details.&#x27;</span>,</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            isSubscribed = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"title function_\">ensureCanMutateNextListeners</span>();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> index = nextListeners.<span class=\"title function_\">indexOf</span>(listener);</span><br><span class=\"line\">            nextListeners.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Dispatches an action. It is the only way to trigger a state change.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * The `reducer` function, used to create the store, will be called with the</span></span><br><span class=\"line\"><span class=\"comment\">     * current state tree and the given `action`. Its return value will</span></span><br><span class=\"line\"><span class=\"comment\">     * be considered the **next** state of the tree, and the change listeners</span></span><br><span class=\"line\"><span class=\"comment\">     * will be notified.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * The base implementation only supports plain object actions. If you want to</span></span><br><span class=\"line\"><span class=\"comment\">     * dispatch a Promise, an Observable, a thunk, or something else, you need to</span></span><br><span class=\"line\"><span class=\"comment\">     * wrap your store creating function into the corresponding middleware. For</span></span><br><span class=\"line\"><span class=\"comment\">     * example, see the documentation for the `redux-thunk` package. Even the</span></span><br><span class=\"line\"><span class=\"comment\">     * middleware will eventually dispatch plain object actions using this method.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; action A plain object representing “what changed”. It is</span></span><br><span class=\"line\"><span class=\"comment\">     * a good idea to keep actions serializable so you can record and replay user</span></span><br><span class=\"line\"><span class=\"comment\">     * sessions, or use the time travelling `redux-devtools`. An action must have</span></span><br><span class=\"line\"><span class=\"comment\">     * a `type` property which may not be `undefined`. It is a good idea to use</span></span><br><span class=\"line\"><span class=\"comment\">     * string constants for action types.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Object</span>&#125; For convenience, the same action object you dispatched.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * Note that, if you use a custom middleware, it may wrap `dispatch()` to</span></span><br><span class=\"line\"><span class=\"comment\">     * return something else (for example, a Promise you can await).</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">dispatch</span>(<span class=\"params\">action</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_\">isPlainObject</span>(action)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">                <span class=\"string\">&#x27;Actions must be plain objects. &#x27;</span> + <span class=\"string\">&#x27;Use custom middleware for async actions.&#x27;</span>,</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> action.<span class=\"property\">type</span> === <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(</span><br><span class=\"line\">                <span class=\"string\">&#x27;Actions may not have an undefined &quot;type&quot; property. &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Have you misspelled a constant?&#x27;</span>,</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isDispatching) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Reducers may not dispatch actions.&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            isDispatching = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 用户自定义reducer方法</span></span><br><span class=\"line\">            <span class=\"comment\">// 初始化时action是react定义的一个变量，理论上是返回case default的数据,在这里就是preloadedState参数的值</span></span><br><span class=\"line\">            <span class=\"comment\">// 手动调用时就取用户期望的case</span></span><br><span class=\"line\">            currentState = <span class=\"title function_\">currentReducer</span>(currentState, action);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            isDispatching = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 初始化时就是空[]</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> listeners = (currentListeners = nextListeners);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; listeners.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> listener = listeners[i];</span><br><span class=\"line\">            <span class=\"title function_\">listener</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> action;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Replaces the reducer currently used by the store to calculate the state.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * You might need this if your app implements code splitting and you want to</span></span><br><span class=\"line\"><span class=\"comment\">     * load some of the reducers dynamically. You might also need this if you</span></span><br><span class=\"line\"><span class=\"comment\">     * implement a hot reloading mechanism for Redux.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; nextReducer The reducer for the store to use instead.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">replaceReducer</span>(<span class=\"params\">nextReducer</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextReducer !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Expected the nextReducer to be a function.&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentReducer = nextReducer;</span><br><span class=\"line\">        <span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>: <span class=\"title class_\">ActionTypes</span>.<span class=\"property\">REPLACE</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Interoperability point for observable/reactive libraries.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">observable</span>&#125; A minimal observable of state changes.</span></span><br><span class=\"line\"><span class=\"comment\">     * For more information, see the observable proposal:</span></span><br><span class=\"line\"><span class=\"comment\">     * https://github.com/tc39/proposal-observable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">observable</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> outerSubscribe = subscribe;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * The minimal observable subscription method.</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Object</span>&#125; observer Any object that can be used as an observer.</span></span><br><span class=\"line\"><span class=\"comment\">             * The observer object should have a `next` method.</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">subscription</span>&#125; An object with an `unsubscribe` method that can</span></span><br><span class=\"line\"><span class=\"comment\">             * be used to unsubscribe the observable from the store, and prevent further</span></span><br><span class=\"line\"><span class=\"comment\">             * emission of values from the observable.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"title function_\">subscribe</span>(<span class=\"params\">observer</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> observer !== <span class=\"string\">&#x27;object&#x27;</span> || observer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Expected the observer to be an object.&#x27;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">function</span> <span class=\"title function_\">observeState</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (observer.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">                        observer.<span class=\"title function_\">next</span>(<span class=\"title function_\">getState</span>());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"title function_\">observeState</span>();</span><br><span class=\"line\">                <span class=\"keyword\">const</span> unsubscribe = <span class=\"title function_\">outerSubscribe</span>(observeState);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;unsubscribe&#125;;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            [$$observable]() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// When a store is created, an &quot;INIT&quot; action is dispatched so that every</span></span><br><span class=\"line\">    <span class=\"comment\">// reducer returns their initial state. This effectively populates</span></span><br><span class=\"line\">    <span class=\"comment\">// the initial state tree.</span></span><br><span class=\"line\">    <span class=\"comment\">// 填充初始数据</span></span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>: <span class=\"title class_\">ActionTypes</span>.<span class=\"property\">INIT</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        dispatch,</span><br><span class=\"line\">        subscribe,</span><br><span class=\"line\">        getState,</span><br><span class=\"line\">        replaceReducer,</span><br><span class=\"line\">        [$$observable]: observable,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react-redux"
            ]
        },
        {
            "id": "http://example.com/2020/09/14/react-redux/selectorFactory/",
            "url": "http://example.com/2020/09/14/react-redux/selectorFactory/",
            "title": "selectorFactory",
            "date_published": "2020-09-14T06:00:00.000Z",
            "content_html": "<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> verifySubselectors <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./verifySubselectors&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">impureFinalPropsSelectorFactory</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    mapStateToProps,</span></span><br><span class=\"line\"><span class=\"params\">    mapDispatchToProps,</span></span><br><span class=\"line\"><span class=\"params\">    mergeProps,</span></span><br><span class=\"line\"><span class=\"params\">    dispatch,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">impureFinalPropsSelector</span>(<span class=\"params\">state, ownProps</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">mergeProps</span>(</span><br><span class=\"line\">            <span class=\"title function_\">mapStateToProps</span>(state, ownProps),</span><br><span class=\"line\">            <span class=\"title function_\">mapDispatchToProps</span>(dispatch, ownProps),</span><br><span class=\"line\">            ownProps,</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">pureFinalPropsSelectorFactory</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    mapStateToProps,</span></span><br><span class=\"line\"><span class=\"params\">    mapDispatchToProps,</span></span><br><span class=\"line\"><span class=\"params\">    mergeProps,</span></span><br><span class=\"line\"><span class=\"params\">    dispatch,</span></span><br><span class=\"line\"><span class=\"params\">    &#123;areStatesEqual, areOwnPropsEqual, areStatePropsEqual&#125;,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasRunAtLeastOnce = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> state;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ownProps;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stateProps;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dispatchProps;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mergedProps;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 参数分别是当前store数据，父组件传递的props</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">handleFirstCall</span>(<span class=\"params\">firstState, firstOwnProps</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回最终合并后的参数</span></span><br><span class=\"line\">        state = firstState;</span><br><span class=\"line\">        ownProps = firstOwnProps;</span><br><span class=\"line\">        <span class=\"comment\">// 这里执行的 connect.md proxy，最终也是用户的 renturn 结果</span></span><br><span class=\"line\">        stateProps = <span class=\"title function_\">mapStateToProps</span>(state, ownProps);</span><br><span class=\"line\">        dispatchProps = <span class=\"title function_\">mapDispatchToProps</span>(dispatch, ownProps);</span><br><span class=\"line\">        mergedProps = <span class=\"title function_\">mergeProps</span>(stateProps, dispatchProps, ownProps);</span><br><span class=\"line\">        hasRunAtLeastOnce = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mergedProps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">handleNewPropsAndNewState</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 两个都不同</span></span><br><span class=\"line\">        stateProps = <span class=\"title function_\">mapStateToProps</span>(state, ownProps);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mapDispatchToProps.<span class=\"property\">dependsOnOwnProps</span>)</span><br><span class=\"line\">            dispatchProps = <span class=\"title function_\">mapDispatchToProps</span>(dispatch, ownProps);</span><br><span class=\"line\"></span><br><span class=\"line\">        mergedProps = <span class=\"title function_\">mergeProps</span>(stateProps, dispatchProps, ownProps);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mergedProps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">handleNewProps</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// props不同看用户是否有用到第二个参数props,用到了就重新计算</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mapStateToProps.<span class=\"property\">dependsOnOwnProps</span>) stateProps = <span class=\"title function_\">mapStateToProps</span>(state, ownProps);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mapDispatchToProps.<span class=\"property\">dependsOnOwnProps</span>)</span><br><span class=\"line\">            dispatchProps = <span class=\"title function_\">mapDispatchToProps</span>(dispatch, ownProps);</span><br><span class=\"line\"></span><br><span class=\"line\">        mergedProps = <span class=\"title function_\">mergeProps</span>(stateProps, dispatchProps, ownProps);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mergedProps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">handleNewState</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 仅store变了</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> nextStateProps = <span class=\"title function_\">mapStateToProps</span>(state, ownProps);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> statePropsChanged = !<span class=\"title function_\">areStatePropsEqual</span>(nextStateProps, stateProps); <span class=\"comment\">// 浅层比较新旧</span></span><br><span class=\"line\">        stateProps = nextStateProps;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (statePropsChanged) mergedProps = <span class=\"title function_\">mergeProps</span>(stateProps, dispatchProps, ownProps);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mergedProps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">handleSubsequentCalls</span>(<span class=\"params\">nextState, nextOwnProps</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> propsChanged = !<span class=\"title function_\">areOwnPropsEqual</span>(nextOwnProps, ownProps); <span class=\"comment\">// props浅比较</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> stateChanged = !<span class=\"title function_\">areStatesEqual</span>(nextState, state); <span class=\"comment\">// store的值是全等比较</span></span><br><span class=\"line\">        state = nextState;</span><br><span class=\"line\">        ownProps = nextOwnProps;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propsChanged &amp;&amp; stateChanged) <span class=\"keyword\">return</span> <span class=\"title function_\">handleNewPropsAndNewState</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propsChanged) <span class=\"keyword\">return</span> <span class=\"title function_\">handleNewProps</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stateChanged) <span class=\"keyword\">return</span> <span class=\"title function_\">handleNewState</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mergedProps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 两个参数分别是sotre.getState()和connect包裹组件的props</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">pureFinalPropsSelector</span>(<span class=\"params\">nextState, nextOwnProps</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hasRunAtLeastOnce <span class=\"comment\">// 默认false</span></span><br><span class=\"line\">            ? <span class=\"title function_\">handleSubsequentCalls</span>(nextState, nextOwnProps) <span class=\"comment\">// 后续</span></span><br><span class=\"line\">            : <span class=\"title function_\">handleFirstCall</span>(nextState, nextOwnProps); <span class=\"comment\">// 首次</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> Add more comments</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If pure is true, the selector returned by selectorFactory will memoize its results,</span></span><br><span class=\"line\"><span class=\"comment\">// allowing connectAdvanced&#x27;s shouldComponentUpdate to return false if final</span></span><br><span class=\"line\"><span class=\"comment\">// props have not changed. If false, the selector will always return a new</span></span><br><span class=\"line\"><span class=\"comment\">// object and shouldComponentUpdate will always return true.</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">finalPropsSelectorFactory</span>(<span class=\"params\"> <span class=\"comment\">// 即selectorFactory</span></span></span><br><span class=\"line\"><span class=\"params\">    dispatch,</span></span><br><span class=\"line\"><span class=\"params\">    &#123;initMapStateToProps, initMapDispatchToProps, initMergeProps, ...options&#125;,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里执行的 wrapMapToProps 的 initProxySelector</span></span><br><span class=\"line\">    <span class=\"comment\">// 见 connect.md wrapMapToPropsFunc</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> mapStateToProps = <span class=\"title function_\">initMapStateToProps</span>(dispatch, options);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mapDispatchToProps = <span class=\"title function_\">initMapDispatchToProps</span>(dispatch, options);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mergeProps = <span class=\"title function_\">initMergeProps</span>(dispatch, options);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">verifySubselectors</span>(mapStateToProps, mapDispatchToProps, mergeProps, options.<span class=\"property\">displayName</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> selectorFactory = options.<span class=\"property\">pure</span> <span class=\"comment\">// pure才会去比较，不然全部都执行</span></span><br><span class=\"line\">        ? pureFinalPropsSelectorFactory</span><br><span class=\"line\">        : impureFinalPropsSelectorFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回的还是一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">selectorFactory</span>(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react-redux"
            ]
        },
        {
            "id": "http://example.com/2020/09/14/react-redux/Provider/",
            "url": "http://example.com/2020/09/14/react-redux/Provider/",
            "title": "Provider",
            "date_published": "2020-09-14T02:00:00.000Z",
            "content_html": "<h3 id=\"provider\"><a class=\"markdownIt-Anchor\" href=\"#provider\">#</a> Provider</h3>\n<p>Provider 接收 3 个参数，context 也可以自定义</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Provider</span>(<span class=\"params\">&#123;store, context, children&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> contextValue = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> subscription = <span class=\"keyword\">new</span> <span class=\"title class_\">Subscription</span>(store); <span class=\"comment\">// 初始化订阅</span></span><br><span class=\"line\">        subscription.<span class=\"property\">onStateChange</span> = subscription.<span class=\"property\">notifyNestedSubs</span>; <span class=\"comment\">// this.listeners.notify();</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            store,</span><br><span class=\"line\">            subscription,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;, [store]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回store数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> previousState = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> store.<span class=\"title function_\">getState</span>(), [store]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;subscription&#125; = contextValue;</span><br><span class=\"line\">        subscription.<span class=\"title function_\">trySubscribe</span>(); <span class=\"comment\">// 尝试订阅，订阅函数初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (previousState !== store.<span class=\"title function_\">getState</span>()) &#123;</span><br><span class=\"line\">            subscription.<span class=\"title function_\">notifyNestedSubs</span>(); <span class=\"comment\">// 遍历执行listener，第一次是空</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            subscription.<span class=\"title function_\">tryUnsubscribe</span>(); <span class=\"comment\">// 解绑</span></span><br><span class=\"line\">            subscription.<span class=\"property\">onStateChange</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;, [contextValue, previousState]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title class_\">Context</span> = context || <span class=\"title class_\">ReactReduxContext</span>; <span class=\"comment\">// 默认的React.createContext</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 以react context的方式传递value, Context相关可看react context.md</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;contextValue&#125;</span>&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react-redux"
            ]
        },
        {
            "id": "http://example.com/2020/09/14/react-redux/%E5%BC%80%E5%A7%8B/",
            "url": "http://example.com/2020/09/14/react-redux/%E5%BC%80%E5%A7%8B/",
            "title": "流程",
            "date_published": "2020-09-14T02:00:00.000Z",
            "content_html": "<h2 id=\"初始化\"><a class=\"markdownIt-Anchor\" href=\"#初始化\">#</a> 初始化</h2>\n<p>从 createStore 开始</p>\n<p>见  <code>createStore.md</code> , 返回了一个对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    dispatch,</span><br><span class=\"line\">    subscribe,</span><br><span class=\"line\">    getState,</span><br><span class=\"line\">    replaceReducer,</span><br><span class=\"line\">    [$$observable]: observable,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用 Provider 传递 store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"title class_\">Provider</span> store=&#123;store&#125;&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span></span><br><span class=\"line\">&lt;/<span class=\"title class_\">Provider</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>看  <code>Provider.md</code></p>\n<h2 id=\"获取\"><a class=\"markdownIt-Anchor\" href=\"#获取\">#</a> 获取</h2>\n<p>用 connect 高阶组件获取数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">TodoActionCreators</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../context/action&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapStateToProps</span> = (<span class=\"params\">state, props</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(state, props);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">todos</span>: state,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// const mapDispatchToProps = (</span></span><br><span class=\"line\"><span class=\"comment\">//   dispatch,</span></span><br><span class=\"line\"><span class=\"comment\">// ) =&gt; bindActionCreators(TodoActionCreators, dispatch)</span></span><br><span class=\"line\">@<span class=\"title function_\">connect</span>(mapStateToProps, <span class=\"title class_\">TodoActionCreators</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AAA</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>见 <span class=\"exturl\" data-url=\"aHR0cDovL2Nvbm5lY3QubWQ=\">connect.md</span></p>\n<h2 id=\"跟新\"><a class=\"markdownIt-Anchor\" href=\"#跟新\">#</a> 跟新</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">dispatch</span>(&#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;ADD&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;...&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>就是 <code>store.dispatch</code> , 然后触发 <code>onStateChange</code>  方法，在 <code>batchedUpdates</code>  中跟新了数据，在 <code>connect</code>  中，contextValue 的改变触发了 <code>checkForUpdates</code>  里的 <code>forceComponentUpdateDispatch</code>  重新渲染</p>\n<p>这里在不 debugger 代码的情况下还不是很清楚，感觉一下子会触发了好几种不同的方式去跟新页面</p>\n",
            "tags": [
                "react-redux"
            ]
        }
    ]
}