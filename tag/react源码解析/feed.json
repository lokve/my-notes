{
    "version": "https://jsonfeed.org/version/1",
    "title": "学习笔记 • All posts by \"react源码解析\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/09/11/react/context/",
            "url": "http://example.com/2020/09/11/react/context/",
            "title": "completeWork",
            "date_published": "2020-09-11T03:00:00.000Z",
            "content_html": "<h2 id=\"创建\"><a class=\"markdownIt-Anchor\" href=\"#创建\">#</a> 创建</h2>\n<h3 id=\"createcontext\"><a class=\"markdownIt-Anchor\" href=\"#createcontext\">#</a> createContext</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> createContext&lt;T&gt;(</span><br><span class=\"line\">    <span class=\"attr\">defaultValue</span>: T,</span><br><span class=\"line\">    <span class=\"attr\">calculateChangedBits</span>: ?<span class=\"function\">(<span class=\"params\">a: T, b: T</span>) =&gt;</span> number,</span><br><span class=\"line\">): <span class=\"title class_\">ReactContext</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (calculateChangedBits === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        calculateChangedBits = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">warningWithoutStack</span>(</span><br><span class=\"line\">                calculateChangedBits === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> calculateChangedBits === <span class=\"string\">&#x27;function&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;createContext: Expected the optional second argument to be a &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;function. Instead received: %s&#x27;</span>,</span><br><span class=\"line\">                calculateChangedBits,</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">context</span>: <span class=\"title class_\">ReactContext</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">        <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_CONTEXT_TYPE</span>,</span><br><span class=\"line\">        <span class=\"attr\">_calculateChangedBits</span>: calculateChangedBits,</span><br><span class=\"line\">        <span class=\"comment\">// As a workaround to support multiple concurrent renderers, we categorize</span></span><br><span class=\"line\">        <span class=\"comment\">// some renderers as primary and others as secondary. We only expect</span></span><br><span class=\"line\">        <span class=\"comment\">// there to be two concurrent renderers at most: React Native (primary) and</span></span><br><span class=\"line\">        <span class=\"comment\">// Fabric (secondary); React DOM (primary) and React ART (secondary).</span></span><br><span class=\"line\">        <span class=\"comment\">// Secondary renderers store their context values on separate fields.</span></span><br><span class=\"line\">        <span class=\"attr\">_currentValue</span>: defaultValue,</span><br><span class=\"line\">        <span class=\"attr\">_currentValue2</span>: defaultValue,</span><br><span class=\"line\">        <span class=\"comment\">// Used to track how many concurrent renderers this context currently</span></span><br><span class=\"line\">        <span class=\"comment\">// supports within in a single renderer. Such as parallel server rendering.</span></span><br><span class=\"line\">        <span class=\"attr\">_threadCount</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"comment\">// These are circular</span></span><br><span class=\"line\">        <span class=\"title class_\">Provider</span>: (<span class=\"attr\">null</span>: any),</span><br><span class=\"line\">        <span class=\"title class_\">Consumer</span>: (<span class=\"attr\">null</span>: any),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    context.<span class=\"property\">Provider</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_PROVIDER_TYPE</span>,</span><br><span class=\"line\">        <span class=\"attr\">_context</span>: context,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasWarnedAboutUsingNestedContextConsumers = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasWarnedAboutUsingConsumerProvider = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        context.<span class=\"property\">Consumer</span> = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"跟新数据\"><a class=\"markdownIt-Anchor\" href=\"#跟新数据\">#</a> 跟新数据</h2>\n<h3 id=\"updatecontextprovider\"><a class=\"markdownIt-Anchor\" href=\"#updatecontextprovider\">#</a> updateContextProvider</h3>\n<p>处理 fiber 时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// case ContextProvider:</span></span><br><span class=\"line\"><span class=\"comment\">//      return updateContextProvider(current, workInProgress, renderExpirationTime);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateContextProvider</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    current: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    workInProgress: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    renderExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">providerType</span>: <span class=\"title class_\">ReactProviderType</span>&lt;any&gt; = workInProgress.<span class=\"property\">type</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">context</span>: <span class=\"title class_\">ReactContext</span>&lt;any&gt; = providerType.<span class=\"property\">_context</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newProps = workInProgress.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldProps = workInProgress.<span class=\"property\">memoizedProps</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newValue = newProps.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">pushProvider</span>(workInProgress, newValue);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldProps !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> oldValue = oldProps.<span class=\"property\">value</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> changedBits = <span class=\"title function_\">calculateChangedBits</span>(context, newValue, oldValue);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (changedBits === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No change. Bailout early if children are the same.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (oldProps.<span class=\"property\">children</span> === newProps.<span class=\"property\">children</span> &amp;&amp; !<span class=\"title function_\">hasLegacyContextChanged</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">bailoutOnAlreadyFinishedWork</span>(current, workInProgress, renderExpirationTime);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// The context value changed. Search for matching consumers and schedule</span></span><br><span class=\"line\">            <span class=\"comment\">// them to update.</span></span><br><span class=\"line\">            <span class=\"title function_\">propagateContextChange</span>(workInProgress, context, changedBits, renderExpirationTime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newChildren = newProps.<span class=\"property\">children</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reconcileChildren</span>(current, workInProgress, newChildren, renderExpirationTime);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"pushprovider\"><a class=\"markdownIt-Anchor\" href=\"#pushprovider\">#</a> pushProvider</h3>\n<p>context._currentValue = nextValue;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> pushProvider&lt;T&gt;(<span class=\"attr\">providerFiber</span>: <span class=\"title class_\">Fiber</span>, <span class=\"attr\">nextValue</span>: T): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">context</span>: <span class=\"title class_\">ReactContext</span>&lt;T&gt; = providerFiber.<span class=\"property\">type</span>.<span class=\"property\">_context</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPrimaryRenderer) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">push</span>(valueCursor, context.<span class=\"property\">_currentValue</span>, providerFiber);</span><br><span class=\"line\"></span><br><span class=\"line\">        context.<span class=\"property\">_currentValue</span> = nextValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">push</span>(valueCursor, context.<span class=\"property\">_currentValue2</span>, providerFiber);</span><br><span class=\"line\"></span><br><span class=\"line\">        context.<span class=\"property\">_currentValue2</span> = nextValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"propagatecontextchange\"><a class=\"markdownIt-Anchor\" href=\"#propagatecontextchange\">#</a> propagateContextChange</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">propagateContextChange</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    workInProgress: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    context: ReactContext&lt;mixed&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    changedBits: number,</span></span><br><span class=\"line\"><span class=\"params\">    renderExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fiber = workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Set the return pointer of the child to the work-in-progress fiber.</span></span><br><span class=\"line\">        fiber.<span class=\"property\">return</span> = workInProgress;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fiber !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> nextFiber;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Visit this fiber.</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> list = fiber.<span class=\"property\">contextDependencies</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            nextFiber = fiber.<span class=\"property\">child</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> dependency = list.<span class=\"property\">first</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (dependency !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Check if the context matches.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                    dependency.<span class=\"property\">context</span> === context &amp;&amp;</span><br><span class=\"line\">                    (dependency.<span class=\"property\">observedBits</span> &amp; changedBits) !== <span class=\"number\">0</span></span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Match! Schedule an update on this fiber.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ClassComponent</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Schedule a force update on the work-in-progress.</span></span><br><span class=\"line\">                        <span class=\"keyword\">const</span> update = <span class=\"title function_\">createUpdate</span>(renderExpirationTime, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                        update.<span class=\"property\">tag</span> = <span class=\"title class_\">ForceUpdate</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Because we don&#x27;t have a work-in-progress, this will add the</span></span><br><span class=\"line\">                        <span class=\"comment\">// update to the current fiber, too, which means it will persist even if</span></span><br><span class=\"line\">                        <span class=\"comment\">// this render is thrown away. Since it&#x27;s a race condition, not sure it&#x27;s</span></span><br><span class=\"line\">                        <span class=\"comment\">// worth fixing.</span></span><br><span class=\"line\">                        <span class=\"title function_\">enqueueUpdate</span>(fiber, update);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">expirationTime</span> &lt; renderExpirationTime) &#123;</span><br><span class=\"line\">                        fiber.<span class=\"property\">expirationTime</span> = renderExpirationTime;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> alternate = fiber.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (alternate !== <span class=\"literal\">null</span> &amp;&amp; alternate.<span class=\"property\">expirationTime</span> &lt; renderExpirationTime) &#123;</span><br><span class=\"line\">                        alternate.<span class=\"property\">expirationTime</span> = renderExpirationTime;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"title function_\">scheduleWorkOnParentPath</span>(fiber.<span class=\"property\">return</span>, renderExpirationTime);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Mark the expiration time on the list, too.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (list.<span class=\"property\">expirationTime</span> &lt; renderExpirationTime) &#123;</span><br><span class=\"line\">                        list.<span class=\"property\">expirationTime</span> = renderExpirationTime;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Since we already found a match, we can stop traversing the</span></span><br><span class=\"line\">                    <span class=\"comment\">// dependency list.</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                dependency = dependency.<span class=\"property\">next</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">ContextProvider</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Don&#x27;t scan deeper if this is a matching provider</span></span><br><span class=\"line\">            nextFiber = fiber.<span class=\"property\">type</span> === workInProgress.<span class=\"property\">type</span> ? <span class=\"literal\">null</span> : fiber.<span class=\"property\">child</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (enableSuspenseServerRenderer &amp;&amp; fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">DehydratedSuspenseComponent</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If a dehydrated suspense component is in this subtree, we don&#x27;t know</span></span><br><span class=\"line\">            <span class=\"comment\">// if it will have any context consumers in it. The best we can do is</span></span><br><span class=\"line\">            <span class=\"comment\">// mark it as having updates on its children.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fiber.<span class=\"property\">expirationTime</span> &lt; renderExpirationTime) &#123;</span><br><span class=\"line\">                fiber.<span class=\"property\">expirationTime</span> = renderExpirationTime;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> alternate = fiber.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (alternate !== <span class=\"literal\">null</span> &amp;&amp; alternate.<span class=\"property\">expirationTime</span> &lt; renderExpirationTime) &#123;</span><br><span class=\"line\">                alternate.<span class=\"property\">expirationTime</span> = renderExpirationTime;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// This is intentionally passing this fiber as the parent</span></span><br><span class=\"line\">            <span class=\"comment\">// because we want to schedule this fiber as having work</span></span><br><span class=\"line\">            <span class=\"comment\">// on its children. We&#x27;ll use the childExpirationTime on</span></span><br><span class=\"line\">            <span class=\"comment\">// this fiber to indicate that a context has changed.</span></span><br><span class=\"line\">            <span class=\"title function_\">scheduleWorkOnParentPath</span>(fiber, renderExpirationTime);</span><br><span class=\"line\">            nextFiber = fiber.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Traverse down.</span></span><br><span class=\"line\">            nextFiber = fiber.<span class=\"property\">child</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextFiber !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Set the return pointer of the child to the work-in-progress fiber.</span></span><br><span class=\"line\">            nextFiber.<span class=\"property\">return</span> = fiber;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No child. Traverse to next sibling.</span></span><br><span class=\"line\">            nextFiber = fiber;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (nextFiber !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nextFiber === workInProgress) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// We&#x27;re back to the root of this subtree. Exit.</span></span><br><span class=\"line\">                    nextFiber = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> sibling = nextFiber.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sibling !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Set the return pointer of the sibling to the work-in-progress fiber.</span></span><br><span class=\"line\">                    sibling.<span class=\"property\">return</span> = nextFiber.<span class=\"property\">return</span>;</span><br><span class=\"line\">                    nextFiber = sibling;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// No more siblings. Traverse up.</span></span><br><span class=\"line\">                nextFiber = nextFiber.<span class=\"property\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fiber = nextFiber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"读取\"><a class=\"markdownIt-Anchor\" href=\"#读取\">#</a> 读取</h2>\n<p>在 function 组件中</p>\n<h3 id=\"usecontext\"><a class=\"markdownIt-Anchor\" href=\"#usecontext\">#</a> useContext</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> useContext&lt;T&gt;(</span><br><span class=\"line\">    <span class=\"title class_\">Context</span>: <span class=\"title class_\">ReactContext</span>&lt;T&gt;,</span><br><span class=\"line\">    <span class=\"attr\">unstable_observedBits</span>: number | boolean | <span class=\"keyword\">void</span>,</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dispatcher = <span class=\"title function_\">resolveDispatcher</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatcher.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">Context</span>, unstable_observedBits);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>useContext 是只读的，用于获取 context 数据</p>\n<p>在 class 组件中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> contextType === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; contextType !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    context = <span class=\"title function_\">readContext</span>((<span class=\"attr\">contextType</span>: any));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ctor即class定义</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> <span class=\"title function_\">ctor</span>(props, context);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Component</span>(<span class=\"params\">props, context, updater</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">props</span> = props;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">context</span> = context;</span><br><span class=\"line\">    <span class=\"comment\">// If a component has string refs, we will assign a different object later.</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">refs</span> = emptyObject;</span><br><span class=\"line\">    <span class=\"comment\">// We initialize the default updater but the real one gets injected by the</span></span><br><span class=\"line\">    <span class=\"comment\">// renderer.</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">updater</span> = updater || <span class=\"title class_\">ReactNoopUpdateQueue</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"readcontext\"><a class=\"markdownIt-Anchor\" href=\"#readcontext\">#</a> readContext</h3>\n<p>读取  <code>context._currentValue</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> readContext&lt;T&gt;(<span class=\"attr\">context</span>: <span class=\"title class_\">ReactContext</span>&lt;T&gt;, <span class=\"attr\">observedBits</span>: <span class=\"keyword\">void</span> | number | boolean): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastContextWithAllBitsObserved === context) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Nothing to do. We already observe everything in this context.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (observedBits === <span class=\"literal\">false</span> || observedBits === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do not observe any updates.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> resolvedObservedBits; <span class=\"comment\">// Avoid deopting on observable arguments or heterogeneous types.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> observedBits !== <span class=\"string\">&#x27;number&#x27;</span> || observedBits === <span class=\"variable constant_\">MAX_SIGNED_31_BIT_INT</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Observe all updates.</span></span><br><span class=\"line\">            lastContextWithAllBitsObserved = ((<span class=\"attr\">context</span>: any): <span class=\"title class_\">ReactContext</span>&lt;mixed&gt;);</span><br><span class=\"line\">            resolvedObservedBits = <span class=\"variable constant_\">MAX_SIGNED_31_BIT_INT</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolvedObservedBits = observedBits;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> contextItem = &#123;</span><br><span class=\"line\">            <span class=\"attr\">context</span>: ((<span class=\"attr\">context</span>: any): <span class=\"title class_\">ReactContext</span>&lt;mixed&gt;),</span><br><span class=\"line\">            <span class=\"attr\">observedBits</span>: resolvedObservedBits,</span><br><span class=\"line\">            <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastContextDependency === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">                currentlyRenderingFiber !== <span class=\"literal\">null</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Context can only be read while React is rendering. &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;In classes, you can read it in the render method or getDerivedStateFromProps. &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;In function components, you can read it directly in the function body, but not &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;inside Hooks like useReducer() or useMemo().&#x27;</span>,</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// This is the first dependency for this component. Create a new list.</span></span><br><span class=\"line\">            lastContextDependency = contextItem;</span><br><span class=\"line\">            currentlyRenderingFiber.<span class=\"property\">contextDependencies</span> = &#123;</span><br><span class=\"line\">                <span class=\"attr\">first</span>: contextItem,</span><br><span class=\"line\">                <span class=\"attr\">expirationTime</span>: <span class=\"title class_\">NoWork</span>,</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Append a new context item.</span></span><br><span class=\"line\">            lastContextDependency = lastContextDependency.<span class=\"property\">next</span> = contextItem;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isPrimaryRenderer ? context.<span class=\"property\">_currentValue</span> : context.<span class=\"property\">_currentValue2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"contextconsumer\"><a class=\"markdownIt-Anchor\" href=\"#contextconsumer\">#</a> Context.Consumer</h3>\n<p>还是执行 readContext 获取，然后 child (value)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateContextConsumer</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    current: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    workInProgress: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    renderExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">context</span>: <span class=\"title class_\">ReactContext</span>&lt;any&gt; = workInProgress.<span class=\"property\">type</span>;</span><br><span class=\"line\">    <span class=\"comment\">// The logic below for Context differs depending on PROD or DEV mode. In</span></span><br><span class=\"line\">    <span class=\"comment\">// DEV mode, we create a separate object for Context.Consumer that acts</span></span><br><span class=\"line\">    <span class=\"comment\">// like a proxy to Context. This proxy object adds unnecessary code in PROD</span></span><br><span class=\"line\">    <span class=\"comment\">// so we use the old behaviour (Context.Consumer references Context) to</span></span><br><span class=\"line\">    <span class=\"comment\">// reduce size and overhead. The separate object references context via</span></span><br><span class=\"line\">    <span class=\"comment\">// a property called &quot;_context&quot;, which also gives us the ability to check</span></span><br><span class=\"line\">    <span class=\"comment\">// in DEV mode if this property exists or not and warn if it does not.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newProps = workInProgress.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> render = newProps.<span class=\"property\">children</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">prepareToReadContext</span>(workInProgress, renderExpirationTime);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newValue = <span class=\"title function_\">readContext</span>(context, newProps.<span class=\"property\">unstable_observedBits</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newChildren;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentOwner</span>.<span class=\"property\">current</span> = workInProgress;</span><br><span class=\"line\">        <span class=\"title function_\">setCurrentPhase</span>(<span class=\"string\">&#x27;render&#x27;</span>);</span><br><span class=\"line\">        newChildren = <span class=\"title function_\">render</span>(newValue);</span><br><span class=\"line\">        <span class=\"title function_\">setCurrentPhase</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        newChildren = <span class=\"title function_\">render</span>(newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// React DevTools reads this flag.</span></span><br><span class=\"line\">    workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">PerformedWork</span>;</span><br><span class=\"line\">    <span class=\"title function_\">reconcileChildren</span>(current, workInProgress, newChildren, renderExpirationTime);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/10/react/createElement(react%20element)/",
            "url": "http://example.com/2020/09/10/react/createElement(react%20element)/",
            "title": "createElement(react element)",
            "date_published": "2020-09-10T06:00:00.000Z",
            "content_html": "<h3 id=\"createelement\"><a class=\"markdownIt-Anchor\" href=\"#createelement\">#</a> createElement</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create and return a new ReactElement of the given type.</span></span><br><span class=\"line\"><span class=\"comment\"> * See https://reactjs.org/docs/react-api.html#createelement</span></span><br><span class=\"line\"><span class=\"comment\"> * type: 标签类型，如div,p等</span></span><br><span class=\"line\"><span class=\"comment\"> * config[object]: 属性，如className,onClick等，必带__self和__source</span></span><br><span class=\"line\"><span class=\"comment\"> * children:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createElement</span>(<span class=\"params\">type, config, children</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> propName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Reserved names are extracted</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> props = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> key = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ref = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> self = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> source = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (config != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">hasValidRef</span>(config)) &#123;</span><br><span class=\"line\">            ref = config.<span class=\"property\">ref</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">hasValidKey</span>(config)) &#123;</span><br><span class=\"line\">            key = <span class=\"string\">&#x27;&#x27;</span> + config.<span class=\"property\">key</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        self = config.<span class=\"property\">__self</span> === <span class=\"literal\">undefined</span> ? <span class=\"literal\">null</span> : config.<span class=\"property\">__self</span>;</span><br><span class=\"line\">        source = config.<span class=\"property\">__source</span> === <span class=\"literal\">undefined</span> ? <span class=\"literal\">null</span> : config.<span class=\"property\">__source</span>;</span><br><span class=\"line\">        <span class=\"comment\">// Remaining properties are added to a new props object</span></span><br><span class=\"line\">        <span class=\"comment\">// 解析props</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (propName <span class=\"keyword\">in</span> config) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasOwnProperty.<span class=\"title function_\">call</span>(config, propName) &amp;&amp; !<span class=\"variable constant_\">RESERVED_PROPS</span>.<span class=\"title function_\">hasOwnProperty</span>(propName)) &#123;</span><br><span class=\"line\">                props[propName] = config[propName];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Children can be more than one argument, and those are transferred onto</span></span><br><span class=\"line\">    <span class=\"comment\">// the newly allocated props object.</span></span><br><span class=\"line\">    <span class=\"comment\">// 解析children</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> childrenLength = <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> - <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childrenLength === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        props.<span class=\"property\">children</span> = children;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childrenLength &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> childArray = <span class=\"title class_\">Array</span>(childrenLength);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; childrenLength; i++) &#123;</span><br><span class=\"line\">            childArray[i] = <span class=\"variable language_\">arguments</span>[i + <span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        props.<span class=\"property\">children</span> = childArray;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Resolve default props</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type &amp;&amp; type.<span class=\"property\">defaultProps</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> defaultProps = type.<span class=\"property\">defaultProps</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (propName <span class=\"keyword\">in</span> defaultProps) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (props[propName] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">                props[propName] = defaultProps[propName];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key || ref) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> displayName =</span><br><span class=\"line\">                <span class=\"keyword\">typeof</span> type === <span class=\"string\">&#x27;function&#x27;</span> ? type.<span class=\"property\">displayName</span> || type.<span class=\"property\">name</span> || <span class=\"string\">&#x27;Unknown&#x27;</span> : type;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">defineKeyPropWarningGetter</span>(props, displayName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ref) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">defineRefPropWarningGetter</span>(props, displayName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">ReactElement</span>(type, key, ref, self, source, <span class=\"title class_\">ReactCurrentOwner</span>.<span class=\"property\">current</span>, props);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"reactelement\"><a class=\"markdownIt-Anchor\" href=\"#reactelement\">#</a> ReactElement</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Factory method to create a new React element. This no longer adheres to</span></span><br><span class=\"line\"><span class=\"comment\"> * the class pattern, so do not use new to call it. Also, no instanceof check</span></span><br><span class=\"line\"><span class=\"comment\"> * will work. Instead test $$typeof field against Symbol.for(&#x27;react.element&#x27;) to check</span></span><br><span class=\"line\"><span class=\"comment\"> * if something is a React Element.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">type</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">props</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">key</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string|object</span>&#125; <span class=\"variable\">ref</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">owner</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; self A *temporary* helper to detect places where `this` is</span></span><br><span class=\"line\"><span class=\"comment\"> * different from the `owner` when React.createElement is called, so that we</span></span><br><span class=\"line\"><span class=\"comment\"> * can warn. We want to get rid of owner and replace string `ref`s with arrow</span></span><br><span class=\"line\"><span class=\"comment\"> * functions, and as long as `this` and owner are the same, there will be no</span></span><br><span class=\"line\"><span class=\"comment\"> * change in behavior.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; source An annotation object (added by a transpiler or otherwise)</span></span><br><span class=\"line\"><span class=\"comment\"> * indicating filename, line number, and/or other information.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@internal</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ReactElement</span> = <span class=\"keyword\">function</span> (<span class=\"params\">type, key, ref, self, source, owner, props</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> element = &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This tag allows us to uniquely identify this as a React Element</span></span><br><span class=\"line\">        <span class=\"attr\">$$typeof</span>: <span class=\"variable constant_\">REACT_ELEMENT_TYPE</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Built-in properties that belong on the element</span></span><br><span class=\"line\">        <span class=\"attr\">type</span>: type,</span><br><span class=\"line\">        <span class=\"attr\">key</span>: key,</span><br><span class=\"line\">        <span class=\"attr\">ref</span>: ref,</span><br><span class=\"line\">        <span class=\"attr\">props</span>: props,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Record the component responsible for creating this element.</span></span><br><span class=\"line\">        <span class=\"attr\">_owner</span>: owner,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/10/react/createElement(dom)/",
            "url": "http://example.com/2020/09/10/react/createElement(dom)/",
            "title": "createElement(dom)",
            "date_published": "2020-09-10T06:00:00.000Z",
            "content_html": "<h3 id=\"createelement\"><a class=\"markdownIt-Anchor\" href=\"#createelement\">#</a> createElement</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createElement</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    type: string,</span></span><br><span class=\"line\"><span class=\"params\">    props: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"params\">    rootContainerElement: Element | Document,</span></span><br><span class=\"line\"><span class=\"params\">    parentNamespace: string,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Element</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isCustomComponentTag;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We create tags in the namespace of their parent container, except HTML</span></span><br><span class=\"line\">    <span class=\"comment\">// tags get no namespace.</span></span><br><span class=\"line\">    <span class=\"comment\">// 所属节点(应该就是父节点)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">ownerDocument</span>: <span class=\"title class_\">Document</span> = <span class=\"title function_\">getOwnerDocumentFromRootContainer</span>(rootContainerElement);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">domElement</span>: <span class=\"title class_\">Element</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> namespaceURI = parentNamespace;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (namespaceURI === <span class=\"variable constant_\">HTML_NAMESPACE</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// svg/math/html</span></span><br><span class=\"line\">        namespaceURI = <span class=\"title function_\">getIntrinsicNamespace</span>(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// html</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (namespaceURI === <span class=\"variable constant_\">HTML_NAMESPACE</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// script 标签</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;script&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Create the script via .innerHTML so its &quot;parser-inserted&quot; flag is</span></span><br><span class=\"line\">            <span class=\"comment\">// set to true and it does not execute</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> div = ownerDocument.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">            div.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;&lt;script&gt;&lt;&#x27;</span> + <span class=\"string\">&#x27;/script&gt;&#x27;</span>; <span class=\"comment\">// eslint-disable-line</span></span><br><span class=\"line\">            <span class=\"comment\">// This is guaranteed to yield a script element.</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> firstChild = ((div.<span class=\"property\">firstChild</span>: any): <span class=\"title class_\">HTMLScriptElement</span>);</span><br><span class=\"line\">            domElement = div.<span class=\"title function_\">removeChild</span>(firstChild);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> props.<span class=\"property\">is</span> === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// $FlowIssue `createElement` should be updated for Web Components</span></span><br><span class=\"line\">            domElement = ownerDocument.<span class=\"title function_\">createElement</span>(type, &#123;<span class=\"attr\">is</span>: props.<span class=\"property\">is</span>&#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.</span></span><br><span class=\"line\">            <span class=\"comment\">// See discussion in https://github.com/facebook/react/pull/6896</span></span><br><span class=\"line\">            <span class=\"comment\">// and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240</span></span><br><span class=\"line\">            domElement = ownerDocument.<span class=\"title function_\">createElement</span>(type);</span><br><span class=\"line\">            <span class=\"comment\">// Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`</span></span><br><span class=\"line\">            <span class=\"comment\">// attributes on `select`s needs to be added before `option`s are inserted.</span></span><br><span class=\"line\">            <span class=\"comment\">// This prevents:</span></span><br><span class=\"line\">            <span class=\"comment\">// - a bug where the `select` does not scroll to the correct option because singular</span></span><br><span class=\"line\">            <span class=\"comment\">//  `select` elements automatically pick the first item #13222</span></span><br><span class=\"line\">            <span class=\"comment\">// - a bug where the `select` set the first item as selected despite the `size` attribute #14239</span></span><br><span class=\"line\">            <span class=\"comment\">// See https://github.com/facebook/react/issues/13222</span></span><br><span class=\"line\">            <span class=\"comment\">// and https://github.com/facebook/react/issues/14239</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// select标签</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> node = ((<span class=\"attr\">domElement</span>: any): <span class=\"title class_\">HTMLSelectElement</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (props.<span class=\"property\">multiple</span>) &#123;</span><br><span class=\"line\">                    node.<span class=\"property\">multiple</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (props.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Setting a size greater than 1 causes a select to behave like `multiple=true`, where</span></span><br><span class=\"line\">                    <span class=\"comment\">// it is possible that no option is selected.</span></span><br><span class=\"line\">                    <span class=\"comment\">//</span></span><br><span class=\"line\">                    <span class=\"comment\">// This is only necessary when a select in &quot;single selection mode&quot;.</span></span><br><span class=\"line\">                    node.<span class=\"property\">size</span> = props.<span class=\"property\">size</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        domElement = ownerDocument.<span class=\"title function_\">createElementNS</span>(namespaceURI, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> domElement;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/10/react/schedule/",
            "url": "http://example.com/2020/09/10/react/schedule/",
            "title": "reconcileChildFibers",
            "date_published": "2020-09-10T06:00:00.000Z",
            "content_html": "<h3 id=\"schedulework\"><a class=\"markdownIt-Anchor\" href=\"#schedulework\">#</a> scheduleWork</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleUpdateOnFiber</span>(<span class=\"params\">fiber: Fiber, expirationTime: ExpirationTime</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">checkForNestedUpdates</span>(); <span class=\"comment\">// 判断是否超出更新限制 50条，否则报错</span></span><br><span class=\"line\">    <span class=\"comment\">// 根节点：更新了fiber.stateNode的时间，返回fiber.stateNode，即FiberRoot</span></span><br><span class=\"line\">    <span class=\"comment\">// 子节点： 返回根节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = <span class=\"title function_\">markUpdateTimeFromFiberToRoot</span>(fiber, expirationTime);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    root.<span class=\"property\">pingTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回优先级,见常量 ReactPriorityLevel</span></span><br><span class=\"line\">    <span class=\"comment\">// 已知第一次渲染是97，setState是98，useState是98</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span>currentPriorityLevel仅在flushTask李改变，目前还没找到什么时候调用过</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> priorityLevel = <span class=\"title function_\">getCurrentPriorityLevel</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expirationTime === <span class=\"title class_\">Sync</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">            <span class=\"comment\">// Check if we&#x27;re inside unbatchedUpdates 8 &amp; 8 = 8 !== 0</span></span><br><span class=\"line\">            (executionContext &amp; <span class=\"title class_\">LegacyUnbatchedContext</span>) !== <span class=\"title class_\">NoContext</span> &amp;&amp;</span><br><span class=\"line\">            <span class=\"comment\">// Check if we&#x27;re not already rendering 8 &amp; (16 | 32) = 0</span></span><br><span class=\"line\">            (executionContext &amp; (<span class=\"title class_\">RenderContext</span> | <span class=\"title class_\">CommitContext</span>)) === <span class=\"title class_\">NoContext</span></span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is a legacy edge case. The initial mount of a ReactDOM.render-ed</span></span><br><span class=\"line\">            <span class=\"comment\">// root inside of batchedUpdates should be synchronous, but layout updates</span></span><br><span class=\"line\">            <span class=\"comment\">// should be deferred until the end of the batch.</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> callback = <span class=\"title function_\">renderRoot</span>(root, <span class=\"title class_\">Sync</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// 返回commitRoot</span></span><br><span class=\"line\">            <span class=\"comment\">// 前景：react完成了fiber树的构建并已经执行了渲染前的状态合并(getDerivedStateFromProps等生命周期已执行)</span></span><br><span class=\"line\">            <span class=\"comment\">// fiber树里已经构建好了真实的dom节点，放在stateNode里，就差一步插入了</span></span><br><span class=\"line\">            <span class=\"comment\">// debugger</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (callback !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                callback = <span class=\"title function_\">callback</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// setState, useState进这里</span></span><br><span class=\"line\">            <span class=\"title function_\">scheduleCallbackForRoot</span>(root, <span class=\"title class_\">ImmediatePriority</span>, <span class=\"title class_\">Sync</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (executionContext === <span class=\"title class_\">NoContext</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Flush the synchronous work now, wnless we&#x27;re already working or inside</span></span><br><span class=\"line\">                <span class=\"comment\">// a batch. This is intentionally inside scheduleUpdateOnFiber instead of</span></span><br><span class=\"line\">                <span class=\"comment\">// scheduleCallbackForFiber to preserve the ability to schedule a callback</span></span><br><span class=\"line\">                <span class=\"comment\">// without immediately flushing it. We only do this for user-initated</span></span><br><span class=\"line\">                <span class=\"comment\">// updates, to preserve historical behavior of sync mode.</span></span><br><span class=\"line\">                <span class=\"title function_\">flushSyncCallbackQueue</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">scheduleCallbackForRoot</span>(root, priorityLevel, expirationTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        (executionContext &amp; <span class=\"title class_\">DiscreteEventContext</span>) !== <span class=\"title class_\">NoContext</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"comment\">// Only updates at user-blocking priority or greater are considered</span></span><br><span class=\"line\">        <span class=\"comment\">// discrete, even inside a discrete event.</span></span><br><span class=\"line\">        (priorityLevel === <span class=\"title class_\">UserBlockingPriority</span> || priorityLevel === <span class=\"title class_\">ImmediatePriority</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is the result of a discrete event. Track the lowest priority</span></span><br><span class=\"line\">        <span class=\"comment\">// discrete update per root so we can flush them early, if needed.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rootsWithPendingDiscreteUpdates === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            rootsWithPendingDiscreteUpdates = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>([[root, expirationTime]]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> lastDiscreteTime = rootsWithPendingDiscreteUpdates.<span class=\"title function_\">get</span>(root);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastDiscreteTime === <span class=\"literal\">undefined</span> || lastDiscreteTime &gt; expirationTime) &#123;</span><br><span class=\"line\">                rootsWithPendingDiscreteUpdates.<span class=\"title function_\">set</span>(root, expirationTime);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> scheduleWork = scheduleUpdateOnFiber;</span><br></pre></td></tr></table></figure>\n<h3 id=\"markupdatetimefromfibertoroot\"><a class=\"markdownIt-Anchor\" href=\"#markupdatetimefromfibertoroot\">#</a> markUpdateTimeFromFiberToRoot</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">markUpdateTimeFromFiberToRoot</span>(<span class=\"params\">fiber, expirationTime</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Update the source fiber&#x27;s expiration time</span></span><br><span class=\"line\">    <span class=\"comment\">// fiber.expirationTime默认是0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fiber.<span class=\"property\">expirationTime</span> &lt; expirationTime) &#123;</span><br><span class=\"line\">        fiber.<span class=\"property\">expirationTime</span> = expirationTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> alternate = fiber.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (alternate !== <span class=\"literal\">null</span> &amp;&amp; alternate.<span class=\"property\">expirationTime</span> &lt; expirationTime) &#123;</span><br><span class=\"line\">        alternate.<span class=\"property\">expirationTime</span> = expirationTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Walk the parent path to the root and update the child expiration time.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = fiber.<span class=\"property\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> root = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node === <span class=\"literal\">null</span> &amp;&amp; fiber.<span class=\"property\">tag</span> === <span class=\"title class_\">HostRoot</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 3 === 3</span></span><br><span class=\"line\">        root = fiber.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            alternate = node.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 跟新childExpirationTime</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.<span class=\"property\">childExpirationTime</span> &lt; expirationTime) &#123;</span><br><span class=\"line\">                node.<span class=\"property\">childExpirationTime</span> = expirationTime;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (alternate !== <span class=\"literal\">null</span> &amp;&amp; alternate.<span class=\"property\">childExpirationTime</span> &lt; expirationTime) &#123;</span><br><span class=\"line\">                    alternate.<span class=\"property\">childExpirationTime</span> = expirationTime;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (alternate !== <span class=\"literal\">null</span> &amp;&amp; alternate.<span class=\"property\">childExpirationTime</span> &lt; expirationTime) &#123;</span><br><span class=\"line\">                alternate.<span class=\"property\">childExpirationTime</span> = expirationTime;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.<span class=\"property\">return</span> === <span class=\"literal\">null</span> &amp;&amp; node.<span class=\"property\">tag</span> === <span class=\"title class_\">HostRoot</span>) &#123;</span><br><span class=\"line\">                root = node.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.<span class=\"property\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 注释：跟新根节点的firstPendingTime和lastPendingTime</span></span><br><span class=\"line\">        <span class=\"comment\">// Update the first and last pending expiration times in this root</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> firstPendingTime = root.<span class=\"property\">firstPendingTime</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (expirationTime &gt; firstPendingTime) &#123;</span><br><span class=\"line\">            root.<span class=\"property\">firstPendingTime</span> = expirationTime;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> lastPendingTime = root.<span class=\"property\">lastPendingTime</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastPendingTime === <span class=\"title class_\">NoWork</span> || expirationTime &lt; lastPendingTime) &#123;</span><br><span class=\"line\">            root.<span class=\"property\">lastPendingTime</span> = expirationTime;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"schedulecallbackforroot\"><a class=\"markdownIt-Anchor\" href=\"#schedulecallbackforroot\">#</a> scheduleCallbackForRoot</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Use this function, along with runRootCallback, to ensure that only a single</span></span><br><span class=\"line\"><span class=\"comment\">// callback per root is scheduled. It&#x27;s still possible to call renderRoot</span></span><br><span class=\"line\"><span class=\"comment\">// directly, but scheduling via this function helps avoid excessive callbacks.</span></span><br><span class=\"line\"><span class=\"comment\">// It works by storing the callback node and expiration time on the root. When a</span></span><br><span class=\"line\"><span class=\"comment\">// new callback comes in, it compares the expiration time to determine if it</span></span><br><span class=\"line\"><span class=\"comment\">// should cancel the previous one. It also relies on commitRoot scheduling a</span></span><br><span class=\"line\"><span class=\"comment\">// callback to render the next level, because that means we don&#x27;t need a</span></span><br><span class=\"line\"><span class=\"comment\">// separate callback per expiration time.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">scheduleCallbackForRoot</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    root: FiberRoot,</span></span><br><span class=\"line\"><span class=\"params\">    priorityLevel: ReactPriorityLevel,</span></span><br><span class=\"line\"><span class=\"params\">    expirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> existingCallbackExpirationTime = root.<span class=\"property\">callbackExpirationTime</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existingCallbackExpirationTime &lt; expirationTime) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// New callback has higher priority than the existing one.</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> existingCallbackNode = root.<span class=\"property\">callbackNode</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existingCallbackNode !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">cancelCallback</span>(existingCallbackNode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root.<span class=\"property\">callbackExpirationTime</span> = expirationTime;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (expirationTime === <span class=\"title class_\">Sync</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Sync React callbacks are scheduled on a special internal queue</span></span><br><span class=\"line\">            <span class=\"comment\">// 同步的放在一个队列中</span></span><br><span class=\"line\">            root.<span class=\"property\">callbackNode</span> = <span class=\"title function_\">scheduleSyncCallback</span>(</span><br><span class=\"line\">                runRootCallback.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, renderRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, expirationTime)),</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> options = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (expirationTime !== <span class=\"title class_\">Never</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> timeout = <span class=\"title function_\">expirationTimeToMs</span>(expirationTime) - <span class=\"title function_\">now</span>();</span><br><span class=\"line\">                options = &#123;timeout&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            root.<span class=\"property\">callbackNode</span> = <span class=\"title function_\">scheduleCallback</span>(</span><br><span class=\"line\">                priorityLevel,</span><br><span class=\"line\">                runRootCallback.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, renderRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, expirationTime)),</span><br><span class=\"line\">                options,</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                enableUserTimingAPI &amp;&amp;</span><br><span class=\"line\">                expirationTime !== <span class=\"title class_\">Sync</span> &amp;&amp;</span><br><span class=\"line\">                (executionContext &amp; (<span class=\"title class_\">RenderContext</span> | <span class=\"title class_\">CommitContext</span>)) === <span class=\"title class_\">NoContext</span></span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Scheduled an async callback, and we&#x27;re not already working. Add an</span></span><br><span class=\"line\">                <span class=\"comment\">// entry to the flamegraph that shows we&#x27;re waiting for a callback</span></span><br><span class=\"line\">                <span class=\"comment\">// to fire.</span></span><br><span class=\"line\">                <span class=\"title function_\">startRequestCallbackTimer</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Associate the current interactions with this new root+priority.</span></span><br><span class=\"line\">    <span class=\"title function_\">schedulePendingInteractions</span>(root, expirationTime);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"schedulesynccallback\"><a class=\"markdownIt-Anchor\" href=\"#schedulesynccallback\">#</a> scheduleSyncCallback</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">syncQueue</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">SchedulerCallback</span>&gt; | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">scheduleSyncCallback</span>(<span class=\"params\">callback: SchedulerCallback</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Push this callback into an internal queue. We&#x27;ll flush these either in</span></span><br><span class=\"line\">    <span class=\"comment\">// the next tick, or earlier if something calls `flushSyncCallbackQueue`.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (syncQueue === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        syncQueue = [callback];</span><br><span class=\"line\">        <span class=\"comment\">// Flush the queue in the next tick, at the earliest.</span></span><br><span class=\"line\">        immediateQueueCallbackNode = <span class=\"title class_\">Scheduler</span>_scheduleCallback(</span><br><span class=\"line\">            <span class=\"title class_\">Scheduler</span>_ImmediatePriority, <span class=\"comment\">// 立即优先级 1</span></span><br><span class=\"line\">            flushSyncCallbackQueueImpl, <span class=\"comment\">// 回调方法 执行syncQueue里的方法</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Push onto existing queue. Don&#x27;t need to schedule a callback because</span></span><br><span class=\"line\">        <span class=\"comment\">// we already scheduled one when we created the queue.</span></span><br><span class=\"line\">        syncQueue.<span class=\"title function_\">push</span>(callback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fakeCallbackNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"scheduler_schedulecallback\"><a class=\"markdownIt-Anchor\" href=\"#scheduler_schedulecallback\">#</a> Scheduler_scheduleCallback</h3>\n<p>即 <code>unstable_scheduleCallback</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">unstable_scheduleCallback</span>(<span class=\"params\">priorityLevel, callback, options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentTime = <span class=\"title function_\">getCurrentTime</span>(); <span class=\"comment\">// 获取当前时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> startTime;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; options !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> delay = options.<span class=\"property\">delay</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> delay === <span class=\"string\">&#x27;number&#x27;</span> &amp;&amp; delay &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            startTime = currentTime + delay;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            startTime = currentTime;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        timeout =</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> options.<span class=\"property\">timeout</span> === <span class=\"string\">&#x27;number&#x27;</span></span><br><span class=\"line\">                ? options.<span class=\"property\">timeout</span></span><br><span class=\"line\">                : <span class=\"title function_\">timeoutForPriorityLevel</span>(priorityLevel);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        timeout = <span class=\"title function_\">timeoutForPriorityLevel</span>(priorityLevel);</span><br><span class=\"line\">        startTime = currentTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> expirationTime = startTime + timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newTask = &#123;</span><br><span class=\"line\">        callback,</span><br><span class=\"line\">        priorityLevel,</span><br><span class=\"line\">        startTime,</span><br><span class=\"line\">        expirationTime,</span><br><span class=\"line\">        <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">previous</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startTime &gt; currentTime) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is a delayed task.</span></span><br><span class=\"line\">        <span class=\"title function_\">insertDelayedTask</span>(newTask, startTime);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (firstTask === <span class=\"literal\">null</span> &amp;&amp; firstDelayedTask === newTask) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// All tasks are delayed, and this is the task with the earliest delay.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isHostTimeoutScheduled) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Cancel an existing timeout.</span></span><br><span class=\"line\">                <span class=\"title function_\">cancelHostTimeout</span>();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                isHostTimeoutScheduled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Schedule a timeout.</span></span><br><span class=\"line\">            <span class=\"title function_\">requestHostTimeout</span>(handleTimeout, startTime - currentTime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">insertScheduledTask</span>(newTask, expirationTime);</span><br><span class=\"line\">        <span class=\"comment\">// Schedule a host callback, if needed. If we&#x27;re already performing work,</span></span><br><span class=\"line\">        <span class=\"comment\">// wait until the next time we yield.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isHostCallbackScheduled &amp;&amp; !isPerformingWork) &#123;</span><br><span class=\"line\">            isHostCallbackScheduled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"title function_\">requestHostCallback</span>(flushWork);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"timeoutforprioritylevel\"><a class=\"markdownIt-Anchor\" href=\"#timeoutforprioritylevel\">#</a> timeoutForPriorityLevel</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">固定参数见 <span class=\"string\">`常量.md`</span>-&gt;<span class=\"string\">`优先级`</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">timeoutForPriorityLevel</span>(<span class=\"params\">priorityLevel</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (priorityLevel) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">ImmediatePriority</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable constant_\">IMMEDIATE_PRIORITY_TIMEOUT</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">UserBlockingPriority</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable constant_\">USER_BLOCKING_PRIORITY</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">IdlePriority</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable constant_\">IDLE_PRIORITY</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">LowPriority</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable constant_\">LOW_PRIORITY_TIMEOUT</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">NormalPriority</span>:</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable constant_\">NORMAL_PRIORITY_TIMEOUT</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"insertscheduledtask\"><a class=\"markdownIt-Anchor\" href=\"#insertscheduledtask\">#</a> insertScheduledTask</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insertScheduledTask</span>(<span class=\"params\">newTask, expirationTime</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Insert the new task into the list, ordered first by its timeout, then by</span></span><br><span class=\"line\">    <span class=\"comment\">// insertion. So the new task is inserted after any other task the</span></span><br><span class=\"line\">    <span class=\"comment\">// same timeout</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstTask === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 第一个任务</span></span><br><span class=\"line\">        <span class=\"comment\">// This is the first task in the list.</span></span><br><span class=\"line\">        firstTask = newTask.<span class=\"property\">next</span> = newTask.<span class=\"property\">previous</span> = newTask;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> task = firstTask;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (expirationTime &lt; task.<span class=\"property\">expirationTime</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// The new task times out before this one.</span></span><br><span class=\"line\">                next = task;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            task = task.<span class=\"property\">next</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (task !== firstTask);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No task with a later timeout was found, which means the new task has</span></span><br><span class=\"line\">            <span class=\"comment\">// the latest timeout in the list.</span></span><br><span class=\"line\">            next = firstTask;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (next === firstTask) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// The new task has the earliest expiration in the entire list.</span></span><br><span class=\"line\">            firstTask = newTask;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> previous = next.<span class=\"property\">previous</span>;</span><br><span class=\"line\">        previous.<span class=\"property\">next</span> = next.<span class=\"property\">previous</span> = newTask;</span><br><span class=\"line\">        newTask.<span class=\"property\">next</span> = next;</span><br><span class=\"line\">        newTask.<span class=\"property\">previous</span> = previous;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"requesthostcallback\"><a class=\"markdownIt-Anchor\" href=\"#requesthostcallback\">#</a> requestHostCallback</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requestHostCallback = <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (scheduledHostCallback === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        scheduledHostCallback = callback;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isAnimationFrameScheduled) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If rAF didn&#x27;t already schedule one, we need to schedule a frame.</span></span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> If this rAF doesn&#x27;t materialize because the browser throttles,</span></span><br><span class=\"line\">            <span class=\"comment\">// we might want to still have setTimeout trigger rIC as a backup to</span></span><br><span class=\"line\">            <span class=\"comment\">// ensure that we keep performing work.</span></span><br><span class=\"line\">            isAnimationFrameScheduled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"title function_\">requestAnimationFrameWithTimeout</span>(animationTick);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"requestanimationframewithtimeout\"><a class=\"markdownIt-Anchor\" href=\"#requestanimationframewithtimeout\">#</a> requestAnimationFrameWithTimeout</h3>\n<p><code>equestAnimationFrame</code>  在后台时会停止工作，所以需要 <code>localSetTimeout</code>  辅助</p>\n<p>把渲染流程放在了 <code>requestAnimationFrame</code>  或 <code>setTimeOut</code>  里面</p>\n<p><code>requestAnimationFrame</code>  使得在一次同步事件中的所有更改都一起处理</p>\n<p>最后的处理就是 <code>callback</code>  了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// requestAnimationFrame does not run when the tab is in the background. If</span></span><br><span class=\"line\"><span class=\"comment\">// we&#x27;re backgrounded we prefer for that work to happen so that the page</span></span><br><span class=\"line\"><span class=\"comment\">// continues to load in the background. So we also schedule a &#x27;setTimeout&#x27; as</span></span><br><span class=\"line\"><span class=\"comment\">// a fallback.</span></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> Need a better heuristic for backgrounded work.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">ANIMATION_FRAME_TIMEOUT</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> rAFID;</span><br><span class=\"line\"><span class=\"keyword\">let</span> rAFTimeoutID;</span><br><span class=\"line\"><span class=\"keyword\">const</span> requestAnimationFrameWithTimeout = <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// schedule rAF and also a setTimeout</span></span><br><span class=\"line\">    rAFID = <span class=\"title function_\">localRequestAnimationFrame</span>(<span class=\"keyword\">function</span> (<span class=\"params\">timestamp</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// cancel the setTimeout</span></span><br><span class=\"line\">        <span class=\"title function_\">localClearTimeout</span>(rAFTimeoutID);</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(timestamp);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    rAFTimeoutID = <span class=\"title function_\">localSetTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// cancel the requestAnimationFrame</span></span><br><span class=\"line\">        <span class=\"title function_\">localCancelAnimationFrame</span>(rAFID);</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(<span class=\"title function_\">getCurrentTime</span>());</span><br><span class=\"line\">    &#125;, <span class=\"variable constant_\">ANIMATION_FRAME_TIMEOUT</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"animationtick\"><a class=\"markdownIt-Anchor\" href=\"#animationtick\">#</a> animationTick</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> animationTick = <span class=\"keyword\">function</span> (<span class=\"params\">rafTime</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (scheduledHostCallback !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Eagerly schedule the next animation callback at the beginning of the</span></span><br><span class=\"line\">        <span class=\"comment\">// frame. If the scheduler queue is not empty at the end of the frame, it</span></span><br><span class=\"line\">        <span class=\"comment\">// will continue flushing inside that callback. If the queue *is* empty,</span></span><br><span class=\"line\">        <span class=\"comment\">// then it will exit immediately. Posting the callback at the start of the</span></span><br><span class=\"line\">        <span class=\"comment\">// frame ensures it&#x27;s fired within the earliest possible frame. If we</span></span><br><span class=\"line\">        <span class=\"comment\">// waited until the end of the frame to post the callback, we risk the</span></span><br><span class=\"line\">        <span class=\"comment\">// browser skipping a frame and not firing the callback until the frame</span></span><br><span class=\"line\">        <span class=\"comment\">// after that.</span></span><br><span class=\"line\">        <span class=\"title function_\">requestAnimationFrameWithTimeout</span>(animationTick);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// No pending work. Exit.</span></span><br><span class=\"line\">        isAnimationFrameScheduled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextFrameTime = rafTime - frameDeadline + activeFrameTime;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextFrameTime &lt; activeFrameTime &amp;&amp; previousFrameTime &lt; activeFrameTime &amp;&amp; !fpsLocked) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextFrameTime &lt; <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Defensive coding. We don&#x27;t support higher frame rates than 120hz.</span></span><br><span class=\"line\">            <span class=\"comment\">// If the calculated frame time gets lower than 8, it is probably a bug.</span></span><br><span class=\"line\">            nextFrameTime = <span class=\"number\">8</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// If one frame goes long, then the next one can be short to catch up.</span></span><br><span class=\"line\">        <span class=\"comment\">// If two frames are short in a row, then that&#x27;s an indication that we</span></span><br><span class=\"line\">        <span class=\"comment\">// actually have a higher frame rate than what we&#x27;re currently optimizing.</span></span><br><span class=\"line\">        <span class=\"comment\">// We adjust our heuristic dynamically accordingly. For example, if we&#x27;re</span></span><br><span class=\"line\">        <span class=\"comment\">// running on 120hz display or 90hz VR display.</span></span><br><span class=\"line\">        <span class=\"comment\">// Take the max of the two in case one of them was an anomaly due to</span></span><br><span class=\"line\">        <span class=\"comment\">// missed frame deadlines.</span></span><br><span class=\"line\">        activeFrameTime = nextFrameTime &lt; previousFrameTime ? previousFrameTime : nextFrameTime;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        previousFrameTime = nextFrameTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    frameDeadline = rafTime + activeFrameTime;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isMessageEventScheduled) &#123;</span><br><span class=\"line\">        isMessageEventScheduled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        port.<span class=\"title function_\">postMessage</span>(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"flushsynccallbackqueue\"><a class=\"markdownIt-Anchor\" href=\"#flushsynccallbackqueue\">#</a> flushSyncCallbackQueue</h3>\n<p><code>callback</code>  看上方 <code>scheduleCallbackForRoot</code>  里面</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">flushSyncCallbackQueue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (immediateQueueCallbackNode !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Scheduler</span>_cancelCallback(immediateQueueCallbackNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">flushSyncCallbackQueueImpl</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushSyncCallbackQueueImpl</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isFlushingSyncQueue &amp;&amp; syncQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Prevent re-entrancy.</span></span><br><span class=\"line\">        isFlushingSyncQueue = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> isSync = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; i &lt; syncQueue.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> callback = syncQueue[i];</span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    callback = <span class=\"title function_\">callback</span>(isSync);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (callback !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            syncQueue = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If something throws, leave the remaining callbacks on the queue.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (syncQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                syncQueue = syncQueue.<span class=\"title function_\">slice</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Resume flushing in the next tick</span></span><br><span class=\"line\">            <span class=\"title class_\">Scheduler</span>_scheduleCallback(<span class=\"title class_\">Scheduler</span>_ImmediatePriority, flushSyncCallbackQueue);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            isFlushingSyncQueue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"runrootcallback\"><a class=\"markdownIt-Anchor\" href=\"#runrootcallback\">#</a> runRootCallback</h3>\n<p><code>runRootCallback</code>  里面又执行了 <code>renderRoot</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">runRootCallback</span>(<span class=\"params\">root, callback, isSync</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevCallbackNode = root.<span class=\"property\">callbackNode</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> continuation = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        continuation = <span class=\"title function_\">callback</span>(isSync);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (continuation !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> runRootCallback.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, continuation);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If the callback exits without returning a continuation, remove the</span></span><br><span class=\"line\">        <span class=\"comment\">// corresponding callback node from the root. Unless the callback node</span></span><br><span class=\"line\">        <span class=\"comment\">// has changed, which implies that it was already cancelled by a high</span></span><br><span class=\"line\">        <span class=\"comment\">// priority update.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (continuation === <span class=\"literal\">null</span> &amp;&amp; prevCallbackNode === root.<span class=\"property\">callbackNode</span>) &#123;</span><br><span class=\"line\">            root.<span class=\"property\">callbackNode</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            root.<span class=\"property\">callbackExpirationTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"renderroot\"><a class=\"markdownIt-Anchor\" href=\"#renderroot\">#</a> renderRoot</h3>\n<p>见 <span class=\"exturl\" data-url=\"aHR0cDovL3JlbmRlclJvb3QubWQ=\">renderRoot.md</span></p>\n<p>之后就是渲染那一套</p>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/10/react/%E4%BA%8B%E4%BB%B6/",
            "url": "http://example.com/2020/09/10/react/%E4%BA%8B%E4%BB%B6/",
            "title": "事件系统",
            "date_published": "2020-09-10T03:00:00.000Z",
            "content_html": "<p>上接 <code>completeWork.md</code>  搜索  <code>setInitialDOMProperties</code></p>\n<h2 id=\"绑定\"><a class=\"markdownIt-Anchor\" href=\"#绑定\">#</a> 绑定</h2>\n<h3 id=\"setinitialdomproperties\"><a class=\"markdownIt-Anchor\" href=\"#setinitialdomproperties\">#</a> setInitialDOMProperties</h3>\n<p>给 dom 设置属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setInitialDOMProperties</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    tag: string,</span></span><br><span class=\"line\"><span class=\"params\">    domElement: Element,</span></span><br><span class=\"line\"><span class=\"params\">    rootContainerElement: Element | Document,</span></span><br><span class=\"line\"><span class=\"params\">    nextProps: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"params\">    isCustomComponentTag: boolean,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> propKey <span class=\"keyword\">in</span> nextProps) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!nextProps.<span class=\"title function_\">hasOwnProperty</span>(propKey)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nextProp = nextProps[propKey];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propKey === <span class=\"variable constant_\">STYLE</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// style</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nextProp) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Freeze the next style object so that we can assume it won&#x27;t be</span></span><br><span class=\"line\">                    <span class=\"comment\">// mutated. We have already warned for this in the past.</span></span><br><span class=\"line\">                    <span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>(nextProp);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Relies on `updateStylesByID` not mutating `styleUpdates`.</span></span><br><span class=\"line\">            <span class=\"title function_\">setValueForStyles</span>(domElement, nextProp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (propKey === <span class=\"variable constant_\">DANGEROUSLY_SET_INNER_HTML</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// dangerouslySetInnerHTML</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> nextHtml = nextProp ? nextProp[<span class=\"variable constant_\">HTML</span>] : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextHtml != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">setInnerHTML</span>(domElement, nextHtml);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (propKey === <span class=\"variable constant_\">CHILDREN</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// children</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextProp === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Avoid setting initial textContent when the text is empty. In IE11 setting</span></span><br><span class=\"line\">                <span class=\"comment\">// textContent on a &lt;textarea&gt; will cause the placeholder to not</span></span><br><span class=\"line\">                <span class=\"comment\">// show within the &lt;textarea&gt; until it has been focused and blurred again.</span></span><br><span class=\"line\">                <span class=\"comment\">// https://github.com/facebook/react/issues/6731#issuecomment-254874553</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> canSetTextContent = tag !== <span class=\"string\">&#x27;textarea&#x27;</span> || nextProp !== <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (canSetTextContent) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">setTextContent</span>(domElement, nextProp);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> nextProp === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">setTextContent</span>(domElement, <span class=\"string\">&#x27;&#x27;</span> + nextProp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">            propKey === <span class=\"variable constant_\">SUPPRESS_CONTENT_EDITABLE_WARNING</span> ||</span><br><span class=\"line\">            propKey === <span class=\"variable constant_\">SUPPRESS_HYDRATION_WARNING</span></span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Noop</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (propKey === <span class=\"variable constant_\">AUTOFOCUS</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// We polyfill it separately on the client during commit.</span></span><br><span class=\"line\">            <span class=\"comment\">// We could have excluded it in the property list instead of</span></span><br><span class=\"line\">            <span class=\"comment\">// adding a special case here, but then it wouldn&#x27;t be emitted</span></span><br><span class=\"line\">            <span class=\"comment\">// on server rendering (but we *do* want to emit it in SSR).</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (registrationNameModules.<span class=\"title function_\">hasOwnProperty</span>(propKey)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// registrationNameModules包含了所有支持的事件名，如onClick、onChange等</span></span><br><span class=\"line\">            <span class=\"comment\">// 判断是否存在事件绑定</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextProp != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (__DEV__ &amp;&amp; <span class=\"keyword\">typeof</span> nextProp !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">warnForInvalidEventListener</span>(propKey, nextProp);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"title function_\">ensureListeningTo</span>(rootContainerElement, propKey); <span class=\"comment\">// 事件绑定</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nextProp != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">setValueForProperty</span>(domElement, propKey, nextProp, isCustomComponentTag);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ensurelisteningto\"><a class=\"markdownIt-Anchor\" href=\"#ensurelisteningto\">#</a> ensureListeningTo</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ensureListeningTo</span>(<span class=\"params\">rootContainerElement: Element | Node, registrationName: string</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// debugger</span></span><br><span class=\"line\">    <span class=\"comment\">// DOCUMENT的type，顾名思义</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isDocumentOrFragment =</span><br><span class=\"line\">        rootContainerElement.<span class=\"property\">nodeType</span> === <span class=\"variable constant_\">DOCUMENT_NODE</span> ||</span><br><span class=\"line\">        rootContainerElement.<span class=\"property\">nodeType</span> === <span class=\"variable constant_\">DOCUMENT_FRAGMENT_NODE</span>;</span><br><span class=\"line\">    <span class=\"comment\">// doc就是document</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.<span class=\"property\">ownerDocument</span>;</span><br><span class=\"line\">    <span class=\"title function_\">listenTo</span>(registrationName, doc);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"listento\"><a class=\"markdownIt-Anchor\" href=\"#listento\">#</a> listenTo</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * We listen for bubbled touch events on the document object.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Firefox v8.01 (and possibly others) exhibited strange behavior when</span></span><br><span class=\"line\"><span class=\"comment\"> * mounting `onmousemove` events at some node that was not the document</span></span><br><span class=\"line\"><span class=\"comment\"> * element. The symptoms were that if your mouse is not moving over something</span></span><br><span class=\"line\"><span class=\"comment\"> * contained within that mount point (for example on the background) the</span></span><br><span class=\"line\"><span class=\"comment\"> * top-level listeners for `onmousemove` won&#x27;t be called. However, if you</span></span><br><span class=\"line\"><span class=\"comment\"> * register the `mousemove` on the document object, then it will of course</span></span><br><span class=\"line\"><span class=\"comment\"> * catch all `mousemove`s. This along with iOS quirks, justifies restricting</span></span><br><span class=\"line\"><span class=\"comment\"> * top-level listeners to the document object only, at least for these</span></span><br><span class=\"line\"><span class=\"comment\"> * movement types of events and possibly all events.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but</span></span><br><span class=\"line\"><span class=\"comment\"> * they bubble to document.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; registrationName Name of listener (e.g. `onClick`).</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">object</span>&#125; mountAt Container where to mount the listener</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">listenTo</span>(<span class=\"params\">registrationName: string, mountAt: Document | Element | Node</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listeningSet = <span class=\"title function_\">getListeningSetForElement</span>(mountAt);</span><br><span class=\"line\">    <span class=\"comment\">// 获取事件依赖事件，有些事件可能会被多个事件触发，所以要给这些事件也监听</span></span><br><span class=\"line\">    <span class=\"comment\">// 如onChange会被blur、input等等其他事件触发</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> dependencies = registrationNameDependencies[registrationName];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dependencies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> dependency = dependencies[i];</span><br><span class=\"line\">        <span class=\"comment\">// 过滤已存在的相同事件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!listeningSet.<span class=\"title function_\">has</span>(dependency)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 把TOP_去掉在取小写就是他们的值</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (dependency) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"attr\">TOP_SCROLL</span>:</span><br><span class=\"line\">                    <span class=\"title function_\">trapCapturedEvent</span>(<span class=\"variable constant_\">TOP_SCROLL</span>, mountAt);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"attr\">TOP_FOCUS</span>:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"attr\">TOP_BLUR</span>:</span><br><span class=\"line\">                    <span class=\"title function_\">trapCapturedEvent</span>(<span class=\"variable constant_\">TOP_FOCUS</span>, mountAt);</span><br><span class=\"line\">                    <span class=\"title function_\">trapCapturedEvent</span>(<span class=\"variable constant_\">TOP_BLUR</span>, mountAt);</span><br><span class=\"line\">                    <span class=\"comment\">// We set the flag for a single dependency later in this function,</span></span><br><span class=\"line\">                    <span class=\"comment\">// but this ensures we mark both as attached rather than just one.</span></span><br><span class=\"line\">                    listeningSet.<span class=\"title function_\">add</span>(<span class=\"variable constant_\">TOP_BLUR</span>);</span><br><span class=\"line\">                    listeningSet.<span class=\"title function_\">add</span>(<span class=\"variable constant_\">TOP_FOCUS</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"attr\">TOP_CANCEL</span>:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"attr\">TOP_CLOSE</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"title function_\">isEventSupported</span>(<span class=\"title function_\">getRawEventName</span>(dependency))) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">trapCapturedEvent</span>(dependency, mountAt);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"attr\">TOP_INVALID</span>:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"attr\">TOP_SUBMIT</span>:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"attr\">TOP_RESET</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// We listen to them on the target DOM elements.</span></span><br><span class=\"line\">                    <span class=\"comment\">// Some of them bubble so we don&#x27;t want them to fire twice.</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"attr\">default</span>:</span><br><span class=\"line\">                    <span class=\"comment\">// By default, listen on the top level to all non-media events.</span></span><br><span class=\"line\">                    <span class=\"comment\">// Media events don&#x27;t bubble so adding the listener wouldn&#x27;t do anything.</span></span><br><span class=\"line\">                    <span class=\"comment\">// 媒体事件不冒泡</span></span><br><span class=\"line\">                    <span class=\"keyword\">const</span> isMediaEvent = mediaEventTypes.<span class=\"title function_\">indexOf</span>(dependency) !== -<span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!isMediaEvent) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">trapBubbledEvent</span>(dependency, mountAt); <span class=\"comment\">// 添加冒泡事件</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            listeningSet.<span class=\"title function_\">add</span>(dependency);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"getlisteningsetforelement\"><a class=\"markdownIt-Anchor\" href=\"#getlisteningsetforelement\">#</a> getListeningSetForElement</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Summary of `ReactBrowserEventEmitter` event handling:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  - Top-level delegation is used to trap most native browser events. This</span></span><br><span class=\"line\"><span class=\"comment\"> *    may only occur in the main thread and is the responsibility of</span></span><br><span class=\"line\"><span class=\"comment\"> *    ReactDOMEventListener, which is injected and can therefore support</span></span><br><span class=\"line\"><span class=\"comment\"> *    pluggable event sources. This is the only work that occurs in the main</span></span><br><span class=\"line\"><span class=\"comment\"> *    thread.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  - We normalize and de-duplicate events to account for browser quirks. This</span></span><br><span class=\"line\"><span class=\"comment\"> *    may be done in the worker thread.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  - Forward these native events (with the associated top-level type used to</span></span><br><span class=\"line\"><span class=\"comment\"> *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want</span></span><br><span class=\"line\"><span class=\"comment\"> *    to extract any synthetic events.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  - The `EventPluginHub` will then process each event by annotating them with</span></span><br><span class=\"line\"><span class=\"comment\"> *    &quot;dispatches&quot;, a sequence of listeners and IDs that care about that event.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  - The `EventPluginHub` then dispatches the events.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Overview of React and the event system:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * +------------+    .</span></span><br><span class=\"line\"><span class=\"comment\"> * |    DOM     |    .</span></span><br><span class=\"line\"><span class=\"comment\"> * +------------+    .</span></span><br><span class=\"line\"><span class=\"comment\"> *       |           .</span></span><br><span class=\"line\"><span class=\"comment\"> *       v           .</span></span><br><span class=\"line\"><span class=\"comment\"> * +------------+    .</span></span><br><span class=\"line\"><span class=\"comment\"> * | ReactEvent |    .</span></span><br><span class=\"line\"><span class=\"comment\"> * |  Listener  |    .</span></span><br><span class=\"line\"><span class=\"comment\"> * +------------+    .                         +-----------+</span></span><br><span class=\"line\"><span class=\"comment\"> *       |           .               +--------+|SimpleEvent|</span></span><br><span class=\"line\"><span class=\"comment\"> *       |           .               |         |Plugin     |</span></span><br><span class=\"line\"><span class=\"comment\"> * +-----|------+    .               v         +-----------+</span></span><br><span class=\"line\"><span class=\"comment\"> * |     |      |    .    +--------------+                    +------------+</span></span><br><span class=\"line\"><span class=\"comment\"> * |     +-----------.---&gt;|EventPluginHub|                    |    Event   |</span></span><br><span class=\"line\"><span class=\"comment\"> * |            |    .    |              |     +-----------+  | Propagators|</span></span><br><span class=\"line\"><span class=\"comment\"> * | ReactEvent |    .    |              |     |TapEvent   |  |------------|</span></span><br><span class=\"line\"><span class=\"comment\"> * |  Emitter   |    .    |              |&lt;---+|Plugin     |  |other plugin|</span></span><br><span class=\"line\"><span class=\"comment\"> * |            |    .    |              |     +-----------+  |  utilities |</span></span><br><span class=\"line\"><span class=\"comment\"> * |     +-----------.---&gt;|              |                    +------------+</span></span><br><span class=\"line\"><span class=\"comment\"> * |     |      |    .    +--------------+</span></span><br><span class=\"line\"><span class=\"comment\"> * +-----|------+    .                ^        +-----------+</span></span><br><span class=\"line\"><span class=\"comment\"> *       |           .                |        |Enter/Leave|</span></span><br><span class=\"line\"><span class=\"comment\"> *       +           .                +-------+|Plugin     |</span></span><br><span class=\"line\"><span class=\"comment\"> * +-------------+   .                         +-----------+</span></span><br><span class=\"line\"><span class=\"comment\"> * | application |   .</span></span><br><span class=\"line\"><span class=\"comment\"> * |-------------|   .</span></span><br><span class=\"line\"><span class=\"comment\"> * |             |   .</span></span><br><span class=\"line\"><span class=\"comment\"> * |             |   .</span></span><br><span class=\"line\"><span class=\"comment\"> * +-------------+   .</span></span><br><span class=\"line\"><span class=\"comment\"> *                   .</span></span><br><span class=\"line\"><span class=\"comment\"> *    React Core     .  General Purpose Event Plugin System</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">PossiblyWeakMap</span> = <span class=\"keyword\">typeof</span> <span class=\"title class_\">WeakMap</span> === <span class=\"string\">&#x27;function&#x27;</span> ? <span class=\"title class_\">WeakMap</span> : <span class=\"title class_\">Map</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">elementListeningSets</span>:</span><br><span class=\"line\">    | <span class=\"title class_\">WeakMap</span></span><br><span class=\"line\">    | <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">Document</span> | <span class=\"title class_\">Element</span> | <span class=\"title class_\">Node</span>, <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">DOMTopLevelEventType</span> | string&gt;&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">PossiblyWeakMap</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getListeningSetForElement</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    element: Document | Element | Node,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">DOMTopLevelEventType</span> | string&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> listeningSet = elementListeningSets.<span class=\"title function_\">get</span>(element);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (listeningSet === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        listeningSet = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">        elementListeningSets.<span class=\"title function_\">set</span>(element, listeningSet);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> listeningSet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"trapbubbledevent\"><a class=\"markdownIt-Anchor\" href=\"#trapbubbledevent\">#</a> trapBubbledEvent</h3>\n<p>绑定冒泡事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">trapBubbledEvent</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    topLevelType: DOMTopLevelEventType,</span></span><br><span class=\"line\"><span class=\"params\">    element: Document | Element | Node,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">trapEventForPluginEventSystem</span>(element, topLevelType, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"trapeventforplugineventsystem\"><a class=\"markdownIt-Anchor\" href=\"#trapeventforplugineventsystem\">#</a> trapEventForPluginEventSystem</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">trapEventForPluginEventSystem</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    element: Document | Element | Node,</span></span><br><span class=\"line\"><span class=\"params\">    topLevelType: DOMTopLevelEventType,</span></span><br><span class=\"line\"><span class=\"params\">    capture: boolean,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> listener;</span><br><span class=\"line\">    <span class=\"comment\">// 事件优先级</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"title function_\">getEventPriority</span>(topLevelType)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">DiscreteEvent</span>:</span><br><span class=\"line\">            listener = dispatchDiscreteEvent.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, topLevelType, <span class=\"variable constant_\">PLUGIN_EVENT_SYSTEM</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">UserBlockingEvent</span>:</span><br><span class=\"line\">            listener = dispatchUserBlockingUpdate.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, topLevelType, <span class=\"variable constant_\">PLUGIN_EVENT_SYSTEM</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ContinuousEvent</span>:</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            listener = dispatchEvent.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, topLevelType, <span class=\"variable constant_\">PLUGIN_EVENT_SYSTEM</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rawEventName = <span class=\"title function_\">getRawEventName</span>(topLevelType); <span class=\"comment\">// 获取原始事件名称</span></span><br><span class=\"line\">    <span class=\"comment\">// 在document监听事件事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (capture) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">addEventCaptureListener</span>(element, rawEventName, listener);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">addEventBubbleListener</span>(element, rawEventName, listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"触发\"><a class=\"markdownIt-Anchor\" href=\"#触发\">#</a> 触发</h2>\n<p>从 <code>dispatchDiscreteEvent</code>  开始，见上 <code>trapEventForPluginEventSystem</code></p>\n<h3 id=\"dispatchdiscreteevent\"><a class=\"markdownIt-Anchor\" href=\"#dispatchdiscreteevent\">#</a> dispatchDiscreteEvent</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件的执行开始</span></span><br><span class=\"line\"><span class=\"comment\">// dispatchEvent是最终要执行的事件</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dispatchDiscreteEvent</span>(<span class=\"params\">topLevelType, eventSystemFlags, nativeEvent</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">flushDiscreteUpdatesIfNeeded</span>(nativeEvent.<span class=\"property\">timeStamp</span>);</span><br><span class=\"line\">    <span class=\"title function_\">discreteUpdates</span>(dispatchEvent, topLevelType, eventSystemFlags, nativeEvent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"flushdiscreteupdatesifneeded\"><a class=\"markdownIt-Anchor\" href=\"#flushdiscreteupdatesifneeded\">#</a> flushDiscreteUpdatesIfNeeded</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastFlushedEventTimeStamp = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">flushDiscreteUpdatesIfNeeded</span>(<span class=\"params\">timeStamp: number</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// event.timeStamp isn&#x27;t overly reliable due to inconsistencies in</span></span><br><span class=\"line\">    <span class=\"comment\">// how different browsers have historically provided the time stamp.</span></span><br><span class=\"line\">    <span class=\"comment\">// Some browsers provide high-resolution time stamps for all events,</span></span><br><span class=\"line\">    <span class=\"comment\">// some provide low-resoltion time stamps for all events. FF &lt; 52</span></span><br><span class=\"line\">    <span class=\"comment\">// even mixes both time stamps together. Some browsers even report</span></span><br><span class=\"line\">    <span class=\"comment\">// negative time stamps or time stamps that are 0 (iOS9) in some cases.</span></span><br><span class=\"line\">    <span class=\"comment\">// Given we are only comparing two time stamps with equality (!==),</span></span><br><span class=\"line\">    <span class=\"comment\">// we are safe from the resolution differences. If the time stamp is 0</span></span><br><span class=\"line\">    <span class=\"comment\">// we bail-out of preventing the flush, which can affect semantics,</span></span><br><span class=\"line\">    <span class=\"comment\">// such as if an earlier flush removes or adds event listeners that</span></span><br><span class=\"line\">    <span class=\"comment\">// are fired in the subsequent flush. However, this is the same</span></span><br><span class=\"line\">    <span class=\"comment\">// behaviour as we had before this change, so the risks are low.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        !isInsideEventHandler &amp;&amp;</span><br><span class=\"line\">        (!enableEventAPI || timeStamp === <span class=\"number\">0</span> || lastFlushedEventTimeStamp !== timeStamp)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 记录时间戳</span></span><br><span class=\"line\">        lastFlushedEventTimeStamp = timeStamp;</span><br><span class=\"line\">        <span class=\"title function_\">flushDiscreteUpdatesImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"flushdiscreteupdatesimpl\"><a class=\"markdownIt-Anchor\" href=\"#flushdiscreteupdatesimpl\">#</a> flushDiscreteUpdatesImpl</h3>\n<p>flushDiscreteUpdatesImpl 在不同环境下引用不同</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在ReactDom.js直接执行</span></span><br><span class=\"line\"><span class=\"title function_\">setBatchingImplementation</span>(</span><br><span class=\"line\">    batchedUpdates,</span><br><span class=\"line\">    discreteUpdates,</span><br><span class=\"line\">    flushDiscreteUpdates,</span><br><span class=\"line\">    batchedEventUpdates,</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> flushDiscreteUpdatesImpl = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">setBatchingImplementation</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    _batchedUpdatesImpl,</span></span><br><span class=\"line\"><span class=\"params\">    _discreteUpdatesImpl,</span></span><br><span class=\"line\"><span class=\"params\">    _flushDiscreteUpdatesImpl,</span></span><br><span class=\"line\"><span class=\"params\">    _batchedEventUpdatesImpl,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    batchedUpdatesImpl = _batchedUpdatesImpl;</span><br><span class=\"line\">    discreteUpdatesImpl = _discreteUpdatesImpl;</span><br><span class=\"line\">    flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;</span><br><span class=\"line\">    batchedEventUpdatesImpl = _batchedEventUpdatesImpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在浏览器环境就是 <code>flushDiscreteUpdates</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">flushDiscreteUpdates</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Should be able to flush inside batchedUpdates, but not inside `act`.</span></span><br><span class=\"line\">    <span class=\"comment\">// However, `act` uses `batchedUpdates`, so there&#x27;s no way to distinguish</span></span><br><span class=\"line\">    <span class=\"comment\">// those two cases. Need to fix this before exposing flushDiscreteUpdates</span></span><br><span class=\"line\">    <span class=\"comment\">// as a public API.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((executionContext &amp; (<span class=\"title class_\">BatchedContext</span> | <span class=\"title class_\">RenderContext</span> | <span class=\"title class_\">CommitContext</span>)) !== <span class=\"title class_\">NoContext</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We&#x27;re already rendering, so we can&#x27;t synchronously flush pending work.</span></span><br><span class=\"line\">        <span class=\"comment\">// This is probably a nested event dispatch triggered by a lifecycle/effect,</span></span><br><span class=\"line\">        <span class=\"comment\">// like `el.focus()`. Exit.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 刷新待处理？</span></span><br><span class=\"line\">    <span class=\"title function_\">flushPendingDiscreteUpdates</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!revertPassiveEffectsChange) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If the discrete updates scheduled passive effects, flush them now so that</span></span><br><span class=\"line\">        <span class=\"comment\">// they fire before the next serial event.</span></span><br><span class=\"line\">        <span class=\"title function_\">flushPassiveEffects</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"flushpassiveeffects\"><a class=\"markdownIt-Anchor\" href=\"#flushpassiveeffects\">#</a> flushPassiveEffects</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">flushPassiveEffects</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootWithPendingPassiveEffects === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = rootWithPendingPassiveEffects;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> expirationTime = pendingPassiveEffectsExpirationTime;</span><br><span class=\"line\">    rootWithPendingPassiveEffects = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    pendingPassiveEffectsExpirationTime = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">prevInteractions</span>: <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">Interaction</span>&gt; | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enableSchedulerTracing) &#123;</span><br><span class=\"line\">        prevInteractions = __interactionsRef.<span class=\"property\">current</span>;</span><br><span class=\"line\">        __interactionsRef.<span class=\"property\">current</span> = root.<span class=\"property\">memoizedInteractions</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevExecutionContext = executionContext;</span><br><span class=\"line\">    executionContext |= <span class=\"title class_\">CommitContext</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Note: This currently assumes there are no passive effects on the root</span></span><br><span class=\"line\">    <span class=\"comment\">// fiber, because the root is not part of its own effect list. This could</span></span><br><span class=\"line\">    <span class=\"comment\">// change in the future.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> effect = root.<span class=\"property\">current</span>.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (effect !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">commitPassiveHookEffects</span>(effect);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">invariant</span>(effect !== <span class=\"literal\">null</span>, <span class=\"string\">&#x27;Should be working on an effect.&#x27;</span>);</span><br><span class=\"line\">                <span class=\"title function_\">captureCommitPhaseError</span>(effect, error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        effect = effect.<span class=\"property\">nextEffect</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enableSchedulerTracing) &#123;</span><br><span class=\"line\">        __interactionsRef.<span class=\"property\">current</span> = ((<span class=\"attr\">prevInteractions</span>: any): <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">Interaction</span>&gt;);</span><br><span class=\"line\">        <span class=\"title function_\">finishPendingInteractions</span>(root, expirationTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    executionContext = prevExecutionContext;</span><br><span class=\"line\">    <span class=\"title function_\">flushSyncCallbackQueue</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If additional passive effects were scheduled, increment a counter. If this</span></span><br><span class=\"line\">    <span class=\"comment\">// exceeds the limit, we&#x27;ll fire a warning.</span></span><br><span class=\"line\">    nestedPassiveUpdateCount =</span><br><span class=\"line\">        rootWithPendingPassiveEffects === <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : nestedPassiveUpdateCount + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"discreteupdates\"><a class=\"markdownIt-Anchor\" href=\"#discreteupdates\">#</a> discreteUpdates</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">discreteUpdates</span>(<span class=\"params\">fn, a, b, c</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevIsInsideEventHandler = isInsideEventHandler;</span><br><span class=\"line\">    isInsideEventHandler = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">discreteUpdatesImpl</span>(fn, a, b, c);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        isInsideEventHandler = prevIsInsideEventHandler;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isInsideEventHandler) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">finishEventHandler</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"discreteupdatesimpl\"><a class=\"markdownIt-Anchor\" href=\"#discreteupdatesimpl\">#</a> discreteUpdatesImpl</h3>\n<p>即  <code>discreteUpdates</code> ，理由见 <code>flushDiscreteUpdatesImpl</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> discreteUpdates&lt;A, B, C, R&gt;(<span class=\"attr\">fn</span>: <span class=\"function\">(<span class=\"params\">A, B, C</span>) =&gt;</span> R, <span class=\"attr\">a</span>: A, <span class=\"attr\">b</span>: B, <span class=\"attr\">c</span>: C): R &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevExecutionContext = executionContext;</span><br><span class=\"line\">    <span class=\"comment\">// 添加执行content</span></span><br><span class=\"line\">    executionContext |= <span class=\"title class_\">DiscreteEventContext</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Should this</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">runWithPriority</span>(<span class=\"title class_\">UserBlockingPriority</span>, fn.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, a, b, c));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        executionContext = prevExecutionContext;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executionContext === <span class=\"title class_\">NoContext</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Flush the immediate callbacks that were scheduled during this batch</span></span><br><span class=\"line\">            <span class=\"comment\">// 事件结束后运行同步队列</span></span><br><span class=\"line\">            <span class=\"title function_\">flushSyncCallbackQueue</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"runwithpriority\"><a class=\"markdownIt-Anchor\" href=\"#runwithpriority\">#</a> runWithPriority</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> runWithPriority&lt;T&gt;(<span class=\"attr\">reactPriorityLevel</span>: <span class=\"title class_\">ReactPriorityLevel</span>, <span class=\"attr\">fn</span>: <span class=\"function\">() =&gt;</span> T): T &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 转换优先级？ 99 -&gt; 1</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> priorityLevel = <span class=\"title function_\">reactPriorityToSchedulerPriority</span>(reactPriorityLevel);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Scheduler</span>_runWithPriority(priorityLevel, fn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"scheduler_runwithpriority\"><a class=\"markdownIt-Anchor\" href=\"#scheduler_runwithpriority\">#</a> Scheduler_runWithPriority</h3>\n<p>最终执行 <code>eventHandler</code>  即  <code>dispatchEvent</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">unstable_runWithPriority</span>(<span class=\"params\">priorityLevel, eventHandler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (priorityLevel) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ImmediatePriority</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">UserBlockingPriority</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">NormalPriority</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">LowPriority</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">IdlePriority</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            priorityLevel = <span class=\"title class_\">NormalPriority</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> previousPriorityLevel = currentPriorityLevel; <span class=\"comment\">// 3</span></span><br><span class=\"line\">    currentPriorityLevel = priorityLevel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">eventHandler</span>(); <span class=\"comment\">// 运行react事件</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        currentPriorityLevel = previousPriorityLevel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dispatchevent\"><a class=\"markdownIt-Anchor\" href=\"#dispatchevent\">#</a> dispatchEvent</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dispatchEvent</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    topLevelType: DOMTopLevelEventType,</span></span><br><span class=\"line\"><span class=\"params\">    eventSystemFlags: EventSystemFlags,</span></span><br><span class=\"line\"><span class=\"params\">    nativeEvent: AnyNativeEvent,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_enabled) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nativeEventTarget = <span class=\"title function_\">getEventTarget</span>(nativeEvent); <span class=\"comment\">// 获得事件发出的目标dom</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> targetInst = <span class=\"title function_\">getClosestInstanceFromNode</span>(nativeEventTarget); <span class=\"comment\">// 获得dom对应的fiber</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        targetInst !== <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> targetInst.<span class=\"property\">tag</span> === <span class=\"string\">&#x27;number&#x27;</span> &amp;&amp;</span><br><span class=\"line\">        !<span class=\"title function_\">isFiberMounted</span>(targetInst) <span class=\"comment\">// 是否mounted状态？</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If we get an event (ex: img onload) before committing that</span></span><br><span class=\"line\">        <span class=\"comment\">// component&#x27;s mount, ignore it for now (that is, treat it as if it was an</span></span><br><span class=\"line\">        <span class=\"comment\">// event on a non-React tree). We might also consider queueing events and</span></span><br><span class=\"line\">        <span class=\"comment\">// dispatching them after the mount.</span></span><br><span class=\"line\">        targetInst = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enableEventAPI) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">dispatchEventForPluginEventSystem</span>(topLevelType, eventSystemFlags, nativeEvent, targetInst);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dispatcheventforplugineventsystem\"><a class=\"markdownIt-Anchor\" href=\"#dispatcheventforplugineventsystem\">#</a> dispatchEventForPluginEventSystem</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dispatchEventForPluginEventSystem</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    topLevelType: DOMTopLevelEventType,</span></span><br><span class=\"line\"><span class=\"params\">    eventSystemFlags: EventSystemFlags,</span></span><br><span class=\"line\"><span class=\"params\">    nativeEvent: AnyNativeEvent,</span></span><br><span class=\"line\"><span class=\"params\">    targetInst: <span class=\"literal\">null</span> | Fiber,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span>意义不明,先不管</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> bookKeeping = <span class=\"title function_\">getTopLevelCallbackBookKeeping</span>(topLevelType, nativeEvent, targetInst);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Event queue being processed in the same cycle allows</span></span><br><span class=\"line\">        <span class=\"comment\">// `preventDefault`.</span></span><br><span class=\"line\">        <span class=\"title function_\">batchedEventUpdates</span>(handleTopLevel, bookKeeping);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">releaseTopLevelCallbackBookKeeping</span>(bookKeeping);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"batchedeventupdates\"><a class=\"markdownIt-Anchor\" href=\"#batchedeventupdates\">#</a> batchedEventUpdates</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">batchedEventUpdates</span>(<span class=\"params\">fn, bookkeeping</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInsideEventHandler) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If we are currently inside another batch, we need to wait until it</span></span><br><span class=\"line\">        <span class=\"comment\">// fully completes before restoring state.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(bookkeeping);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    isInsideEventHandler = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">batchedEventUpdatesImpl</span>(fn, bookkeeping);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        isInsideEventHandler = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"title function_\">finishEventHandler</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"handletoplevel\"><a class=\"markdownIt-Anchor\" href=\"#handletoplevel\">#</a> handleTopLevel</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleTopLevel</span>(<span class=\"params\">bookKeeping: BookKeepingInstance</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> targetInst = bookKeeping.<span class=\"property\">targetInst</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Loop through the hierarchy, in case there&#x27;s any nested components.</span></span><br><span class=\"line\">    <span class=\"comment\">// It&#x27;s important that we build the array of ancestors before calling any</span></span><br><span class=\"line\">    <span class=\"comment\">// event handlers, because event handlers can modify the DOM, leading to</span></span><br><span class=\"line\">    <span class=\"comment\">// inconsistencies with ReactMount&#x27;s node cache. See #1105.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ancestor = targetInst;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ancestor) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> ancestors = bookKeeping.<span class=\"property\">ancestors</span>;</span><br><span class=\"line\">            ((<span class=\"attr\">ancestors</span>: any): <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>&gt;).<span class=\"title function_\">push</span>(ancestor);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> root = <span class=\"title function_\">findRootContainerNode</span>(ancestor); <span class=\"comment\">// 根据fiber获得fiber根节点的dom div#app</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bookKeeping.<span class=\"property\">ancestors</span>.<span class=\"title function_\">push</span>(ancestor);</span><br><span class=\"line\">        ancestor = <span class=\"title function_\">getClosestInstanceFromNode</span>(root);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (ancestor);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; bookKeeping.<span class=\"property\">ancestors</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        targetInst = bookKeeping.<span class=\"property\">ancestors</span>[i];</span><br><span class=\"line\">        <span class=\"keyword\">const</span> eventTarget = <span class=\"title function_\">getEventTarget</span>(bookKeeping.<span class=\"property\">nativeEvent</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> topLevelType = ((bookKeeping.<span class=\"property\">topLevelType</span>: any): <span class=\"title class_\">DOMTopLevelEventType</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> nativeEvent = ((bookKeeping.<span class=\"property\">nativeEvent</span>: any): <span class=\"title class_\">AnyNativeEvent</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">runExtractedPluginEventsInBatch</span>(topLevelType, targetInst, nativeEvent, eventTarget);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"runextractedplugineventsinbatch\"><a class=\"markdownIt-Anchor\" href=\"#runextractedplugineventsinbatch\">#</a> runExtractedPluginEventsInBatch</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">runExtractedPluginEventsInBatch</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    topLevelType: TopLevelType,</span></span><br><span class=\"line\"><span class=\"params\">    targetInst: <span class=\"literal\">null</span> | Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    nativeEvent: AnyNativeEvent,</span></span><br><span class=\"line\"><span class=\"params\">    nativeEventTarget: EventTarget,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回当前点击event(react event),</span></span><br><span class=\"line\">    <span class=\"comment\">// 添加了_dispatchListeners属性存放事件(包括父节点的)</span></span><br><span class=\"line\">    <span class=\"comment\">// events可能是个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> events = <span class=\"title function_\">extractPluginEvents</span>(topLevelType, targetInst, nativeEvent, nativeEventTarget);</span><br><span class=\"line\">    <span class=\"title function_\">runEventsInBatch</span>(events); <span class=\"comment\">// 运行事件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"extractpluginevents\"><a class=\"markdownIt-Anchor\" href=\"#extractpluginevents\">#</a> extractPluginEvents</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Allows registered plugins an opportunity to extract events from top-level</span></span><br><span class=\"line\"><span class=\"comment\"> * native browser events.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; An accumulation of synthetic events.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@internal</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">extractPluginEvents</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    topLevelType: TopLevelType,</span></span><br><span class=\"line\"><span class=\"params\">    targetInst: <span class=\"literal\">null</span> | Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    nativeEvent: AnyNativeEvent,</span></span><br><span class=\"line\"><span class=\"params\">    nativeEventTarget: EventTarget,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">ReactSyntheticEvent</span>&gt; | <span class=\"title class_\">ReactSyntheticEvent</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> events = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; plugins.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// empty, 一般事件、鼠标事件、onChange、select、输入事件</span></span><br><span class=\"line\">        <span class=\"comment\">// 这些不同的事件可能会同时触发</span></span><br><span class=\"line\">        <span class=\"comment\">// Not every plugin in the ordering may be loaded at runtime.</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">possiblePlugin</span>: <span class=\"title class_\">PluginModule</span>&lt;<span class=\"title class_\">AnyNativeEvent</span>&gt; = plugins[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (possiblePlugin) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 返回react事件的event</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> extractedEvents = possiblePlugin.<span class=\"title function_\">extractEvents</span>(</span><br><span class=\"line\">                topLevelType,</span><br><span class=\"line\">                targetInst,</span><br><span class=\"line\">                nativeEvent,</span><br><span class=\"line\">                nativeEventTarget,</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (extractedEvents) &#123;</span><br><span class=\"line\">                events = <span class=\"title function_\">accumulateInto</span>(events, extractedEvents);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> events;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>possiblePlugin.extractEvents = SimpleEventPlugin.extractEvents</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SimpleEventPlugin</span>: <span class=\"title class_\">PluginModule</span>&lt;<span class=\"title class_\">MouseEvent</span>&gt; &amp; &#123;</span><br><span class=\"line\">    <span class=\"attr\">getEventPriority</span>: <span class=\"function\">(<span class=\"params\">topLevelType: TopLevelType</span>) =&gt;</span> <span class=\"title class_\">EventPriority</span>,</span><br><span class=\"line\">&#125; = &#123;</span><br><span class=\"line\">    <span class=\"attr\">eventTypes</span>: eventTypes,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">getEventPriority</span>(<span class=\"attr\">topLevelType</span>: <span class=\"title class_\">TopLevelType</span>): <span class=\"title class_\">EventPriority</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> config = topLevelEventsToDispatchConfig[topLevelType];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> config !== <span class=\"literal\">undefined</span> ? config.<span class=\"property\">eventPriority</span> : <span class=\"title class_\">ContinuousEvent</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">extractEvents</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        topLevelType: TopLevelType,</span></span><br><span class=\"line\"><span class=\"params\">        targetInst: <span class=\"literal\">null</span> | Fiber,</span></span><br><span class=\"line\"><span class=\"params\">        nativeEvent: MouseEvent,</span></span><br><span class=\"line\"><span class=\"params\">        nativeEventTarget: EventTarget,</span></span><br><span class=\"line\"><span class=\"params\">    </span>): <span class=\"literal\">null</span> | <span class=\"title class_\">ReactSyntheticEvent</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dispatchConfig) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"title class_\">EventConstructor</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (topLevelType) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_KEY_PRESS</span>:</span><br><span class=\"line\">                <span class=\"comment\">// Firefox creates a keypress event for function keys too. This removes</span></span><br><span class=\"line\">                <span class=\"comment\">// the unwanted keypress events. Enter is however both printable and</span></span><br><span class=\"line\">                <span class=\"comment\">// non-printable. One would expect Tab to be as well (but it isn&#x27;t).</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title function_\">getEventCharCode</span>(nativeEvent) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"comment\">/* falls through */</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_KEY_DOWN</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_KEY_UP</span>:</span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticKeyboardEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_BLUR</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_FOCUS</span>:</span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticFocusEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_CLICK</span>:</span><br><span class=\"line\">                <span class=\"comment\">// Firefox creates a click event on right mouse clicks. This removes the</span></span><br><span class=\"line\">                <span class=\"comment\">// unwanted click events.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nativeEvent.<span class=\"property\">button</span> === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"comment\">/* falls through */</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_AUX_CLICK</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_DOUBLE_CLICK</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_MOUSE_DOWN</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_MOUSE_MOVE</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_MOUSE_UP</span>:</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Disabled elements should not respond to mouse events</span></span><br><span class=\"line\">            <span class=\"comment\">/* falls through */</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_MOUSE_OUT</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_MOUSE_OVER</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_CONTEXT_MENU</span>:</span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticMouseEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_DRAG</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_DRAG_END</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_DRAG_ENTER</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_DRAG_EXIT</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_DRAG_LEAVE</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_DRAG_OVER</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_DRAG_START</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_DROP</span>:</span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticDragEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_TOUCH_CANCEL</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_TOUCH_END</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_TOUCH_MOVE</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_TOUCH_START</span>:</span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticTouchEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_ANIMATION_END</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_ANIMATION_ITERATION</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_ANIMATION_START</span>:</span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticAnimationEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_TRANSITION_END</span>:</span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticTransitionEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_SCROLL</span>:</span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticUIEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_WHEEL</span>:</span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticWheelEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_COPY</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_CUT</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_PASTE</span>:</span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticClipboardEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_GOT_POINTER_CAPTURE</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_LOST_POINTER_CAPTURE</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_POINTER_CANCEL</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_POINTER_DOWN</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_POINTER_MOVE</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_POINTER_OUT</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_POINTER_OVER</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">DOMTopLevelEventTypes</span>.<span class=\"property\">TOP_POINTER_UP</span>:</span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticPointerEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"attr\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (knownHTMLTopLevelTypes.<span class=\"title function_\">indexOf</span>(topLevelType) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">warningWithoutStack</span>(</span><br><span class=\"line\">                            <span class=\"literal\">false</span>,</span><br><span class=\"line\">                            <span class=\"string\">&#x27;SimpleEventPlugin: Unhandled event type, `%s`. This warning &#x27;</span> +</span><br><span class=\"line\">                                <span class=\"string\">&#x27;is likely caused by a bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">                            topLevelType,</span><br><span class=\"line\">                        );</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// HTML Events</span></span><br><span class=\"line\">                <span class=\"comment\">// @see http://www.w3.org/TR/html5/index.html#events-0</span></span><br><span class=\"line\">                <span class=\"title class_\">EventConstructor</span> = <span class=\"title class_\">SyntheticEvent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 根据原始event构建react的event</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> event = <span class=\"title class_\">EventConstructor</span>.<span class=\"title function_\">getPooled</span>(</span><br><span class=\"line\">            dispatchConfig,</span><br><span class=\"line\">            targetInst,</span><br><span class=\"line\">            nativeEvent,</span><br><span class=\"line\">            nativeEventTarget,</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">// 先捕获后冒泡</span></span><br><span class=\"line\">        <span class=\"title function_\">accumulateTwoPhaseDispatches</span>(event);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> event;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"accumulatetwophasedispatches\"><a class=\"markdownIt-Anchor\" href=\"#accumulatetwophasedispatches\">#</a> accumulateTwoPhaseDispatches</h3>\n<p>传进去的 <code>event</code>  能拿到对应 <code>fiber</code> ，根据 <code>fiber</code>  能拿到所有的父 <code>fiber</code> ，然后把所有符合的 <code>fiber</code>  放在一个数组中；</p>\n<p>先按捕获的方式从父 -&gt; 子遍历得到是否有 capture 事件，在得到冒泡事件 (特定标签会验证 <code>disabled</code> )</p>\n<p>然后所有合法的事件都放在了 <code>event._dispatchListeners</code>  中 (一个是 function，多个是 [function,function])</p>\n<p>和他们的  <code>fiber</code>  放在 <code>event._dispatchInstances</code>  (一个是 fiber，多个是 [fiber,fiber])</p>\n<p>最后返回了这个 <code>event</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">traverseTwoPhase</span>(<span class=\"params\">inst, fn, arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> path = [];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (inst) &#123;</span><br><span class=\"line\">        path.<span class=\"title function_\">push</span>(inst);</span><br><span class=\"line\">        inst = <span class=\"title function_\">getParent</span>(inst);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = path.<span class=\"property\">length</span>; i-- &gt; <span class=\"number\">0</span>; ) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(path[i], <span class=\"string\">&#x27;captured&#x27;</span>, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; path.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(path[i], <span class=\"string\">&#x27;bubbled&#x27;</span>, arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"runeventsinbatch\"><a class=\"markdownIt-Anchor\" href=\"#runeventsinbatch\">#</a> runEventsInBatch</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">runEventsInBatch</span>(<span class=\"params\">events: <span class=\"built_in\">Array</span>&lt;ReactSyntheticEvent&gt; | ReactSyntheticEvent | <span class=\"literal\">null</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 批量运行事件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (events !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        eventQueue = <span class=\"title function_\">accumulateInto</span>(eventQueue, events);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set `eventQueue` to null before processing it so that we can tell if more</span></span><br><span class=\"line\">    <span class=\"comment\">// events get enqueued while processing.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> processingEventQueue = eventQueue;</span><br><span class=\"line\">    eventQueue = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!processingEventQueue) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// (多个不同事件就循环)执行executeDispatchesAndReleaseTopLevel(processingEventQueue)</span></span><br><span class=\"line\">    <span class=\"title function_\">forEachAccumulated</span>(processingEventQueue, executeDispatchesAndReleaseTopLevel);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This would be a good time to rethrow if any of the event handlers threw.</span></span><br><span class=\"line\">    <span class=\"title function_\">rethrowCaughtError</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"executedispatchesandreleasetoplevel\"><a class=\"markdownIt-Anchor\" href=\"#executedispatchesandreleasetoplevel\">#</a> executeDispatchesAndReleaseTopLevel</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dispatches an event and releases it back into the pool, unless persistent.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">?object</span>&#125; event Synthetic event to be dispatched.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@private</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> executeDispatchesAndRelease = <span class=\"keyword\">function</span> (<span class=\"params\">event: ReactSyntheticEvent</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">executeDispatchesInOrder</span>(event);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!event.<span class=\"title function_\">isPersistent</span>()) &#123;</span><br><span class=\"line\">            event.<span class=\"property\">constructor</span>.<span class=\"title function_\">release</span>(event);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> executeDispatchesAndReleaseTopLevel = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">executeDispatchesAndRelease</span>(e);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"executedispatchesinorder\"><a class=\"markdownIt-Anchor\" href=\"#executedispatchesinorder\">#</a> executeDispatchesInOrder</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Standard/simple iteration through an event&#x27;s collected dispatches.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">executeDispatchesInOrder</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dispatchListeners = event.<span class=\"property\">_dispatchListeners</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dispatchInstances = event.<span class=\"property\">_dispatchInstances</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(dispatchListeners)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dispatchListeners.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (event.<span class=\"title function_\">isPropagationStopped</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Listeners and Instances are two parallel arrays that are always in sync.</span></span><br><span class=\"line\">            <span class=\"title function_\">executeDispatch</span>(event, dispatchListeners[i], dispatchInstances[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dispatchListeners) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">executeDispatch</span>(event, dispatchListeners, dispatchInstances);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 执行完后清空</span></span><br><span class=\"line\">    event.<span class=\"property\">_dispatchListeners</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    event.<span class=\"property\">_dispatchInstances</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"executedispatch\"><a class=\"markdownIt-Anchor\" href=\"#executedispatch\">#</a> executeDispatch</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Dispatch the event to the listener.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">SyntheticEvent</span>&#125; event SyntheticEvent to handle</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; listener Application-level callback</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; inst Internal component instance</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">executeDispatch</span>(<span class=\"params\">event, listener, inst</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = event.<span class=\"property\">type</span> || <span class=\"string\">&#x27;unknown-event&#x27;</span>;</span><br><span class=\"line\">    event.<span class=\"property\">currentTarget</span> = <span class=\"title function_\">getNodeFromInstance</span>(inst);</span><br><span class=\"line\">    <span class=\"comment\">// 这里执行了用户写的事件</span></span><br><span class=\"line\">    <span class=\"title function_\">invokeGuardedCallbackAndCatchFirstError</span>(type, listener, <span class=\"literal\">undefined</span>, event);</span><br><span class=\"line\">    event.<span class=\"property\">currentTarget</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Same as invokeGuardedCallback, but instead of returning an error, it stores</span></span><br><span class=\"line\"><span class=\"comment\"> * it in a global so it can be rethrown by `rethrowCaughtError` later.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">TODO:</span> See if caughtError and rethrowError can be unified.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; name of the guard to use for logging or debugging</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; func The function to invoke</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; context The context to use when calling the function</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">...*</span>&#125; args Arguments for function</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> invokeGuardedCallbackAndCatchFirstError&lt;A, B, C, D, E, F, <span class=\"title class_\">Context</span>&gt;(</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">func</span>: <span class=\"function\">(<span class=\"params\">a: A, b: B, c: C, d: D, e: E, f: F</span>) =&gt;</span> <span class=\"keyword\">void</span>,</span><br><span class=\"line\">    <span class=\"attr\">context</span>: <span class=\"title class_\">Context</span>,</span><br><span class=\"line\">    <span class=\"attr\">a</span>: A,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: B,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: C,</span><br><span class=\"line\">    <span class=\"attr\">d</span>: D,</span><br><span class=\"line\">    <span class=\"attr\">e</span>: E,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: F,</span><br><span class=\"line\">): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    invokeGuardedCallback.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasError) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> error = <span class=\"title function_\">clearCaughtError</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasRethrowError) &#123;</span><br><span class=\"line\">            hasRethrowError = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            rethrowError = error;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Call a function while guarding against errors that happens within it.</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns an error if it throws, otherwise null.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * In production, this is implemented using a try-catch. The reason we don&#x27;t</span></span><br><span class=\"line\"><span class=\"comment\"> * use a try-catch directly is so that we can swap out a different</span></span><br><span class=\"line\"><span class=\"comment\"> * implementation in DEV mode.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; name of the guard to use for logging or debugging</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; func The function to invoke</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; context The context to use when calling the function</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">...*</span>&#125; args Arguments for function</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> invokeGuardedCallback&lt;A, B, C, D, E, F, <span class=\"title class_\">Context</span>&gt;(</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">func</span>: <span class=\"function\">(<span class=\"params\">a: A, b: B, c: C, d: D, e: E, f: F</span>) =&gt;</span> mixed,</span><br><span class=\"line\">    <span class=\"attr\">context</span>: <span class=\"title class_\">Context</span>,</span><br><span class=\"line\">    <span class=\"attr\">a</span>: A,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: B,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: C,</span><br><span class=\"line\">    <span class=\"attr\">d</span>: D,</span><br><span class=\"line\">    <span class=\"attr\">e</span>: E,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: F,</span><br><span class=\"line\">): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    hasError = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    caughtError = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    invokeGuardedCallbackImpl.<span class=\"title function_\">apply</span>(reporter, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> invokeGuardedCallbackImpl = <span class=\"keyword\">function</span> &lt;A, B, C, D, E, F, <span class=\"title class_\">Context</span>&gt;(</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">func</span>: <span class=\"function\">(<span class=\"params\">a: A, b: B, c: C, d: D, e: E, f: F</span>) =&gt;</span> mixed,</span><br><span class=\"line\">    <span class=\"attr\">context</span>: <span class=\"title class_\">Context</span>,</span><br><span class=\"line\">    <span class=\"attr\">a</span>: A,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: B,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: C,</span><br><span class=\"line\">    <span class=\"attr\">d</span>: D,</span><br><span class=\"line\">    <span class=\"attr\">e</span>: E,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: F,</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> funcArgs = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// func就是用户写的方法</span></span><br><span class=\"line\">        func.<span class=\"title function_\">apply</span>(context, funcArgs);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">onError</span>(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>运行完后就是各种变量的释放和运行参数的重置或回归，然后执行同步队列</p>\n<p>见  <code>schedule.md</code>  -&gt;  <code>flushSyncCallbackQueue</code></p>\n<p>根据跟新重新构建 <code>fiber</code> , 然后渲染 ( <code>renderRoot</code> -&gt; <code>commitRoot</code> )</p>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/09/react/function%E7%BB%84%E4%BB%B6/",
            "url": "http://example.com/2020/09/09/react/function%E7%BB%84%E4%BB%B6/",
            "title": "function组件",
            "date_published": "2020-09-09T06:00:00.000Z",
            "content_html": "<h3 id=\"从-beginwork-开始\"><a class=\"markdownIt-Anchor\" href=\"#从-beginwork-开始\">#</a> 从 beginWork 开始</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (workInProgress.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">IndeterminateComponent</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2 function类型组件是这个tag</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">mountIndeterminateComponent</span>(</span><br><span class=\"line\">            current,</span><br><span class=\"line\">            workInProgress,</span><br><span class=\"line\">            workInProgress.<span class=\"property\">type</span>,</span><br><span class=\"line\">            renderExpirationTime,</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mountindeterminatecomponent\"><a class=\"markdownIt-Anchor\" href=\"#mountindeterminatecomponent\">#</a> mountIndeterminateComponent</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountIndeterminateComponent</span>(<span class=\"params\">_current, workInProgress, Component, renderExpirationTime</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// An indeterminate component only mounts if it suspended inside a non-</span></span><br><span class=\"line\">        <span class=\"comment\">// concurrent tree, in an inconsistent state. We want to treat it like</span></span><br><span class=\"line\">        <span class=\"comment\">// a new mount, even though an empty version of it already committed.</span></span><br><span class=\"line\">        <span class=\"comment\">// Disconnect the alternate pointers.</span></span><br><span class=\"line\">        _current.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// Since this is conceptually a new fiber, schedule a Placement effect</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">Placement</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> props = workInProgress.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> unmaskedContext = <span class=\"title function_\">getUnmaskedContext</span>(workInProgress, <span class=\"title class_\">Component</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"title function_\">getMaskedContext</span>(workInProgress, unmaskedContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">prepareToReadContext</span>(workInProgress, renderExpirationTime);</span><br><span class=\"line\">    <span class=\"comment\">// 以上都是和contetxt有关的处理</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        value = <span class=\"title function_\">renderWithHooks</span>(</span><br><span class=\"line\">            <span class=\"comment\">// 返回reactnode对象</span></span><br><span class=\"line\">            <span class=\"literal\">null</span>,</span><br><span class=\"line\">            workInProgress,</span><br><span class=\"line\">            <span class=\"title class_\">Component</span>,</span><br><span class=\"line\">            props,</span><br><span class=\"line\">            context,</span><br><span class=\"line\">            renderExpirationTime,</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// React DevTools reads this flag.</span></span><br><span class=\"line\">    workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">PerformedWork</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// class 或 function组件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp;</span><br><span class=\"line\">        value !== <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> value.<span class=\"property\">render</span> === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class=\"line\">        value.<span class=\"property\">$$typeof</span> === <span class=\"literal\">undefined</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Proceed under the assumption that this is a class instance</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">tag</span> = <span class=\"title class_\">ClassComponent</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Throw out any hooks that were used.</span></span><br><span class=\"line\">        <span class=\"title function_\">resetHooks</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Push context providers early to prevent context stack mismatches.</span></span><br><span class=\"line\">        <span class=\"comment\">// During mounting we don&#x27;t know the child context yet as the instance doesn&#x27;t exist.</span></span><br><span class=\"line\">        <span class=\"comment\">// We will invalidate the child context in finishClassComponent() right after rendering.</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> hasContext = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isLegacyContextProvider</span>(<span class=\"title class_\">Component</span>)) &#123;</span><br><span class=\"line\">            hasContext = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"title function_\">pushLegacyContextProvider</span>(workInProgress);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            hasContext = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        workInProgress.<span class=\"property\">memoizedState</span> =</span><br><span class=\"line\">            value.<span class=\"property\">state</span> !== <span class=\"literal\">null</span> &amp;&amp; value.<span class=\"property\">state</span> !== <span class=\"literal\">undefined</span> ? value.<span class=\"property\">state</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> getDerivedStateFromProps = <span class=\"title class_\">Component</span>.<span class=\"property\">getDerivedStateFromProps</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> getDerivedStateFromProps === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">applyDerivedStateFromProps</span>(workInProgress, <span class=\"title class_\">Component</span>, getDerivedStateFromProps, props);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">adoptClassInstance</span>(workInProgress, value);</span><br><span class=\"line\">        <span class=\"title function_\">mountClassInstance</span>(workInProgress, <span class=\"title class_\">Component</span>, props, renderExpirationTime);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">finishClassComponent</span>(</span><br><span class=\"line\">            <span class=\"literal\">null</span>,</span><br><span class=\"line\">            workInProgress,</span><br><span class=\"line\">            <span class=\"title class_\">Component</span>,</span><br><span class=\"line\">            <span class=\"literal\">true</span>,</span><br><span class=\"line\">            hasContext,</span><br><span class=\"line\">            renderExpirationTime,</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Proceed under the assumption that this is a function component</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">tag</span> = <span class=\"title class_\">FunctionComponent</span>;</span><br><span class=\"line\">        <span class=\"title function_\">reconcileChildren</span>(<span class=\"literal\">null</span>, workInProgress, value, renderExpirationTime);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"renderwithhooks\"><a class=\"markdownIt-Anchor\" href=\"#renderwithhooks\">#</a> renderWithHooks</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">renderWithHooks</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    current: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    workInProgress: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    Component: any,</span></span><br><span class=\"line\"><span class=\"params\">    props: any,</span></span><br><span class=\"line\"><span class=\"params\">    refOrContext: any,</span></span><br><span class=\"line\"><span class=\"params\">    nextRenderExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>): any &#123;</span><br><span class=\"line\">    renderExpirationTime = nextRenderExpirationTime;</span><br><span class=\"line\">    currentlyRenderingFiber = workInProgress;</span><br><span class=\"line\">    nextCurrentHook = current !== <span class=\"literal\">null</span> ? current.<span class=\"property\">memoizedState</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The following should have already been reset</span></span><br><span class=\"line\">    <span class=\"comment\">// currentHook = null;</span></span><br><span class=\"line\">    <span class=\"comment\">// workInProgressHook = null;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// remainingExpirationTime = NoWork;</span></span><br><span class=\"line\">    <span class=\"comment\">// componentUpdateQueue = null;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// didScheduleRenderPhaseUpdate = false;</span></span><br><span class=\"line\">    <span class=\"comment\">// renderPhaseUpdates = null;</span></span><br><span class=\"line\">    <span class=\"comment\">// numberOfReRenders = 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// sideEffectTag = 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// TODO Warn if no hooks are used at all during mount, then some are used during update.</span></span><br><span class=\"line\">    <span class=\"comment\">// Currently we will identify the update render as a mount because nextCurrentHook === null.</span></span><br><span class=\"line\">    <span class=\"comment\">// This is tricky because it&#x27;s valid for certain types of components (e.g. React.lazy)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.</span></span><br><span class=\"line\">    <span class=\"comment\">// Non-stateful hooks (e.g. context) don&#x27;t get added to memoizedState,</span></span><br><span class=\"line\">    <span class=\"comment\">// so nextCurrentHook would be null during updates and mounts.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> =</span><br><span class=\"line\">            nextCurrentHook === <span class=\"literal\">null</span> ? <span class=\"title class_\">HooksDispatcherOnMount</span> : <span class=\"title class_\">HooksDispatcherOnUpdate</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行函数，得到children</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> children = <span class=\"title class_\">Component</span>(props, refOrContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (didScheduleRenderPhaseUpdate) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            didScheduleRenderPhaseUpdate = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            numberOfReRenders += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Start over from the beginning of the list</span></span><br><span class=\"line\">            nextCurrentHook = current !== <span class=\"literal\">null</span> ? current.<span class=\"property\">memoizedState</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\">            nextWorkInProgressHook = firstWorkInProgressHook;</span><br><span class=\"line\"></span><br><span class=\"line\">            currentHook = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            workInProgressHook = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            componentUpdateQueue = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Also validate hook order for cascading updates.</span></span><br><span class=\"line\">                hookTypesUpdateIndexDev = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = __DEV__</span><br><span class=\"line\">                ? <span class=\"title class_\">HooksDispatcherOnUpdateInDEV</span></span><br><span class=\"line\">                : <span class=\"title class_\">HooksDispatcherOnUpdate</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            children = <span class=\"title class_\">Component</span>(props, refOrContext);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (didScheduleRenderPhaseUpdate);</span><br><span class=\"line\"></span><br><span class=\"line\">        renderPhaseUpdates = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        numberOfReRenders = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We can assume the previous dispatcher is always this one, since we set it</span></span><br><span class=\"line\">    <span class=\"comment\">// at the beginning of the render phase and there&#x27;s no re-entrancy.</span></span><br><span class=\"line\">    <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = <span class=\"title class_\">ContextOnlyDispatcher</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">renderedWork</span>: <span class=\"title class_\">Fiber</span> = (<span class=\"attr\">currentlyRenderingFiber</span>: any);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存放了所有用到的hooks，能用next找到下一个</span></span><br><span class=\"line\">    renderedWork.<span class=\"property\">memoizedState</span> = firstWorkInProgressHook;</span><br><span class=\"line\">    renderedWork.<span class=\"property\">expirationTime</span> = remainingExpirationTime;</span><br><span class=\"line\">    renderedWork.<span class=\"property\">updateQueue</span> = (<span class=\"attr\">componentUpdateQueue</span>: any);</span><br><span class=\"line\">    renderedWork.<span class=\"property\">effectTag</span> |= sideEffectTag;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This check uses currentHook so that it works the same in DEV and prod bundles.</span></span><br><span class=\"line\">    <span class=\"comment\">// hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> didRenderTooFewHooks = currentHook !== <span class=\"literal\">null</span> &amp;&amp; currentHook.<span class=\"property\">next</span> !== <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    renderExpirationTime = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\">    currentlyRenderingFiber = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    currentHook = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    nextCurrentHook = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    firstWorkInProgressHook = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    workInProgressHook = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    nextWorkInProgressHook = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    remainingExpirationTime = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\">    componentUpdateQueue = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    sideEffectTag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// These were reset above</span></span><br><span class=\"line\">    <span class=\"comment\">// didScheduleRenderPhaseUpdate = false;</span></span><br><span class=\"line\">    <span class=\"comment\">// renderPhaseUpdates = null;</span></span><br><span class=\"line\">    <span class=\"comment\">// numberOfReRenders = 0;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">        !didRenderTooFewHooks,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Rendered fewer hooks than expected. This may be caused by an accidental &#x27;</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;early return statement.&#x27;</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> children;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/09/react/reconcileChildFibers/",
            "url": "http://example.com/2020/09/09/react/reconcileChildFibers/",
            "title": "reconcileChildFibers",
            "date_published": "2020-09-09T06:00:00.000Z",
            "content_html": "<p>根据实例构建 fiber</p>\n<h3 id=\"reconcilechildfibers\"><a class=\"markdownIt-Anchor\" href=\"#reconcilechildfibers\">#</a> reconcileChildFibers</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildFibers</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    returnFiber: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    currentFirstChild: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    newChild: any,</span></span><br><span class=\"line\"><span class=\"params\">    expirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This function is not recursive.</span></span><br><span class=\"line\">    <span class=\"comment\">// If the top level item is an array, we treat it as a set of children,</span></span><br><span class=\"line\">    <span class=\"comment\">// not as a fragment. Nested arrays on the other hand will be treated as</span></span><br><span class=\"line\">    <span class=\"comment\">// fragment nodes. Recursion happens at the normal flow.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Handle top level unkeyed fragments as if they were arrays.</span></span><br><span class=\"line\">    <span class=\"comment\">// This leads to an ambiguity between &lt;&gt;&#123;[...]&#125;&lt;/&gt; and &lt;&gt;...&lt;/&gt;.</span></span><br><span class=\"line\">    <span class=\"comment\">// We treat the ambiguous cases above the same.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isUnkeyedTopLevelFragment = <span class=\"comment\">// 是否fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp;</span><br><span class=\"line\">        newChild !== <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">        newChild.<span class=\"property\">type</span> === <span class=\"variable constant_\">REACT_FRAGMENT_TYPE</span> &amp;&amp;</span><br><span class=\"line\">        newChild.<span class=\"property\">key</span> === <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUnkeyedTopLevelFragment) &#123;</span><br><span class=\"line\">        newChild = newChild.<span class=\"property\">props</span>.<span class=\"property\">children</span>; <span class=\"comment\">// 如果是fragment取他的子节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Handle object types</span></span><br><span class=\"line\">    <span class=\"comment\">// newChild可能是一个children</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isObject = <span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; newChild !== <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (</span><br><span class=\"line\">            newChild.<span class=\"property\">$$typeof</span> <span class=\"comment\">// 子节点是单一的</span></span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"attr\">REACT_ELEMENT_TYPE</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">placeSingleChild</span>(</span><br><span class=\"line\">                    <span class=\"title function_\">reconcileSingleElement</span>(</span><br><span class=\"line\">                        returnFiber,</span><br><span class=\"line\">                        currentFirstChild,</span><br><span class=\"line\">                        newChild,</span><br><span class=\"line\">                        expirationTime,</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                );</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"attr\">REACT_PORTAL_TYPE</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">placeSingleChild</span>(</span><br><span class=\"line\">                    <span class=\"title function_\">reconcileSinglePortal</span>(returnFiber, currentFirstChild, newChild, expirationTime),</span><br><span class=\"line\">                );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;string&#x27;</span> || <span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">placeSingleChild</span>(</span><br><span class=\"line\">            <span class=\"title function_\">reconcileSingleTextNode</span>(returnFiber, currentFirstChild, <span class=\"string\">&#x27;&#x27;</span> + newChild, expirationTime),</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isArray</span>(newChild)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// newChild是数组，多个子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reconcileChildrenArray</span>(returnFiber, currentFirstChild, newChild, expirationTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">getIteratorFn</span>(newChild)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reconcileChildrenIterator</span>(returnFiber, currentFirstChild, newChild, expirationTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isObject) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">throwOnInvalidObjectType</span>(returnFiber, newChild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; !isUnkeyedTopLevelFragment) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If the new child is undefined, and the return fiber is a composite</span></span><br><span class=\"line\">        <span class=\"comment\">// component, throw an error. If Fiber return types are disabled,</span></span><br><span class=\"line\">        <span class=\"comment\">// we already threw above.</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (returnFiber.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">ClassComponent</span>: &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Intentionally fall through to the next case, which handles both</span></span><br><span class=\"line\">            <span class=\"comment\">// functions and classes</span></span><br><span class=\"line\">            <span class=\"comment\">// eslint-disable-next-lined no-fallthrough</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">FunctionComponent</span>: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"title class_\">Component</span> = returnFiber.<span class=\"property\">type</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Remaining cases are all treated as empty.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">deleteRemainingChildren</span>(returnFiber, currentFirstChild);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"reconcilechildrenarray\"><a class=\"markdownIt-Anchor\" href=\"#reconcilechildrenarray\">#</a> reconcileChildrenArray</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildrenArray</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    returnFiber: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    currentFirstChild: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    newChildren: <span class=\"built_in\">Array</span>&lt;*&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    expirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This algorithm can&#x27;t optimize by searching from both ends since we</span></span><br><span class=\"line\">    <span class=\"comment\">// don&#x27;t have backpointers on fibers. I&#x27;m trying to see how far we can get</span></span><br><span class=\"line\">    <span class=\"comment\">// with that model. If it ends up not being worth the tradeoffs, we can</span></span><br><span class=\"line\">    <span class=\"comment\">// add it later.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Even with a two ended optimization, we&#x27;d want to optimize for the case</span></span><br><span class=\"line\">    <span class=\"comment\">// where there are few changes and brute force the comparison instead of</span></span><br><span class=\"line\">    <span class=\"comment\">// going for the Map. It&#x27;d like to explore hitting that path first in</span></span><br><span class=\"line\">    <span class=\"comment\">// forward-only mode and only go for the Map once we notice that we need</span></span><br><span class=\"line\">    <span class=\"comment\">// lots of look ahead. This doesn&#x27;t handle reversal as well as two ended</span></span><br><span class=\"line\">    <span class=\"comment\">// search but that&#x27;s unusual. Besides, for the two ended optimization to</span></span><br><span class=\"line\">    <span class=\"comment\">// work on Iterables, we&#x27;d need to copy the whole set.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// In this first iteration, we&#x27;ll just live with hitting the bad case</span></span><br><span class=\"line\">    <span class=\"comment\">// (adding everything to a Map) in for every insert/move.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If you change this code, also update reconcileChildrenIterator() which</span></span><br><span class=\"line\">    <span class=\"comment\">// uses the same algorithm.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">resultingFirstChild</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">previousNewFiber</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldFiber = currentFirstChild;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lastPlacedIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextOldFiber = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// debugger</span></span><br><span class=\"line\">    <span class=\"comment\">// 第一轮遍历条件：存在原先的子节点且未遍历完需要更新的子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; oldFiber !== <span class=\"literal\">null</span> &amp;&amp; newIdx &lt; newChildren.<span class=\"property\">length</span>; newIdx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldFiber.<span class=\"property\">index</span> &gt; newIdx) &#123;</span><br><span class=\"line\">            nextOldFiber = oldFiber;</span><br><span class=\"line\">            oldFiber = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            nextOldFiber = oldFiber.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newFiber = <span class=\"title function_\">updateSlot</span>(</span><br><span class=\"line\">            <span class=\"comment\">// 老的和新的没对应上返回null</span></span><br><span class=\"line\">            returnFiber,</span><br><span class=\"line\">            oldFiber,</span><br><span class=\"line\">            newChildren[newIdx],</span><br><span class=\"line\">            expirationTime,</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 走出循环</span></span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> This breaks on empty slots like null children. That&#x27;s</span></span><br><span class=\"line\">            <span class=\"comment\">// unfortunate because it triggers the slow path all the time. We need</span></span><br><span class=\"line\">            <span class=\"comment\">// a better way to communicate whether this was a miss or null,</span></span><br><span class=\"line\">            <span class=\"comment\">// boolean, undefined, etc.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (oldFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                oldFiber = nextOldFiber;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldTrackSideEffects) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (oldFiber &amp;&amp; newFiber.<span class=\"property\">alternate</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 没有复用，删除老的</span></span><br><span class=\"line\">                <span class=\"comment\">// We matched the slot, but we didn&#x27;t reuse the existing fiber, so we</span></span><br><span class=\"line\">                <span class=\"comment\">// need to delete the existing child.</span></span><br><span class=\"line\">                <span class=\"title function_\">deleteChild</span>(returnFiber, oldFiber);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lastPlacedIndex = <span class=\"title function_\">placeChild</span>(newFiber, lastPlacedIndex, newIdx);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (previousNewFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move out of the loop. This only happens for the first run.</span></span><br><span class=\"line\">            resultingFirstChild = newFiber;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Defer siblings if we&#x27;re not at the right index for this slot.</span></span><br><span class=\"line\">            <span class=\"comment\">// I.e. if we had null values before, then we want to defer this</span></span><br><span class=\"line\">            <span class=\"comment\">// for each null value. However, we also don&#x27;t want to call updateSlot</span></span><br><span class=\"line\">            <span class=\"comment\">// with the previous one.</span></span><br><span class=\"line\">            previousNewFiber.<span class=\"property\">sibling</span> = newFiber;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        previousNewFiber = newFiber;</span><br><span class=\"line\">        oldFiber = nextOldFiber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newIdx === newChildren.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新节点已被遍历完全，删除剩下的节点（如果有），然后退出</span></span><br><span class=\"line\">        <span class=\"comment\">// We&#x27;ve reached the end of the new children. We can delete the rest.</span></span><br><span class=\"line\">        <span class=\"title function_\">deleteRemainingChildren</span>(returnFiber, oldFiber);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultingFirstChild;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没有oldFiber，全部插入</span></span><br><span class=\"line\">        <span class=\"comment\">// If we don&#x27;t have any more existing children we can choose a fast path</span></span><br><span class=\"line\">        <span class=\"comment\">// since the rest will all be insertions.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; newIdx &lt; newChildren.<span class=\"property\">length</span>; newIdx++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> newFiber = <span class=\"title function_\">createChild</span>(returnFiber, newChildren[newIdx], expirationTime); <span class=\"comment\">// 更具element创建fiber</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lastPlacedIndex = <span class=\"title function_\">placeChild</span>(newFiber, lastPlacedIndex, newIdx);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (previousNewFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move out of the loop. This only happens for the first run.</span></span><br><span class=\"line\">                resultingFirstChild = newFiber;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                previousNewFiber.<span class=\"property\">sibling</span> = newFiber; <span class=\"comment\">// 建立兄弟节点，单向sibling</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            previousNewFiber = newFiber; <span class=\"comment\">// 记录上一个</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultingFirstChild;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add all children to a key map for quick lookups.</span></span><br><span class=\"line\">    <span class=\"comment\">// 把老的fiber以key或index转为map 1 =&gt; one fiber ...</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> existingChildren = <span class=\"title function_\">mapRemainingChildren</span>(returnFiber, oldFiber);</span><br><span class=\"line\">    <span class=\"comment\">// Keep scanning and use the map to restore deleted items as moves.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; newIdx &lt; newChildren.<span class=\"property\">length</span>; newIdx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newFiber = <span class=\"title function_\">updateFromMap</span>(</span><br><span class=\"line\">            existingChildren,</span><br><span class=\"line\">            returnFiber,</span><br><span class=\"line\">            newIdx,</span><br><span class=\"line\">            newChildren[newIdx],</span><br><span class=\"line\">            expirationTime,</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newFiber !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldTrackSideEffects) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (newFiber.<span class=\"property\">alternate</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// The new fiber is a work in progress, but if there exists a</span></span><br><span class=\"line\">                    <span class=\"comment\">// current, that means that we reused the fiber. We need to delete</span></span><br><span class=\"line\">                    <span class=\"comment\">// it from the child list so that we don&#x27;t add it to the deletion</span></span><br><span class=\"line\">                    <span class=\"comment\">// list.</span></span><br><span class=\"line\">                    existingChildren.<span class=\"title function_\">delete</span>(newFiber.<span class=\"property\">key</span> === <span class=\"literal\">null</span> ? newIdx : newFiber.<span class=\"property\">key</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lastPlacedIndex = <span class=\"title function_\">placeChild</span>(newFiber, lastPlacedIndex, newIdx);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (previousNewFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                resultingFirstChild = newFiber;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置兄弟节点</span></span><br><span class=\"line\">                previousNewFiber.<span class=\"property\">sibling</span> = newFiber;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            previousNewFiber = newFiber;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shouldTrackSideEffects) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Any existing children that weren&#x27;t consumed above were deleted. We need</span></span><br><span class=\"line\">        <span class=\"comment\">// to add them to the deletion list.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 删除在新fiber李没有的老fiber， 给effectTag添加删除标记</span></span><br><span class=\"line\">        existingChildren.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">child</span>) =&gt;</span> <span class=\"title function_\">deleteChild</span>(returnFiber, child));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultingFirstChild;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/09/react/hooks/",
            "url": "http://example.com/2020/09/09/react/hooks/",
            "title": "hooks",
            "date_published": "2020-09-09T06:00:00.000Z",
            "content_html": "<p>在 <code>renderWithHooks</code>  中添加了方法，调用的 mount 或者 uodate 的 hooks 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> =</span><br><span class=\"line\">        nextCurrentHook === <span class=\"literal\">null</span> ? <span class=\"title class_\">HooksDispatcherOnMount</span> : <span class=\"title class_\">HooksDispatcherOnUpdate</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行函数，得到children</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> children = <span class=\"title class_\">Component</span>(props, refOrContext);</span><br></pre></td></tr></table></figure>\n<h2 id=\"公共\"><a class=\"markdownIt-Anchor\" href=\"#公共\">#</a> 公共</h2>\n<h3 id=\"mountworkinprogresshook\"><a class=\"markdownIt-Anchor\" href=\"#mountworkinprogresshook\">#</a> mountWorkInProgressHook</h3>\n<p>基于这个方法，所有的 hooks 都在一条链上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountWorkInProgressHook</span>(<span class=\"params\"></span>): <span class=\"title class_\">Hook</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">hook</span>: <span class=\"title class_\">Hook</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">memoizedState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">baseState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">queue</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">baseUpdate</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workInProgressHook === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is the first hook in the list</span></span><br><span class=\"line\">        firstWorkInProgressHook = workInProgressHook = hook;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Append to the end of the list</span></span><br><span class=\"line\">        workInProgressHook = workInProgressHook.<span class=\"property\">next</span> = hook;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgressHook;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"updateworkinprogresshook\"><a class=\"markdownIt-Anchor\" href=\"#updateworkinprogresshook\">#</a> updateWorkInProgressHook</h3>\n<p>在跟新时都有用到，用来记录当前工作的 hook 和 next hook</p>\n<p>并返回一个 clone hook</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateWorkInProgressHook</span>(<span class=\"params\"></span>): <span class=\"title class_\">Hook</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This function is used both for updates and for re-renders triggered by a</span></span><br><span class=\"line\">    <span class=\"comment\">// render phase update. It assumes there is either a current hook we can</span></span><br><span class=\"line\">    <span class=\"comment\">// clone, or a work-in-progress hook from a previous render pass that we can</span></span><br><span class=\"line\">    <span class=\"comment\">// use as a base. When we reach the end of the base list, we must switch to</span></span><br><span class=\"line\">    <span class=\"comment\">// the dispatcher used for mounts.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextWorkInProgressHook !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// There&#x27;s already a work-in-progress. Reuse it.</span></span><br><span class=\"line\">        workInProgressHook = nextWorkInProgressHook;</span><br><span class=\"line\">        nextWorkInProgressHook = workInProgressHook.<span class=\"property\">next</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentHook = nextCurrentHook;</span><br><span class=\"line\">        nextCurrentHook = currentHook !== <span class=\"literal\">null</span> ? currentHook.<span class=\"property\">next</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Clone from the current hook.</span></span><br><span class=\"line\">        <span class=\"title function_\">invariant</span>(nextCurrentHook !== <span class=\"literal\">null</span>, <span class=\"string\">&#x27;Rendered more hooks than during the previous render.&#x27;</span>);</span><br><span class=\"line\">        currentHook = nextCurrentHook;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">newHook</span>: <span class=\"title class_\">Hook</span> = &#123;</span><br><span class=\"line\">            <span class=\"attr\">memoizedState</span>: currentHook.<span class=\"property\">memoizedState</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">baseState</span>: currentHook.<span class=\"property\">baseState</span>,</span><br><span class=\"line\">            <span class=\"attr\">queue</span>: currentHook.<span class=\"property\">queue</span>,</span><br><span class=\"line\">            <span class=\"attr\">baseUpdate</span>: currentHook.<span class=\"property\">baseUpdate</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workInProgressHook === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is the first hook in the list.</span></span><br><span class=\"line\">            workInProgressHook = firstWorkInProgressHook = newHook;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Append to the end of the list.</span></span><br><span class=\"line\">            workInProgressHook = workInProgressHook.<span class=\"property\">next</span> = newHook;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nextCurrentHook = currentHook.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgressHook;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法绑定\"><a class=\"markdownIt-Anchor\" href=\"#方法绑定\">#</a> 方法绑定</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 应该是错误处理</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ContextOnlyDispatcher</span>: <span class=\"title class_\">Dispatcher</span> = &#123;</span><br><span class=\"line\">    readContext,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">useCallback</span>: throwInvalidHookError,</span><br><span class=\"line\">    <span class=\"attr\">useContext</span>: throwInvalidHookError,</span><br><span class=\"line\">    <span class=\"attr\">useEffect</span>: throwInvalidHookError,</span><br><span class=\"line\">    <span class=\"attr\">useImperativeHandle</span>: throwInvalidHookError,</span><br><span class=\"line\">    <span class=\"attr\">useLayoutEffect</span>: throwInvalidHookError,</span><br><span class=\"line\">    <span class=\"attr\">useMemo</span>: throwInvalidHookError,</span><br><span class=\"line\">    <span class=\"attr\">useReducer</span>: throwInvalidHookError,</span><br><span class=\"line\">    <span class=\"attr\">useRef</span>: throwInvalidHookError,</span><br><span class=\"line\">    <span class=\"attr\">useState</span>: throwInvalidHookError,</span><br><span class=\"line\">    <span class=\"attr\">useDebugValue</span>: throwInvalidHookError,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HooksDispatcherOnMount</span>: <span class=\"title class_\">Dispatcher</span> = &#123;</span><br><span class=\"line\">    readContext,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">useCallback</span>: mountCallback,</span><br><span class=\"line\">    <span class=\"attr\">useContext</span>: readContext,</span><br><span class=\"line\">    <span class=\"attr\">useEffect</span>: mountEffect,</span><br><span class=\"line\">    <span class=\"attr\">useImperativeHandle</span>: mountImperativeHandle,</span><br><span class=\"line\">    <span class=\"attr\">useLayoutEffect</span>: mountLayoutEffect,</span><br><span class=\"line\">    <span class=\"attr\">useMemo</span>: mountMemo,</span><br><span class=\"line\">    <span class=\"attr\">useReducer</span>: mountReducer,</span><br><span class=\"line\">    <span class=\"attr\">useRef</span>: mountRef,</span><br><span class=\"line\">    <span class=\"attr\">useState</span>: mountState,</span><br><span class=\"line\">    <span class=\"attr\">useDebugValue</span>: mountDebugValue,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 跟新用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HooksDispatcherOnUpdate</span>: <span class=\"title class_\">Dispatcher</span> = &#123;</span><br><span class=\"line\">    readContext,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">useCallback</span>: updateCallback,</span><br><span class=\"line\">    <span class=\"attr\">useContext</span>: readContext,</span><br><span class=\"line\">    <span class=\"attr\">useEffect</span>: updateEffect,</span><br><span class=\"line\">    <span class=\"attr\">useImperativeHandle</span>: updateImperativeHandle,</span><br><span class=\"line\">    <span class=\"attr\">useLayoutEffect</span>: updateLayoutEffect,</span><br><span class=\"line\">    <span class=\"attr\">useMemo</span>: updateMemo,</span><br><span class=\"line\">    <span class=\"attr\">useReducer</span>: updateReducer,</span><br><span class=\"line\">    <span class=\"attr\">useRef</span>: updateRef,</span><br><span class=\"line\">    <span class=\"attr\">useState</span>: updateState,</span><br><span class=\"line\">    <span class=\"attr\">useDebugValue</span>: updateDebugValue,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"useref\"><a class=\"markdownIt-Anchor\" href=\"#useref\">#</a> useRef</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useRef</span>(<span class=\"params\">initialValue</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dispatcher = <span class=\"title function_\">resolveDispatcher</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatcher.<span class=\"title function_\">useRef</span>(initialValue);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolveDispatcher</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">    !(dispatcher !== <span class=\"literal\">null</span>)</span><br><span class=\"line\">        ? <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">              <span class=\"literal\">false</span>,</span><br><span class=\"line\">              <span class=\"string\">&#x27;Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.&#x27;</span>,</span><br><span class=\"line\">          )</span><br><span class=\"line\">        : <span class=\"keyword\">void</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatcher;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化\"><a class=\"markdownIt-Anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<p>然后进入 <code>dispatcher.useRef</code>  即 <code>mountRef</code></p>\n<h4 id=\"mountref\"><a class=\"markdownIt-Anchor\" href=\"#mountref\">#</a> mountRef</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> mountRef&lt;T&gt;(<span class=\"attr\">initialValue</span>: T): &#123;<span class=\"attr\">current</span>: T&#125; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hook = <span class=\"title function_\">mountWorkInProgressHook</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = &#123;<span class=\"attr\">current</span>: initialValue&#125;;</span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = ref;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ref;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"usestate\"><a class=\"markdownIt-Anchor\" href=\"#usestate\">#</a> useState</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useState</span>(<span class=\"params\">initialState</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dispatcher = <span class=\"title function_\">resolveDispatcher</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dispatcher.<span class=\"title function_\">useState</span>(initialState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化-2\"><a class=\"markdownIt-Anchor\" href=\"#初始化-2\">#</a> 初始化</h3>\n<p>开始都差不多，进入  <code>dispatcher.useState</code>  即 <code>mountState</code></p>\n<h4 id=\"mountstate\"><a class=\"markdownIt-Anchor\" href=\"#mountstate\">#</a> mountState</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> basicStateReducer&lt;S&gt;(<span class=\"attr\">state</span>: S, <span class=\"attr\">action</span>: <span class=\"title class_\">BasicStateAction</span>&lt;S&gt;): S &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> action === <span class=\"string\">&#x27;function&#x27;</span> ? <span class=\"title function_\">action</span>(state) : action;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> mountState&lt;S&gt;(<span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hook = <span class=\"title function_\">mountWorkInProgressHook</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        initialState = <span class=\"title function_\">initialState</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// memoizedState 最新结果</span></span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = hook.<span class=\"property\">baseState</span> = initialState;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = (hook.<span class=\"property\">queue</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">last</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">dispatch</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">lastRenderedReducer</span>: basicStateReducer,</span><br><span class=\"line\">        <span class=\"attr\">lastRenderedState</span>: (<span class=\"attr\">initialState</span>: any),</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 跟新方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">dispatch</span>: <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt; = (queue.<span class=\"property\">dispatch</span> = (dispatchAction.<span class=\"title function_\">bind</span>(</span><br><span class=\"line\">        <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"comment\">// Flow doesn&#x27;t know this is non-null, but we do.</span></span><br><span class=\"line\">        ((<span class=\"attr\">currentlyRenderingFiber</span>: any): <span class=\"title class_\">Fiber</span>),</span><br><span class=\"line\">        queue,</span><br><span class=\"line\">    ): any));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [hook.<span class=\"property\">memoizedState</span>, dispatch];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行\"><a class=\"markdownIt-Anchor\" href=\"#执行\">#</a> 执行</h3>\n<h4 id=\"dispatchaction\"><a class=\"markdownIt-Anchor\" href=\"#dispatchaction\">#</a> dispatchAction</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.is polyfill</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">is</span>(<span class=\"params\">x: any, y: any</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        (x === y &amp;&amp; (x !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / x === <span class=\"number\">1</span> / y)) || (x !== x &amp;&amp; y !== y) <span class=\"comment\">// eslint-disable-line no-self-compare</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// action 已经计算好的值，即setXXX的传参,</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> dispatchAction&lt;S, A&gt;(<span class=\"attr\">fiber</span>: <span class=\"title class_\">Fiber</span>, <span class=\"attr\">queue</span>: <span class=\"title class_\">UpdateQueue</span>&lt;S, A&gt;, <span class=\"attr\">action</span>: A) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> alternate = fiber.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        fiber === currentlyRenderingFiber ||</span><br><span class=\"line\">        (alternate !== <span class=\"literal\">null</span> &amp;&amp; alternate === currentlyRenderingFiber)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is a render phase update. Stash it in a lazily-created map of</span></span><br><span class=\"line\">        <span class=\"comment\">// queue -&gt; linked list of updates. After this render pass, we&#x27;ll restart</span></span><br><span class=\"line\">        <span class=\"comment\">// and apply the stashed updates on top of the work-in-progress hook.</span></span><br><span class=\"line\">        didScheduleRenderPhaseUpdate = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">update</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; = &#123;</span><br><span class=\"line\">            <span class=\"attr\">expirationTime</span>: renderExpirationTime,</span><br><span class=\"line\">            <span class=\"attr\">suspenseConfig</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            action,</span><br><span class=\"line\">            <span class=\"attr\">eagerReducer</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            <span class=\"attr\">eagerState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (renderPhaseUpdates === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            renderPhaseUpdates = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> firstRenderPhaseUpdate = renderPhaseUpdates.<span class=\"title function_\">get</span>(queue);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (firstRenderPhaseUpdate === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            renderPhaseUpdates.<span class=\"title function_\">set</span>(queue, update);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Append the update to the end of the list.</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> lastRenderPhaseUpdate = firstRenderPhaseUpdate;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lastRenderPhaseUpdate.<span class=\"property\">next</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                lastRenderPhaseUpdate = lastRenderPhaseUpdate.<span class=\"property\">next</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lastRenderPhaseUpdate.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (revertPassiveEffectsChange) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">flushPassiveEffects</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentTime = <span class=\"title function_\">requestCurrentTime</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> suspenseConfig = <span class=\"title function_\">requestCurrentSuspenseConfig</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> expirationTime = <span class=\"title function_\">computeExpirationForFiber</span>(currentTime, fiber, suspenseConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">update</span>: <span class=\"title class_\">Update</span>&lt;S, A&gt; = &#123;</span><br><span class=\"line\">            expirationTime,</span><br><span class=\"line\">            suspenseConfig,</span><br><span class=\"line\">            action,</span><br><span class=\"line\">            <span class=\"attr\">eagerReducer</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            <span class=\"attr\">eagerState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Append the update to the end of the list.</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> last = queue.<span class=\"property\">last</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is the first update. Create a circular list.</span></span><br><span class=\"line\">            update.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> first = last.<span class=\"property\">next</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Still circular.</span></span><br><span class=\"line\">                update.<span class=\"property\">next</span> = first;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            last.<span class=\"property\">next</span> = update;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// queue里放着就数据，last是新数据</span></span><br><span class=\"line\">        queue.<span class=\"property\">last</span> = update;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">            fiber.<span class=\"property\">expirationTime</span> === <span class=\"title class_\">NoWork</span> &amp;&amp;</span><br><span class=\"line\">            (alternate === <span class=\"literal\">null</span> || alternate.<span class=\"property\">expirationTime</span> === <span class=\"title class_\">NoWork</span>)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// The queue is currently empty, which means we can eagerly compute the</span></span><br><span class=\"line\">            <span class=\"comment\">// next state before entering the render phase. If the new state is the</span></span><br><span class=\"line\">            <span class=\"comment\">// same as the current state, we may be able to bail out entirely.</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> lastRenderedReducer = queue.<span class=\"property\">lastRenderedReducer</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastRenderedReducer !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> prevDispatcher;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 上一个值</span></span><br><span class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"attr\">currentState</span>: S = (queue.<span class=\"property\">lastRenderedState</span>: any);</span><br><span class=\"line\">                    <span class=\"comment\">// 最新值</span></span><br><span class=\"line\">                    <span class=\"keyword\">const</span> eagerState = <span class=\"title function_\">lastRenderedReducer</span>(currentState, action);</span><br><span class=\"line\">                    <span class=\"comment\">// Stash the eagerly computed state, and the reducer used to compute</span></span><br><span class=\"line\">                    <span class=\"comment\">// it, on the update object. If the reducer hasn&#x27;t changed by the</span></span><br><span class=\"line\">                    <span class=\"comment\">// time we enter the render phase, then the eager state can be used</span></span><br><span class=\"line\">                    <span class=\"comment\">// without calling the reducer again.</span></span><br><span class=\"line\">                    update.<span class=\"property\">eagerReducer</span> = lastRenderedReducer;</span><br><span class=\"line\">                    update.<span class=\"property\">eagerState</span> = eagerState;</span><br><span class=\"line\">                    <span class=\"comment\">// 即Object.is,相同就return</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"title function_\">is</span>(eagerState, currentState)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Fast path. We can bail out without scheduling React to re-render.</span></span><br><span class=\"line\">                        <span class=\"comment\">// It&#x27;s still possible that we&#x27;ll need to rebase this update later,</span></span><br><span class=\"line\">                        <span class=\"comment\">// if the component re-renders for a different reason and by that</span></span><br><span class=\"line\">                        <span class=\"comment\">// time the reducer has changed.</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Suppress the error. It will throw again in the render phase.</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">                        <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = prevDispatcher;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 有跟新，就去scheduleWork</span></span><br><span class=\"line\">        <span class=\"title function_\">scheduleWork</span>(fiber, expirationTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"schedulework\"><a class=\"markdownIt-Anchor\" href=\"#schedulework\">#</a> scheduleWork</h4>\n<p>见 <span class=\"exturl\" data-url=\"aHR0cDovL3NjaGVkdWxlLm1k\">schedule.md</span></p>\n<h3 id=\"跟新\"><a class=\"markdownIt-Anchor\" href=\"#跟新\">#</a> 跟新</h3>\n<p>跟新时  <code>dispatcher.useState</code>  =  <code>updateState</code></p>\n<h4 id=\"updatestate\"><a class=\"markdownIt-Anchor\" href=\"#updatestate\">#</a> updateState</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> updateState&lt;S&gt;(<span class=\"attr\">initialState</span>: (<span class=\"function\">() =&gt;</span> S) | S): [S, <span class=\"title class_\">Dispatch</span>&lt;<span class=\"title class_\">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">updateReducer</span>(basicStateReducer, (<span class=\"attr\">initialState</span>: any));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> updateReducer&lt;S, I, A&gt;(</span><br><span class=\"line\">    <span class=\"attr\">reducer</span>: <span class=\"function\">(<span class=\"params\">S, A</span>) =&gt;</span> S,</span><br><span class=\"line\">    <span class=\"attr\">initialArg</span>: I,</span><br><span class=\"line\">    init?: <span class=\"function\">(<span class=\"params\">I</span>) =&gt;</span> S,</span><br><span class=\"line\">): [S, <span class=\"title class_\">Dispatch</span>&lt;A&gt;] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hook = <span class=\"title function_\">updateWorkInProgressHook</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = hook.<span class=\"property\">queue</span>;</span><br><span class=\"line\">    <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">        queue !== <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Should have a queue. This is likely a bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.<span class=\"property\">lastRenderedReducer</span> = reducer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numberOfReRenders &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is a re-render. Apply the new render phase updates to the previous</span></span><br><span class=\"line\">        <span class=\"comment\">// work-in-progress hook.</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">dispatch</span>: <span class=\"title class_\">Dispatch</span>&lt;A&gt; = (queue.<span class=\"property\">dispatch</span>: any);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (renderPhaseUpdates !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Render phase updates are stored in a map of queue -&gt; linked list</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> firstRenderPhaseUpdate = renderPhaseUpdates.<span class=\"title function_\">get</span>(queue);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstRenderPhaseUpdate !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">                renderPhaseUpdates.<span class=\"title function_\">delete</span>(queue);</span><br><span class=\"line\">                <span class=\"keyword\">let</span> newState = hook.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> update = firstRenderPhaseUpdate;</span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Process this render phase update. We don&#x27;t have to check the</span></span><br><span class=\"line\">                    <span class=\"comment\">// priority because it will always be the same as the current</span></span><br><span class=\"line\">                    <span class=\"comment\">// render&#x27;s.</span></span><br><span class=\"line\">                    <span class=\"keyword\">const</span> action = update.<span class=\"property\">action</span>;</span><br><span class=\"line\">                    newState = <span class=\"title function_\">reducer</span>(newState, action);</span><br><span class=\"line\">                    update = update.<span class=\"property\">next</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (update !== <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Mark that the fiber performed work, but only if the new state is</span></span><br><span class=\"line\">                <span class=\"comment\">// different from the current state.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"title function_\">is</span>(newState, hook.<span class=\"property\">memoizedState</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">markWorkInProgressReceivedUpdate</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                hook.<span class=\"property\">memoizedState</span> = newState;</span><br><span class=\"line\">                <span class=\"comment\">// Don&#x27;t persist the state accumlated from the render phase updates to</span></span><br><span class=\"line\">                <span class=\"comment\">// the base state unless the queue is empty.</span></span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Not sure if this is the desired semantics, but it&#x27;s what we</span></span><br><span class=\"line\">                <span class=\"comment\">// do for gDSFP. I can&#x27;t remember why.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hook.<span class=\"property\">baseUpdate</span> === queue.<span class=\"property\">last</span>) &#123;</span><br><span class=\"line\">                    hook.<span class=\"property\">baseState</span> = newState;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                queue.<span class=\"property\">lastRenderedState</span> = newState;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> [newState, dispatch];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [hook.<span class=\"property\">memoizedState</span>, dispatch];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The last update in the entire queue</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> last = queue.<span class=\"property\">last</span>;</span><br><span class=\"line\">    <span class=\"comment\">// The last update that is part of the base state.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> baseUpdate = hook.<span class=\"property\">baseUpdate</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> baseState = hook.<span class=\"property\">baseState</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Find the first unprocessed update.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> first;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (baseUpdate !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// For the first update, the queue is a circular linked list where</span></span><br><span class=\"line\">            <span class=\"comment\">// `queue.last.next = queue.first`. Once the first update commits, and</span></span><br><span class=\"line\">            <span class=\"comment\">// the `baseUpdate` is no longer empty, we can unravel the list.</span></span><br><span class=\"line\">            last.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        first = baseUpdate.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        first = last !== <span class=\"literal\">null</span> ? last.<span class=\"property\">next</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新 state 数据</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> newState = baseState;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newBaseState = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newBaseUpdate = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> prevUpdate = baseUpdate;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> update = first;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> didSkip = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> updateExpirationTime = update.<span class=\"property\">expirationTime</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (updateExpirationTime &lt; renderExpirationTime) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Priority is insufficient. Skip this update. If this is the first</span></span><br><span class=\"line\">                <span class=\"comment\">// skipped update, the previous update/state is the new base</span></span><br><span class=\"line\">                <span class=\"comment\">// update/state.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!didSkip) &#123;</span><br><span class=\"line\">                    didSkip = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    newBaseUpdate = prevUpdate;</span><br><span class=\"line\">                    newBaseState = newState;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// Update the remaining priority in the queue.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (updateExpirationTime &gt; remainingExpirationTime) &#123;</span><br><span class=\"line\">                    remainingExpirationTime = updateExpirationTime;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// This update does have sufficient priority.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Mark the event time of this update as relevant to this render pass.</span></span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> This should ideally use the true event time of this update rather than</span></span><br><span class=\"line\">                <span class=\"comment\">// its priority which is a derived and not reverseable value.</span></span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> We should skip this update if it was already committed but currently</span></span><br><span class=\"line\">                <span class=\"comment\">// we have no way of detecting the difference between a committed and suspended</span></span><br><span class=\"line\">                <span class=\"comment\">// update here.</span></span><br><span class=\"line\">                <span class=\"title function_\">markRenderEventTimeAndConfig</span>(updateExpirationTime, update.<span class=\"property\">suspenseConfig</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Process this update.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (update.<span class=\"property\">eagerReducer</span> === reducer) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If this update was processed eagerly, and its reducer matches the</span></span><br><span class=\"line\">                    <span class=\"comment\">// current reducer, we can use the eagerly computed state.</span></span><br><span class=\"line\">                    newState = ((update.<span class=\"property\">eagerState</span>: any): S);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> action = update.<span class=\"property\">action</span>;</span><br><span class=\"line\">                    newState = <span class=\"title function_\">reducer</span>(newState, action);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            prevUpdate = update;</span><br><span class=\"line\">            update = update.<span class=\"property\">next</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (update !== <span class=\"literal\">null</span> &amp;&amp; update !== first);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!didSkip) &#123;</span><br><span class=\"line\">            newBaseUpdate = prevUpdate;</span><br><span class=\"line\">            newBaseState = newState;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Mark that the fiber performed work, but only if the new state is</span></span><br><span class=\"line\">        <span class=\"comment\">// different from the current state.</span></span><br><span class=\"line\">        <span class=\"comment\">// 标记fiber已完成工作，前提是新旧数据不同，通过Object.is</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_\">is</span>(newState, hook.<span class=\"property\">memoizedState</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">markWorkInProgressReceivedUpdate</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        hook.<span class=\"property\">memoizedState</span> = newState;</span><br><span class=\"line\">        hook.<span class=\"property\">baseUpdate</span> = newBaseUpdate;</span><br><span class=\"line\">        hook.<span class=\"property\">baseState</span> = newBaseState;</span><br><span class=\"line\"></span><br><span class=\"line\">        queue.<span class=\"property\">lastRenderedState</span> = newState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">dispatch</span>: <span class=\"title class_\">Dispatch</span>&lt;A&gt; = (queue.<span class=\"property\">dispatch</span>: any);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [hook.<span class=\"property\">memoizedState</span>, dispatch];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"updateworkinprogresshook-2\"><a class=\"markdownIt-Anchor\" href=\"#updateworkinprogresshook-2\">#</a> updateWorkInProgressHook</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateWorkInProgressHook</span>(<span class=\"params\"></span>): <span class=\"title class_\">Hook</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This function is used both for updates and for re-renders triggered by a</span></span><br><span class=\"line\">    <span class=\"comment\">// render phase update. It assumes there is either a current hook we can</span></span><br><span class=\"line\">    <span class=\"comment\">// clone, or a work-in-progress hook from a previous render pass that we can</span></span><br><span class=\"line\">    <span class=\"comment\">// use as a base. When we reach the end of the base list, we must switch to</span></span><br><span class=\"line\">    <span class=\"comment\">// the dispatcher used for mounts.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextWorkInProgressHook !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// There&#x27;s already a work-in-progress. Reuse it.</span></span><br><span class=\"line\">        workInProgressHook = nextWorkInProgressHook;</span><br><span class=\"line\">        nextWorkInProgressHook = workInProgressHook.<span class=\"property\">next</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        currentHook = nextCurrentHook;</span><br><span class=\"line\">        nextCurrentHook = currentHook !== <span class=\"literal\">null</span> ? currentHook.<span class=\"property\">next</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Clone from the current hook.</span></span><br><span class=\"line\">        <span class=\"title function_\">invariant</span>(nextCurrentHook !== <span class=\"literal\">null</span>, <span class=\"string\">&#x27;Rendered more hooks than during the previous render.&#x27;</span>);</span><br><span class=\"line\">        currentHook = nextCurrentHook;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// clone 当前 hook</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"attr\">newHook</span>: <span class=\"title class_\">Hook</span> = &#123;</span><br><span class=\"line\">            <span class=\"attr\">memoizedState</span>: currentHook.<span class=\"property\">memoizedState</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">baseState</span>: currentHook.<span class=\"property\">baseState</span>,</span><br><span class=\"line\">            <span class=\"attr\">queue</span>: currentHook.<span class=\"property\">queue</span>,</span><br><span class=\"line\">            <span class=\"attr\">baseUpdate</span>: currentHook.<span class=\"property\">baseUpdate</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"attr\">next</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workInProgressHook === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is the first hook in the list.</span></span><br><span class=\"line\">            workInProgressHook = firstWorkInProgressHook = newHook;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Append to the end of the list.</span></span><br><span class=\"line\">            workInProgressHook = workInProgressHook.<span class=\"property\">next</span> = newHook;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nextCurrentHook = currentHook.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgressHook;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"useeffect\"><a class=\"markdownIt-Anchor\" href=\"#useeffect\">#</a> useEffect</h2>\n<h3 id=\"初始化-3\"><a class=\"markdownIt-Anchor\" href=\"#初始化-3\">#</a> 初始化</h3>\n<h4 id=\"mounteffect-和-mounteffectimpl\"><a class=\"markdownIt-Anchor\" href=\"#mounteffect-和-mounteffectimpl\">#</a> mountEffect 和 mountEffectImpl</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountEffect</span>(<span class=\"params\">create: () =&gt; (() =&gt; <span class=\"keyword\">void</span>) | <span class=\"keyword\">void</span>, deps: <span class=\"built_in\">Array</span>&lt;mixed&gt; | <span class=\"keyword\">void</span> | <span class=\"literal\">null</span></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mountEffectImpl</span>(</span><br><span class=\"line\">        <span class=\"title class_\">UpdateEffect</span> | <span class=\"title class_\">PassiveEffect</span>, <span class=\"comment\">// 有这两种effect处理</span></span><br><span class=\"line\">        <span class=\"title class_\">UnmountPassive</span> | <span class=\"title class_\">MountPassive</span>, <span class=\"comment\">// 192</span></span><br><span class=\"line\">        create,</span><br><span class=\"line\">        deps,</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountEffectImpl</span>(<span class=\"params\">fiberEffectTag, hookEffectTag, create, deps</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hook = <span class=\"title function_\">mountWorkInProgressHook</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextDeps = deps === <span class=\"literal\">undefined</span> ? <span class=\"literal\">null</span> : deps;</span><br><span class=\"line\">    sideEffectTag |= fiberEffectTag;</span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = <span class=\"title function_\">pushEffect</span>(hookEffectTag, create, <span class=\"literal\">undefined</span>, nextDeps);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"pusheffect\"><a class=\"markdownIt-Anchor\" href=\"#pusheffect\">#</a> pushEffect</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pushEffect</span>(<span class=\"params\">tag, create, destroy, deps</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">effect</span>: <span class=\"title class_\">Effect</span> = &#123;</span><br><span class=\"line\">        tag,</span><br><span class=\"line\">        create,</span><br><span class=\"line\">        destroy,</span><br><span class=\"line\">        deps,</span><br><span class=\"line\">        <span class=\"comment\">// Circular</span></span><br><span class=\"line\">        <span class=\"attr\">next</span>: (<span class=\"attr\">null</span>: any),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (componentUpdateQueue === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        componentUpdateQueue = <span class=\"title function_\">createFunctionComponentUpdateQueue</span>();</span><br><span class=\"line\">        componentUpdateQueue.<span class=\"property\">lastEffect</span> = effect.<span class=\"property\">next</span> = effect;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> lastEffect = componentUpdateQueue.<span class=\"property\">lastEffect</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastEffect === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            componentUpdateQueue.<span class=\"property\">lastEffect</span> = effect.<span class=\"property\">next</span> = effect;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> firstEffect = lastEffect.<span class=\"property\">next</span>;</span><br><span class=\"line\">            lastEffect.<span class=\"property\">next</span> = effect;</span><br><span class=\"line\">            effect.<span class=\"property\">next</span> = firstEffect;</span><br><span class=\"line\">            componentUpdateQueue.<span class=\"property\">lastEffect</span> = effect;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> effect;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行-2\"><a class=\"markdownIt-Anchor\" href=\"#执行-2\">#</a> 执行</h3>\n<p>从  <code>commitRoot</code>  开始</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitRoot</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开始渲染流程</span></span><br><span class=\"line\">    <span class=\"comment\">// debugger;</span></span><br><span class=\"line\">    <span class=\"comment\">// 优先级相关，最后还是运行commitRootImpl</span></span><br><span class=\"line\">    <span class=\"title function_\">runWithPriority</span>(<span class=\"title class_\">ImmediatePriority</span>, commitRootImpl.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root)); <span class=\"comment\">// 渲染并执行componentDidMount</span></span><br><span class=\"line\">    <span class=\"comment\">// If there are passive effects, schedule a callback to flush them. This goes</span></span><br><span class=\"line\">    <span class=\"comment\">// outside commitRootImpl so that it inherits the priority of the render.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootWithPendingPassiveEffects !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// debugger;</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里是调度管理，先不看，直接进里面</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> priorityLevel = <span class=\"title function_\">getCurrentPriorityLevel</span>();</span><br><span class=\"line\">        <span class=\"title function_\">scheduleCallback</span>(priorityLevel, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// hooks的useEffect在这里执行,不过是在RequestAnimationFrame里,不好一步追踪到这，只能打断点反追</span></span><br><span class=\"line\">            <span class=\"title function_\">flushPassiveEffects</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"flushpassiveeffects\"><a class=\"markdownIt-Anchor\" href=\"#flushpassiveeffects\">#</a> flushPassiveEffects</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">flushPassiveEffects</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootWithPendingPassiveEffects === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = rootWithPendingPassiveEffects;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> expirationTime = pendingPassiveEffectsExpirationTime;</span><br><span class=\"line\">    rootWithPendingPassiveEffects = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    pendingPassiveEffectsExpirationTime = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">prevInteractions</span>: <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">Interaction</span>&gt; | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevExecutionContext = executionContext;</span><br><span class=\"line\">    executionContext |= <span class=\"title class_\">CommitContext</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Note: This currently assumes there are no passive effects on the root</span></span><br><span class=\"line\">    <span class=\"comment\">// fiber, because the root is not part of its own effect list. This could</span></span><br><span class=\"line\">    <span class=\"comment\">// change in the future.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> effect = root.<span class=\"property\">current</span>.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (effect !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">commitPassiveHookEffects</span>(effect);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">invariant</span>(effect !== <span class=\"literal\">null</span>, <span class=\"string\">&#x27;Should be working on an effect.&#x27;</span>);</span><br><span class=\"line\">                <span class=\"title function_\">captureCommitPhaseError</span>(effect, error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        effect = effect.<span class=\"property\">nextEffect</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    executionContext = prevExecutionContext;</span><br><span class=\"line\">    <span class=\"title function_\">flushSyncCallbackQueue</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If additional passive effects were scheduled, increment a counter. If this</span></span><br><span class=\"line\">    <span class=\"comment\">// exceeds the limit, we&#x27;ll fire a warning.</span></span><br><span class=\"line\">    nestedPassiveUpdateCount =</span><br><span class=\"line\">        rootWithPendingPassiveEffects === <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : nestedPassiveUpdateCount + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"commitpassivehookeffects\"><a class=\"markdownIt-Anchor\" href=\"#commitpassivehookeffects\">#</a> commitPassiveHookEffects</h4>\n<p>先执行卸载的 <code>return</code> , 在执行本体</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">commitPassiveHookEffects</span>(<span class=\"params\">finishedWork: Fiber</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">commitHookEffectList</span>(<span class=\"title class_\">UnmountPassive</span>, <span class=\"title class_\">NoHookEffect</span>, finishedWork);</span><br><span class=\"line\">    <span class=\"title function_\">commitHookEffectList</span>(<span class=\"title class_\">NoHookEffect</span>, <span class=\"title class_\">MountPassive</span>, finishedWork);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"commithookeffectlist\"><a class=\"markdownIt-Anchor\" href=\"#commithookeffectlist\">#</a> commitHookEffectList</h4>\n<p>这个方法在很多地方都有用到，目前已知的从 <code>commitPassiveHookEffects</code>  过来的是 <code>useEffect</code> , 其他未知</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitHookEffectList</span>(<span class=\"params\">unmountTag: number, mountTag: number, finishedWork: Fiber</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">updateQueue</span>: <span class=\"title class_\">FunctionComponentUpdateQueue</span> | <span class=\"literal\">null</span> = (finishedWork.<span class=\"property\">updateQueue</span>: any);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lastEffect = updateQueue !== <span class=\"literal\">null</span> ? updateQueue.<span class=\"property\">lastEffect</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastEffect !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> firstEffect = lastEffect.<span class=\"property\">next</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> effect = firstEffect;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((effect.<span class=\"property\">tag</span> &amp; unmountTag) !== <span class=\"title class_\">NoHookEffect</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Unmount</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> destroy = effect.<span class=\"property\">destroy</span>;</span><br><span class=\"line\">                effect.<span class=\"property\">destroy</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (destroy !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">destroy</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((effect.<span class=\"property\">tag</span> &amp; mountTag) !== <span class=\"title class_\">NoHookEffect</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Mount</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> create = effect.<span class=\"property\">create</span>;</span><br><span class=\"line\">                <span class=\"comment\">// return就是destroy</span></span><br><span class=\"line\">                effect.<span class=\"property\">destroy</span> = <span class=\"title function_\">create</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            effect = effect.<span class=\"property\">next</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (effect !== firstEffect);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"更新\"><a class=\"markdownIt-Anchor\" href=\"#更新\">#</a> 更新</h3>\n<h4 id=\"updateeffect\"><a class=\"markdownIt-Anchor\" href=\"#updateeffect\">#</a> updateEffect</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateEffect</span>(<span class=\"params\">create: () =&gt; (() =&gt; <span class=\"keyword\">void</span>) | <span class=\"keyword\">void</span>, deps: <span class=\"built_in\">Array</span>&lt;mixed&gt; | <span class=\"keyword\">void</span> | <span class=\"literal\">null</span></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">updateEffectImpl</span>(</span><br><span class=\"line\">        <span class=\"title class_\">UpdateEffect</span> | <span class=\"title class_\">PassiveEffect</span>,</span><br><span class=\"line\">        <span class=\"title class_\">UnmountPassive</span> | <span class=\"title class_\">MountPassive</span>,</span><br><span class=\"line\">        create,</span><br><span class=\"line\">        deps,</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateEffectImpl</span>(<span class=\"params\">fiberEffectTag, hookEffectTag, create, deps</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hook = <span class=\"title function_\">updateWorkInProgressHook</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextDeps = deps === <span class=\"literal\">undefined</span> ? <span class=\"literal\">null</span> : deps;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> destroy = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentHook !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prevEffect = currentHook.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">        destroy = prevEffect.<span class=\"property\">destroy</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 判断依赖是否有变，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextDeps !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> prevDeps = prevEffect.<span class=\"property\">deps</span>;</span><br><span class=\"line\">            <span class=\"comment\">//  循环依赖，用Object.is</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">areHookInputsEqual</span>(nextDeps, prevDeps)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 依赖不变，是NoHookEffect，所以useEffect不执行destroy和create</span></span><br><span class=\"line\">                <span class=\"title function_\">pushEffect</span>(<span class=\"title class_\">NoHookEffect</span>, create, destroy, nextDeps);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 只有依赖有变或者没依赖才有fiberEffectTag标记，不过没发现有什么用</span></span><br><span class=\"line\">    sideEffectTag |= fiberEffectTag;</span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = <span class=\"title function_\">pushEffect</span>(hookEffectTag, create, destroy, nextDeps);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"usecontext\"><a class=\"markdownIt-Anchor\" href=\"#usecontext\">#</a> useContext</h2>\n<p>context 见 <span class=\"exturl\" data-url=\"aHR0cDovL2NvbnRleHQubWQ=\">context.md</span></p>\n<h2 id=\"usemome\"><a class=\"markdownIt-Anchor\" href=\"#usemome\">#</a> useMome</h2>\n<h3 id=\"mountmemo\"><a class=\"markdownIt-Anchor\" href=\"#mountmemo\">#</a> mountMemo</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> mountMemo&lt;T&gt;(<span class=\"attr\">nextCreate</span>: <span class=\"function\">() =&gt;</span> T, <span class=\"attr\">deps</span>: <span class=\"title class_\">Array</span>&lt;mixed&gt; | <span class=\"keyword\">void</span> | <span class=\"literal\">null</span>): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hook = <span class=\"title function_\">mountWorkInProgressHook</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextDeps = deps === <span class=\"literal\">undefined</span> ? <span class=\"literal\">null</span> : deps;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextValue = <span class=\"title function_\">nextCreate</span>();</span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = [nextValue, nextDeps];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"updatememo\"><a class=\"markdownIt-Anchor\" href=\"#updatememo\">#</a> updateMemo</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> updateMemo&lt;T&gt;(<span class=\"attr\">nextCreate</span>: <span class=\"function\">() =&gt;</span> T, <span class=\"attr\">deps</span>: <span class=\"title class_\">Array</span>&lt;mixed&gt; | <span class=\"keyword\">void</span> | <span class=\"literal\">null</span>): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hook = <span class=\"title function_\">updateWorkInProgressHook</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextDeps = deps === <span class=\"literal\">undefined</span> ? <span class=\"literal\">null</span> : deps;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevState = hook.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevState !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Assume these are defined. If they&#x27;re not, areHookInputsEqual will warn.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextDeps !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 依赖不变，就取旧值</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"attr\">prevDeps</span>: <span class=\"title class_\">Array</span>&lt;mixed&gt; | <span class=\"literal\">null</span> = prevState[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">areHookInputsEqual</span>(nextDeps, prevDeps)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> prevState[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 否则重新执行获得最新值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextValue = <span class=\"title function_\">nextCreate</span>();</span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = [nextValue, nextDeps];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/09/react/completeWork/",
            "url": "http://example.com/2020/09/09/react/completeWork/",
            "title": "completeWork",
            "date_published": "2020-09-09T03:00:00.000Z",
            "content_html": "<p>根据 fiber tag 创建 dom 节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeWork</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    current: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    workInProgress: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    renderExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newProps = workInProgress.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (workInProgress.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">IndeterminateComponent</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">LazyComponent</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">SimpleMemoComponent</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">FunctionComponent</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ClassComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"title class_\">Component</span> = workInProgress.<span class=\"property\">type</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isLegacyContextProvider</span>(<span class=\"title class_\">Component</span>)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">popLegacyContext</span>(workInProgress);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostRoot</span>: &#123;</span><br><span class=\"line\">            <span class=\"title function_\">popHostContainer</span>(workInProgress);</span><br><span class=\"line\">            <span class=\"title function_\">popTopLevelLegacyContextObject</span>(workInProgress);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fiberRoot = (workInProgress.<span class=\"property\">stateNode</span>: <span class=\"title class_\">FiberRoot</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fiberRoot.<span class=\"property\">pendingContext</span>) &#123;</span><br><span class=\"line\">                fiberRoot.<span class=\"property\">context</span> = fiberRoot.<span class=\"property\">pendingContext</span>;</span><br><span class=\"line\">                fiberRoot.<span class=\"property\">pendingContext</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span> || current.<span class=\"property\">child</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If we hydrated, pop so that we can delete any remaining children</span></span><br><span class=\"line\">                <span class=\"comment\">// that weren&#x27;t hydrated.</span></span><br><span class=\"line\">                <span class=\"title function_\">popHydrationState</span>(workInProgress);</span><br><span class=\"line\">                <span class=\"comment\">// This resets the hacky state to fix isMounted before committing.</span></span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Delete this when we delete isMounted and findDOMNode.</span></span><br><span class=\"line\">                workInProgress.<span class=\"property\">effectTag</span> &amp;= ~<span class=\"title class_\">Placement</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"title function_\">updateHostContainer</span>(workInProgress);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 5</span></span><br><span class=\"line\">            <span class=\"title function_\">popHostContext</span>(workInProgress);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> rootContainerInstance = <span class=\"title function_\">getRootHostContainer</span>(); <span class=\"comment\">// 返回div#app</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> type = workInProgress.<span class=\"property\">type</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current !== <span class=\"literal\">null</span> &amp;&amp; workInProgress.<span class=\"property\">stateNode</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">updateHostComponent</span>(</span><br><span class=\"line\">                    <span class=\"comment\">// 有stateNode（dom）,更新</span></span><br><span class=\"line\">                    current,</span><br><span class=\"line\">                    workInProgress,</span><br><span class=\"line\">                    type,</span><br><span class=\"line\">                    newProps,</span><br><span class=\"line\">                    rootContainerInstance,</span><br><span class=\"line\">                );</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (current.<span class=\"property\">ref</span> !== workInProgress.<span class=\"property\">ref</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">markRef</span>(workInProgress);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!newProps) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">                        workInProgress.<span class=\"property\">stateNode</span> !== <span class=\"literal\">null</span>,</span><br><span class=\"line\">                        <span class=\"string\">&#x27;We must have new props for new mounts. This error is likely &#x27;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;caused by a bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                    <span class=\"comment\">// This can happen when we abort work.</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 返回 http://www.w3.org/1999/xhtml</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> currentHostContext = <span class=\"title function_\">getHostContext</span>();</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move createInstance to beginWork and keep it on a context</span></span><br><span class=\"line\">                <span class=\"comment\">// &quot;stack&quot; as the parent. Then append children as we go in beginWork</span></span><br><span class=\"line\">                <span class=\"comment\">// or completeWork depending on we want to add then top-&gt;down or</span></span><br><span class=\"line\">                <span class=\"comment\">// bottom-&gt;up. Top-&gt;down is faster in IE11.</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> wasHydrated = <span class=\"title function_\">popHydrationState</span>(workInProgress);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (wasHydrated) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move this and createInstance step into the beginPhase</span></span><br><span class=\"line\">                    <span class=\"comment\">// to consolidate.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                        <span class=\"title function_\">prepareToHydrateHostInstance</span>(</span><br><span class=\"line\">                            workInProgress,</span><br><span class=\"line\">                            rootContainerInstance,</span><br><span class=\"line\">                            currentHostContext,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    ) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// If changes to the hydrated node needs to be applied at the</span></span><br><span class=\"line\">                        <span class=\"comment\">// commit-phase we mark this as such.</span></span><br><span class=\"line\">                        <span class=\"title function_\">markUpdate</span>(workInProgress);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// debugger</span></span><br><span class=\"line\">                    <span class=\"comment\">// 根据fiber创建dom</span></span><br><span class=\"line\">                    <span class=\"comment\">// 返回创建的dom节点</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> instance = <span class=\"title function_\">createInstance</span>(</span><br><span class=\"line\">                        type,</span><br><span class=\"line\">                        newProps,</span><br><span class=\"line\">                        rootContainerInstance,</span><br><span class=\"line\">                        currentHostContext,</span><br><span class=\"line\">                        workInProgress,</span><br><span class=\"line\">                    );</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"title function_\">appendAllChildren</span>(instance, workInProgress, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// 添加child ?</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Certain renderers require commit-time effects for initial mount.</span></span><br><span class=\"line\">                    <span class=\"comment\">// (eg DOM renderer supports auto-focus for certain elements).</span></span><br><span class=\"line\">                    <span class=\"comment\">// Make sure such renderers get scheduled for later work.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                        <span class=\"title function_\">finalizeInitialChildren</span>(</span><br><span class=\"line\">                            instance,</span><br><span class=\"line\">                            type,</span><br><span class=\"line\">                            newProps,</span><br><span class=\"line\">                            rootContainerInstance,</span><br><span class=\"line\">                            currentHostContext,</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    ) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">markUpdate</span>(workInProgress);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    workInProgress.<span class=\"property\">stateNode</span> = instance;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (workInProgress.<span class=\"property\">ref</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If there is a ref on a host node we need to schedule a callback</span></span><br><span class=\"line\">                    <span class=\"title function_\">markRef</span>(workInProgress);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostText</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> newText = newProps;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current &amp;&amp; workInProgress.<span class=\"property\">stateNode</span> != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> oldText = current.<span class=\"property\">memoizedProps</span>;</span><br><span class=\"line\">                <span class=\"comment\">// If we have an alternate, that means this is an update and we need</span></span><br><span class=\"line\">                <span class=\"comment\">// to schedule a side-effect to do the updates.</span></span><br><span class=\"line\">                <span class=\"title function_\">updateHostText</span>(current, workInProgress, oldText, newText);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> newText !== <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">                        workInProgress.<span class=\"property\">stateNode</span> !== <span class=\"literal\">null</span>,</span><br><span class=\"line\">                        <span class=\"string\">&#x27;We must have new props for new mounts. This error is likely &#x27;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;caused by a bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                    <span class=\"comment\">// This can happen when we abort work.</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> rootContainerInstance = <span class=\"title function_\">getRootHostContainer</span>();</span><br><span class=\"line\">                <span class=\"keyword\">const</span> currentHostContext = <span class=\"title function_\">getHostContext</span>();</span><br><span class=\"line\">                <span class=\"keyword\">let</span> wasHydrated = <span class=\"title function_\">popHydrationState</span>(workInProgress);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (wasHydrated) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"title function_\">prepareToHydrateHostTextInstance</span>(workInProgress)) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">markUpdate</span>(workInProgress);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    workInProgress.<span class=\"property\">stateNode</span> = <span class=\"title function_\">createTextInstance</span>(</span><br><span class=\"line\">                        newText,</span><br><span class=\"line\">                        rootContainerInstance,</span><br><span class=\"line\">                        currentHostContext,</span><br><span class=\"line\">                        workInProgress,</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ForwardRef</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">SuspenseComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"title function_\">popSuspenseContext</span>(workInProgress);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"attr\">nextState</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">SuspenseState</span> = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((workInProgress.<span class=\"property\">effectTag</span> &amp; <span class=\"title class_\">DidCapture</span>) !== <span class=\"title class_\">NoEffect</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Something suspended. Re-render with the fallback children.</span></span><br><span class=\"line\">                workInProgress.<span class=\"property\">expirationTime</span> = renderExpirationTime;</span><br><span class=\"line\">                <span class=\"comment\">// Do not reset the effect list.</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> workInProgress;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> nextDidTimeout = nextState !== <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> prevDidTimeout = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// In cases where we didn&#x27;t find a suitable hydration boundary we never</span></span><br><span class=\"line\">                <span class=\"comment\">// downgraded this to a DehydratedSuspenseComponent, but we still need to</span></span><br><span class=\"line\">                <span class=\"comment\">// pop the hydration state since we might be inside the insertion tree.</span></span><br><span class=\"line\">                <span class=\"title function_\">popHydrationState</span>(workInProgress);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"attr\">prevState</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">SuspenseState</span> = current.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">                prevDidTimeout = prevState !== <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!nextDidTimeout &amp;&amp; prevState !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// We just switched from the fallback to the normal children.</span></span><br><span class=\"line\">                    <span class=\"comment\">// Delete the fallback.</span></span><br><span class=\"line\">                    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Would it be better to store the fallback fragment on</span></span><br><span class=\"line\">                    <span class=\"comment\">// the stateNode during the begin phase?</span></span><br><span class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"attr\">currentFallbackChild</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> = (current.<span class=\"property\">child</span>: any).<span class=\"property\">sibling</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (currentFallbackChild !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Deletions go at the beginning of the return fiber&#x27;s effect list</span></span><br><span class=\"line\">                        <span class=\"keyword\">const</span> first = workInProgress.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (first !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                            workInProgress.<span class=\"property\">firstEffect</span> = currentFallbackChild;</span><br><span class=\"line\">                            currentFallbackChild.<span class=\"property\">nextEffect</span> = first;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            workInProgress.<span class=\"property\">firstEffect</span> = workInProgress.<span class=\"property\">lastEffect</span> = currentFallbackChild;</span><br><span class=\"line\">                            currentFallbackChild.<span class=\"property\">nextEffect</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        currentFallbackChild.<span class=\"property\">effectTag</span> = <span class=\"title class_\">Deletion</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextDidTimeout &amp;&amp; !prevDidTimeout) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If this subtreee is running in batched mode we can suspend,</span></span><br><span class=\"line\">                <span class=\"comment\">// otherwise we won&#x27;t suspend.</span></span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> This will still suspend a synchronous tree if anything</span></span><br><span class=\"line\">                <span class=\"comment\">// in the concurrent tree already suspended during this render.</span></span><br><span class=\"line\">                <span class=\"comment\">// This is a known bug.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((workInProgress.<span class=\"property\">mode</span> &amp; <span class=\"title class_\">BatchedMode</span>) !== <span class=\"title class_\">NoMode</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move this back to throwException because this is too late</span></span><br><span class=\"line\">                    <span class=\"comment\">// if this is a large tree which is common for initial loads. We</span></span><br><span class=\"line\">                    <span class=\"comment\">// don&#x27;t know if we should restart a render or not until we get</span></span><br><span class=\"line\">                    <span class=\"comment\">// this marker, and this is too late.</span></span><br><span class=\"line\">                    <span class=\"comment\">// If this render already had a ping or lower pri updates,</span></span><br><span class=\"line\">                    <span class=\"comment\">// and this is the first time we know we&#x27;re going to suspend we</span></span><br><span class=\"line\">                    <span class=\"comment\">// should be able to immediately restart from within throwException.</span></span><br><span class=\"line\">                    <span class=\"keyword\">const</span> hasInvisibleChildContext =</span><br><span class=\"line\">                        current === <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">                        workInProgress.<span class=\"property\">memoizedProps</span>.<span class=\"property\">unstable_avoidThisFallback</span> !== <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                        hasInvisibleChildContext ||</span><br><span class=\"line\">                        <span class=\"title function_\">hasSuspenseContext</span>(</span><br><span class=\"line\">                            suspenseStackCursor.<span class=\"property\">current</span>,</span><br><span class=\"line\">                            (<span class=\"title class_\">InvisibleParentSuspenseContext</span>: <span class=\"title class_\">SuspenseContext</span>),</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                    ) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// If this was in an invisible tree or a new render, then showing</span></span><br><span class=\"line\">                        <span class=\"comment\">// this boundary is ok.</span></span><br><span class=\"line\">                        <span class=\"title function_\">renderDidSuspend</span>();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// Otherwise, we&#x27;re going to have to hide content so we should</span></span><br><span class=\"line\">                        <span class=\"comment\">// suspend for longer if possible.</span></span><br><span class=\"line\">                        <span class=\"title function_\">renderDidSuspendDelayIfPossible</span>();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (supportsPersistence) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Only schedule updates if not prevDidTimeout.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nextDidTimeout) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If this boundary just timed out, schedule an effect to attach a</span></span><br><span class=\"line\">                    <span class=\"comment\">// retry listener to the proimse. This flag is also used to hide the</span></span><br><span class=\"line\">                    <span class=\"comment\">// primary children.</span></span><br><span class=\"line\">                    workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">Update</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (supportsMutation) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Only schedule updates if these values are non equal, i.e. it changed.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nextDidTimeout || prevDidTimeout) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If this boundary just timed out, schedule an effect to attach a</span></span><br><span class=\"line\">                    <span class=\"comment\">// retry listener to the proimse. This flag is also used to hide the</span></span><br><span class=\"line\">                    <span class=\"comment\">// primary children. In mutation mode, we also need the flag to</span></span><br><span class=\"line\">                    <span class=\"comment\">// *unhide* children that were previously hidden, so check if the</span></span><br><span class=\"line\">                    <span class=\"comment\">// is currently timed out, too.</span></span><br><span class=\"line\">                    workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">Update</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">Fragment</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">Mode</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">Profiler</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostPortal</span>:</span><br><span class=\"line\">            <span class=\"title function_\">popHostContainer</span>(workInProgress);</span><br><span class=\"line\">            <span class=\"title function_\">updateHostContainer</span>(workInProgress);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ContextProvider</span>:</span><br><span class=\"line\">            <span class=\"comment\">// Pop provider fiber</span></span><br><span class=\"line\">            <span class=\"title function_\">popProvider</span>(workInProgress);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ContextConsumer</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">MemoComponent</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">IncompleteClassComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Same as class component case. I put it down here so that the tags are</span></span><br><span class=\"line\">            <span class=\"comment\">// sequential to ensure this switch is compiled to a jump table.</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"title class_\">Component</span> = workInProgress.<span class=\"property\">type</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isLegacyContextProvider</span>(<span class=\"title class_\">Component</span>)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">popLegacyContext</span>(workInProgress);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">DehydratedSuspenseComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (enableSuspenseServerRenderer) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">popSuspenseContext</span>(workInProgress);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> wasHydrated = <span class=\"title function_\">popHydrationState</span>(workInProgress);</span><br><span class=\"line\">                    <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">                        wasHydrated,</span><br><span class=\"line\">                        <span class=\"string\">&#x27;A dehydrated suspense component was completed without a hydrated node. &#x27;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;This is probably a bug in React.&#x27;</span>,</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (enableSchedulerTracing) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">markDidDeprioritizeIdleSubtree</span>();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"title function_\">skipPastDehydratedSuspenseInstance</span>(workInProgress);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((workInProgress.<span class=\"property\">effectTag</span> &amp; <span class=\"title class_\">DidCapture</span>) === <span class=\"title class_\">NoEffect</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// This boundary did not suspend so it&#x27;s now hydrated.</span></span><br><span class=\"line\">                    <span class=\"comment\">// To handle any future suspense cases, we&#x27;re going to now upgrade it</span></span><br><span class=\"line\">                    <span class=\"comment\">// to a Suspense component. We detach it from the existing current fiber.</span></span><br><span class=\"line\">                    current.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    workInProgress.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    workInProgress.<span class=\"property\">tag</span> = <span class=\"title class_\">SuspenseComponent</span>;</span><br><span class=\"line\">                    workInProgress.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    workInProgress.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">SuspenseListComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"title function_\">popSuspenseContext</span>(workInProgress);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((workInProgress.<span class=\"property\">effectTag</span> &amp; <span class=\"title class_\">DidCapture</span>) === <span class=\"title class_\">NoEffect</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// This is the first pass. We need to figure out if anything is still</span></span><br><span class=\"line\">                <span class=\"comment\">// suspended in the rendered set.</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> renderedChildren = workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">                <span class=\"comment\">// If new content unsuspended, but there&#x27;s still some content that</span></span><br><span class=\"line\">                <span class=\"comment\">// didn&#x27;t. Then we need to do a second pass that forces everything</span></span><br><span class=\"line\">                <span class=\"comment\">// to keep showing their fallbacks.</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> needsRerender = <span class=\"title function_\">hasSuspendedChildrenAndNewContent</span>(</span><br><span class=\"line\">                    workInProgress,</span><br><span class=\"line\">                    renderedChildren,</span><br><span class=\"line\">                );</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (needsRerender) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Rerender the whole list, but this time, we&#x27;ll force fallbacks</span></span><br><span class=\"line\">                    <span class=\"comment\">// to stay in place.</span></span><br><span class=\"line\">                    workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">DidCapture</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// Reset the effect list before doing the second pass since that&#x27;s now invalid.</span></span><br><span class=\"line\">                    workInProgress.<span class=\"property\">firstEffect</span> = workInProgress.<span class=\"property\">lastEffect</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// Schedule work so we know not to bail out.</span></span><br><span class=\"line\">                    workInProgress.<span class=\"property\">expirationTime</span> = renderExpirationTime;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> workInProgress;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                workInProgress.<span class=\"property\">effectTag</span> &amp;= ~<span class=\"title class_\">DidCapture</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">EventComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (enableEventAPI) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">popHostContext</span>(workInProgress);</span><br><span class=\"line\">                <span class=\"keyword\">const</span> rootContainerInstance = <span class=\"title function_\">getRootHostContainer</span>();</span><br><span class=\"line\">                <span class=\"keyword\">const</span> responder = workInProgress.<span class=\"property\">type</span>.<span class=\"property\">responder</span>;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> <span class=\"attr\">eventComponentInstance</span>: <span class=\"title class_\">ReactEventComponentInstance</span> | <span class=\"literal\">null</span> =</span><br><span class=\"line\">                    workInProgress.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (eventComponentInstance === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> responderState = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (__DEV__ &amp;&amp; !responder.<span class=\"property\">allowMultipleHostChildren</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> hostChildrenCount = <span class=\"title function_\">getEventComponentHostChildrenCount</span>(</span><br><span class=\"line\">                            workInProgress,</span><br><span class=\"line\">                        );</span><br><span class=\"line\">                        <span class=\"title function_\">warning</span>(</span><br><span class=\"line\">                            (hostChildrenCount || <span class=\"number\">0</span>) &lt; <span class=\"number\">2</span>,</span><br><span class=\"line\">                            <span class=\"string\">&#x27;A &quot;&lt;%s&gt;&quot; event component cannot contain multiple host children.&#x27;</span>,</span><br><span class=\"line\">                            <span class=\"title function_\">getComponentName</span>(workInProgress.<span class=\"property\">type</span>),</span><br><span class=\"line\">                        );</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (responder.<span class=\"property\">createInitialState</span> !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">                        responderState = responder.<span class=\"title function_\">createInitialState</span>(newProps);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    eventComponentInstance = workInProgress.<span class=\"property\">stateNode</span> = &#123;</span><br><span class=\"line\">                        <span class=\"attr\">currentFiber</span>: workInProgress,</span><br><span class=\"line\">                        <span class=\"attr\">props</span>: newProps,</span><br><span class=\"line\">                        responder,</span><br><span class=\"line\">                        <span class=\"attr\">rootEventTypes</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">                        <span class=\"attr\">rootInstance</span>: rootContainerInstance,</span><br><span class=\"line\">                        <span class=\"attr\">state</span>: responderState,</span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                    <span class=\"title function_\">markUpdate</span>(workInProgress);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Update the props on the event component state node</span></span><br><span class=\"line\">                    eventComponentInstance.<span class=\"property\">props</span> = newProps;</span><br><span class=\"line\">                    <span class=\"comment\">// Update the root container, so we can properly unmount events at some point</span></span><br><span class=\"line\">                    eventComponentInstance.<span class=\"property\">rootInstance</span> = rootContainerInstance;</span><br><span class=\"line\">                    <span class=\"comment\">// Update the current fiber</span></span><br><span class=\"line\">                    eventComponentInstance.<span class=\"property\">currentFiber</span> = workInProgress;</span><br><span class=\"line\">                    <span class=\"title function_\">updateEventComponent</span>(eventComponentInstance);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">EventTarget</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (enableEventAPI) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">popHostContext</span>(workInProgress);</span><br><span class=\"line\">                <span class=\"keyword\">const</span> type = workInProgress.<span class=\"property\">type</span>.<span class=\"property\">type</span>;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> rootContainerInstance = <span class=\"title function_\">getRootHostContainer</span>();</span><br><span class=\"line\">                <span class=\"keyword\">const</span> shouldUpdate = <span class=\"title function_\">handleEventTarget</span>(</span><br><span class=\"line\">                    type,</span><br><span class=\"line\">                    newProps,</span><br><span class=\"line\">                    rootContainerInstance,</span><br><span class=\"line\">                    workInProgress,</span><br><span class=\"line\">                );</span><br><span class=\"line\">                <span class=\"comment\">// Update the latest props on the stateNode. This is used</span></span><br><span class=\"line\">                <span class=\"comment\">// during the event phase to find the most current props.</span></span><br><span class=\"line\">                workInProgress.<span class=\"property\">stateNode</span>.<span class=\"property\">props</span> = newProps;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (shouldUpdate) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">markUpdate</span>(workInProgress);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">                <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Unknown unit of work tag. This error is likely caused by a bug in &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">            );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"createinstance\"><a class=\"markdownIt-Anchor\" href=\"#createinstance\">#</a> createInstance</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createInstance</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    type: string,</span></span><br><span class=\"line\"><span class=\"params\">    props: Props,</span></span><br><span class=\"line\"><span class=\"params\">    rootContainerInstance: Container,</span></span><br><span class=\"line\"><span class=\"params\">    hostContext: HostContext,</span></span><br><span class=\"line\"><span class=\"params\">    internalInstanceHandle: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Instance</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">parentNamespace</span>: string;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        parentNamespace = ((<span class=\"attr\">hostContext</span>: any): <span class=\"title class_\">HostContextProd</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获得当前的dom实例 createElement结果</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">domElement</span>: <span class=\"title class_\">Instance</span> = <span class=\"title function_\">createElement</span>(type, props, rootContainerInstance, parentNamespace);</span><br><span class=\"line\">    <span class=\"comment\">// 给dom添加属性指向对应fiber</span></span><br><span class=\"line\">    <span class=\"title function_\">precacheFiberNode</span>(internalInstanceHandle, domElement);</span><br><span class=\"line\">    <span class=\"comment\">// 给dom添加属性指向对应props</span></span><br><span class=\"line\">    <span class=\"title function_\">updateFiberProps</span>(domElement, props);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> domElement;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"appendallchildren\"><a class=\"markdownIt-Anchor\" href=\"#appendallchildren\">#</a> appendAllChildren</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在浏览器环境中他固定为true</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (supportsMutation) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Mutation mode</span></span><br><span class=\"line\"></span><br><span class=\"line\">    appendAllChildren = <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        parent: Instance,</span></span><br><span class=\"line\"><span class=\"params\">        workInProgress: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">        needsVisibilityToggle: boolean,</span></span><br><span class=\"line\"><span class=\"params\">        isHidden: boolean,</span></span><br><span class=\"line\"><span class=\"params\">    </span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We only have the top Fiber that was created but we need recurse down its</span></span><br><span class=\"line\">        <span class=\"comment\">// children to find all the terminal nodes.</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> node = workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.<span class=\"property\">tag</span> === <span class=\"title class_\">HostComponent</span> || node.<span class=\"property\">tag</span> === <span class=\"title class_\">HostText</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">appendInitialChild</span>(parent, node.<span class=\"property\">stateNode</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">tag</span> === <span class=\"title class_\">HostPortal</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If we have a portal child, then we don&#x27;t want to traverse</span></span><br><span class=\"line\">                <span class=\"comment\">// down its children. Instead, we&#x27;ll get insertions from each child in</span></span><br><span class=\"line\">                <span class=\"comment\">// the portal directly.</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">child</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                node.<span class=\"property\">child</span>.<span class=\"property\">return</span> = node;</span><br><span class=\"line\">                node = node.<span class=\"property\">child</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node === workInProgress) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (node.<span class=\"property\">sibling</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (node.<span class=\"property\">return</span> === <span class=\"literal\">null</span> || node.<span class=\"property\">return</span> === workInProgress) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                node = node.<span class=\"property\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node.<span class=\"property\">sibling</span>.<span class=\"property\">return</span> = node.<span class=\"property\">return</span>;</span><br><span class=\"line\">            node = node.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"finalizeinitialchildren\"><a class=\"markdownIt-Anchor\" href=\"#finalizeinitialchildren\">#</a> finalizeInitialChildren</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">finalizeInitialChildren</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    domElement: Instance,</span></span><br><span class=\"line\"><span class=\"params\">    type: string,</span></span><br><span class=\"line\"><span class=\"params\">    props: Props,</span></span><br><span class=\"line\"><span class=\"params\">    rootContainerInstance: Container,</span></span><br><span class=\"line\"><span class=\"params\">    hostContext: HostContext,</span></span><br><span class=\"line\"><span class=\"params\"></span>): boolean &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setInitialProperties</span>(domElement, type, props, rootContainerInstance);</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否需要autoFocus</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">shouldAutoFocusHostComponent</span>(type, props);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"setinitialproperties\"><a class=\"markdownIt-Anchor\" href=\"#setinitialproperties\">#</a> setInitialProperties</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">setInitialProperties</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    domElement: Element,</span></span><br><span class=\"line\"><span class=\"params\">    tag: string,</span></span><br><span class=\"line\"><span class=\"params\">    rawProps: <span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"params\">    rootContainerElement: Element | Document,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isCustomComponentTag = <span class=\"title function_\">isCustomComponent</span>(tag, rawProps); <span class=\"comment\">// 是否自定义标签</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Make sure that we check isMounted before firing any of these events.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">props</span>: <span class=\"title class_\">Object</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (</span><br><span class=\"line\">        tag <span class=\"comment\">// 给以下特殊标签添加默认事件</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;iframe&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;object&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;embed&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title function_\">trapBubbledEvent</span>(<span class=\"variable constant_\">TOP_LOAD</span>, domElement);</span><br><span class=\"line\">            props = rawProps;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;video&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;audio&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\">// Create listener for each media event</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; mediaEventTypes.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">trapBubbledEvent</span>(mediaEventTypes[i], domElement);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            props = rawProps;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;source&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title function_\">trapBubbledEvent</span>(<span class=\"variable constant_\">TOP_ERROR</span>, domElement);</span><br><span class=\"line\">            props = rawProps;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;img&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;image&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;link&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title function_\">trapBubbledEvent</span>(<span class=\"variable constant_\">TOP_ERROR</span>, domElement);</span><br><span class=\"line\">            <span class=\"title function_\">trapBubbledEvent</span>(<span class=\"variable constant_\">TOP_LOAD</span>, domElement);</span><br><span class=\"line\">            props = rawProps;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;form&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title function_\">trapBubbledEvent</span>(<span class=\"variable constant_\">TOP_RESET</span>, domElement);</span><br><span class=\"line\">            <span class=\"title function_\">trapBubbledEvent</span>(<span class=\"variable constant_\">TOP_SUBMIT</span>, domElement);</span><br><span class=\"line\">            props = rawProps;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;details&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title function_\">trapBubbledEvent</span>(<span class=\"variable constant_\">TOP_TOGGLE</span>, domElement);</span><br><span class=\"line\">            props = rawProps;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;input&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title class_\">ReactDOMInputInitWrapperState</span>(domElement, rawProps);</span><br><span class=\"line\">            props = <span class=\"title class_\">ReactDOMInputGetHostProps</span>(domElement, rawProps);</span><br><span class=\"line\">            <span class=\"title function_\">trapBubbledEvent</span>(<span class=\"variable constant_\">TOP_INVALID</span>, domElement);</span><br><span class=\"line\">            <span class=\"comment\">// For controlled components we always need to ensure we&#x27;re listening</span></span><br><span class=\"line\">            <span class=\"comment\">// to onChange. Even if there is no listener.</span></span><br><span class=\"line\">            <span class=\"title function_\">ensureListeningTo</span>(rootContainerElement, <span class=\"string\">&#x27;onChange&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;option&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title class_\">ReactDOMOptionValidateProps</span>(domElement, rawProps);</span><br><span class=\"line\">            props = <span class=\"title class_\">ReactDOMOptionGetHostProps</span>(domElement, rawProps);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;select&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title class_\">ReactDOMSelectInitWrapperState</span>(domElement, rawProps);</span><br><span class=\"line\">            props = <span class=\"title class_\">ReactDOMSelectGetHostProps</span>(domElement, rawProps);</span><br><span class=\"line\">            <span class=\"title function_\">trapBubbledEvent</span>(<span class=\"variable constant_\">TOP_INVALID</span>, domElement);</span><br><span class=\"line\">            <span class=\"comment\">// For controlled components we always need to ensure we&#x27;re listening</span></span><br><span class=\"line\">            <span class=\"comment\">// to onChange. Even if there is no listener.</span></span><br><span class=\"line\">            <span class=\"title function_\">ensureListeningTo</span>(rootContainerElement, <span class=\"string\">&#x27;onChange&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;textarea&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title class_\">ReactDOMTextareaInitWrapperState</span>(domElement, rawProps);</span><br><span class=\"line\">            props = <span class=\"title class_\">ReactDOMTextareaGetHostProps</span>(domElement, rawProps);</span><br><span class=\"line\">            <span class=\"title function_\">trapBubbledEvent</span>(<span class=\"variable constant_\">TOP_INVALID</span>, domElement);</span><br><span class=\"line\">            <span class=\"comment\">// For controlled components we always need to ensure we&#x27;re listening</span></span><br><span class=\"line\">            <span class=\"comment\">// to onChange. Even if there is no listener.</span></span><br><span class=\"line\">            <span class=\"title function_\">ensureListeningTo</span>(rootContainerElement, <span class=\"string\">&#x27;onChange&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            props = rawProps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">assertValidProps</span>(tag, props); <span class=\"comment\">// 判断props合法</span></span><br><span class=\"line\">    <span class=\"title function_\">setInitialDOMProperties</span>(</span><br><span class=\"line\">        <span class=\"comment\">// 根据props设置dom属性, 事件绑定的开始</span></span><br><span class=\"line\">        tag,</span><br><span class=\"line\">        domElement,</span><br><span class=\"line\">        rootContainerElement,</span><br><span class=\"line\">        props,</span><br><span class=\"line\">        isCustomComponentTag,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (tag) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;input&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Make sure we check if this is still unmounted or do any clean</span></span><br><span class=\"line\">            <span class=\"comment\">// up necessary since we never stop tracking anymore.</span></span><br><span class=\"line\">            <span class=\"title function_\">track</span>((<span class=\"attr\">domElement</span>: any));</span><br><span class=\"line\">            <span class=\"title class_\">ReactDOMInputPostMountWrapper</span>(domElement, rawProps, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;textarea&#x27;</span>:</span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Make sure we check if this is still unmounted or do any clean</span></span><br><span class=\"line\">            <span class=\"comment\">// up necessary since we never stop tracking anymore.</span></span><br><span class=\"line\">            <span class=\"title function_\">track</span>((<span class=\"attr\">domElement</span>: any));</span><br><span class=\"line\">            <span class=\"title class_\">ReactDOMTextareaPostMountWrapper</span>(domElement, rawProps);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;option&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title class_\">ReactDOMOptionPostMountWrapper</span>(domElement, rawProps);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;select&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title class_\">ReactDOMSelectPostMountWrapper</span>(domElement, rawProps);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> props.<span class=\"property\">onClick</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> This cast may not be sound for SVG, MathML or custom elements.</span></span><br><span class=\"line\">                <span class=\"title function_\">trapClickOnNonInteractiveElement</span>(((<span class=\"attr\">domElement</span>: any): <span class=\"title class_\">HTMLElement</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/09/react/commitRoot/",
            "url": "http://example.com/2020/09/09/react/commitRoot/",
            "title": "commitRoot",
            "date_published": "2020-09-09T03:00:00.000Z",
            "content_html": "<h3 id=\"commitroot\"><a class=\"markdownIt-Anchor\" href=\"#commitroot\">#</a> commitRoot</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitRoot</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开始渲染流程</span></span><br><span class=\"line\">    <span class=\"comment\">// debugger;</span></span><br><span class=\"line\">    <span class=\"comment\">// 优先级相关，最后还是运行commitRootImpl</span></span><br><span class=\"line\">    <span class=\"title function_\">runWithPriority</span>(<span class=\"title class_\">ImmediatePriority</span>, commitRootImpl.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root)); <span class=\"comment\">// 渲染并执行componentDidMount</span></span><br><span class=\"line\">    <span class=\"comment\">// If there are passive effects, schedule a callback to flush them. This goes</span></span><br><span class=\"line\">    <span class=\"comment\">// outside commitRootImpl so that it inherits the priority of the render.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootWithPendingPassiveEffects !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// debugger;</span></span><br><span class=\"line\">        <span class=\"comment\">// 这里是调度管理，先不看，直接进里面</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> priorityLevel = <span class=\"title function_\">getCurrentPriorityLevel</span>();</span><br><span class=\"line\">        <span class=\"title function_\">scheduleCallback</span>(priorityLevel, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// hooks的useEffect在这里执行</span></span><br><span class=\"line\">            <span class=\"title function_\">flushPassiveEffects</span>();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"commitrootimpl\"><a class=\"markdownIt-Anchor\" href=\"#commitrootimpl\">#</a> commitRootImpl</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitRootImpl</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">flushPassiveEffects</span>();</span><br><span class=\"line\">    <span class=\"title function_\">flushRenderPhaseStrictModeWarningsInDEV</span>(); <span class=\"comment\">// __DEV__</span></span><br><span class=\"line\">    <span class=\"title function_\">flushSuspensePriorityWarningInDEV</span>(); <span class=\"comment\">// __DEV__</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">        (executionContext &amp; (<span class=\"title class_\">RenderContext</span> | <span class=\"title class_\">CommitContext</span>)) === <span class=\"title class_\">NoContext</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Should not already be working.&#x27;</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> finishedWork = root.<span class=\"property\">finishedWork</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> expirationTime = root.<span class=\"property\">finishedExpirationTime</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishedWork === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.<span class=\"property\">finishedWork</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    root.<span class=\"property\">finishedExpirationTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">        finishedWork !== root.<span class=\"property\">current</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Cannot commit the same tree as before. This error is likely caused by &#x27;</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;a bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// commitRoot never returns a continuation; it always finishes synchronously.</span></span><br><span class=\"line\">    <span class=\"comment\">// So we can clear these now to allow a new callback to be scheduled.</span></span><br><span class=\"line\">    root.<span class=\"property\">callbackNode</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    root.<span class=\"property\">callbackExpirationTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">startCommitTimer</span>(); <span class=\"comment\">//  也算是__DEV__</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update the first and last pending times on this root. The new first</span></span><br><span class=\"line\">    <span class=\"comment\">// pending time is whatever is left on the root fiber.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updateExpirationTimeBeforeCommit = finishedWork.<span class=\"property\">expirationTime</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> childExpirationTimeBeforeCommit = finishedWork.<span class=\"property\">childExpirationTime</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> firstPendingTimeBeforeCommit =</span><br><span class=\"line\">        childExpirationTimeBeforeCommit &gt; updateExpirationTimeBeforeCommit</span><br><span class=\"line\">            ? childExpirationTimeBeforeCommit</span><br><span class=\"line\">            : updateExpirationTimeBeforeCommit;</span><br><span class=\"line\">    root.<span class=\"property\">firstPendingTime</span> = firstPendingTimeBeforeCommit;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstPendingTimeBeforeCommit &lt; root.<span class=\"property\">lastPendingTime</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This usually means we&#x27;ve finished all the work, but it can also happen</span></span><br><span class=\"line\">        <span class=\"comment\">// when something gets downprioritized during render, like a hidden tree.</span></span><br><span class=\"line\">        root.<span class=\"property\">lastPendingTime</span> = firstPendingTimeBeforeCommit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === workInProgressRoot) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We can reset these now that they are finished.</span></span><br><span class=\"line\">        workInProgressRoot = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        workInProgress = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        renderExpirationTime = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 超时？这里复制过来就是没代码的，只有注释</span></span><br><span class=\"line\">        <span class=\"comment\">// This indicates that the last root we worked on is not the same one that</span></span><br><span class=\"line\">        <span class=\"comment\">// we&#x27;re committing now. This most commonly happens when a suspended root</span></span><br><span class=\"line\">        <span class=\"comment\">// times out.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get the list of effects.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> firstEffect;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (finishedWork.<span class=\"property\">effectTag</span> &gt; <span class=\"title class_\">PerformedWork</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A fiber&#x27;s effect list consists only of its children, not itself. So if</span></span><br><span class=\"line\">        <span class=\"comment\">// the root has an effect, we need to add it to the end of the list. The</span></span><br><span class=\"line\">        <span class=\"comment\">// resulting list is the set that would belong to the root&#x27;s parent, if it</span></span><br><span class=\"line\">        <span class=\"comment\">// had one; that is, all the effects in the tree including the root.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (finishedWork.<span class=\"property\">lastEffect</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            finishedWork.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = finishedWork;</span><br><span class=\"line\">            firstEffect = finishedWork.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            firstEffect = finishedWork;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// There is no effect on the root.</span></span><br><span class=\"line\">        firstEffect = finishedWork.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstEffect !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prevExecutionContext = executionContext;</span><br><span class=\"line\">        executionContext |= <span class=\"title class_\">CommitContext</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">prevInteractions</span>: <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">Interaction</span>&gt; | <span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enableSchedulerTracing) &#123;</span><br><span class=\"line\">            prevInteractions = __interactionsRef.<span class=\"property\">current</span>;</span><br><span class=\"line\">            __interactionsRef.<span class=\"property\">current</span> = root.<span class=\"property\">memoizedInteractions</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Reset this to null before calling lifecycles</span></span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentOwner</span>.<span class=\"property\">current</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The commit phase is broken into several sub-phases. We do a separate pass</span></span><br><span class=\"line\">        <span class=\"comment\">// of the effect list for each phase: all mutation effects come before all</span></span><br><span class=\"line\">        <span class=\"comment\">// layout effects, and so on.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// commit阶段</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The first phase a &quot;before mutation&quot; phase. We use this phase to read the</span></span><br><span class=\"line\">        <span class=\"comment\">// state of the host tree right before we mutate it. This is where</span></span><br><span class=\"line\">        <span class=\"comment\">// getSnapshotBeforeUpdate is called.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 第一个阶段，不知道在做什么，和snapshot有关</span></span><br><span class=\"line\">        <span class=\"title function_\">startCommitSnapshotEffectsTimer</span>(); <span class=\"comment\">// false</span></span><br><span class=\"line\">        <span class=\"title function_\">prepareForCommit</span>(root.<span class=\"property\">containerInfo</span>); <span class=\"comment\">// 准备</span></span><br><span class=\"line\">        nextEffect = firstEffect;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ...</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">commitBeforeMutationEffects</span>();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">invariant</span>(nextEffect !== <span class=\"literal\">null</span>, <span class=\"string\">&#x27;Should be working on an effect.&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"title function_\">captureCommitPhaseError</span>(nextEffect, error);</span><br><span class=\"line\">                    nextEffect = nextEffect.<span class=\"property\">nextEffect</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (nextEffect !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"title function_\">stopCommitSnapshotEffectsTimer</span>(); <span class=\"comment\">// false__DEV__</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enableProfilerTimer) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// false</span></span><br><span class=\"line\">            <span class=\"comment\">// Mark the current commit time to be shared by all Profilers in this</span></span><br><span class=\"line\">            <span class=\"comment\">// batch. This enables them to be grouped later.</span></span><br><span class=\"line\">            <span class=\"title function_\">recordCommitTime</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The next phase is the mutation phase, where we mutate the host tree.</span></span><br><span class=\"line\">        <span class=\"title function_\">startCommitHostEffectsTimer</span>(); <span class=\"comment\">// false__DEV__</span></span><br><span class=\"line\">        <span class=\"comment\">// 第二个阶段</span></span><br><span class=\"line\">        nextEffect = firstEffect;</span><br><span class=\"line\">        <span class=\"comment\">// debugger;</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ...</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">commitMutationEffects</span>(); <span class=\"comment\">// 渲染dom</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">invariant</span>(nextEffect !== <span class=\"literal\">null</span>, <span class=\"string\">&#x27;Should be working on an effect.&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"title function_\">captureCommitPhaseError</span>(nextEffect, error);</span><br><span class=\"line\">                    nextEffect = nextEffect.<span class=\"property\">nextEffect</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (nextEffect !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"title function_\">stopCommitHostEffectsTimer</span>(); <span class=\"comment\">// false</span></span><br><span class=\"line\">        <span class=\"title function_\">resetAfterCommit</span>(root.<span class=\"property\">containerInfo</span>); <span class=\"comment\">// 重置一些数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The work-in-progress tree is now the current tree. This must come after</span></span><br><span class=\"line\">        <span class=\"comment\">// the mutation phase, so that the previous tree is still current during</span></span><br><span class=\"line\">        <span class=\"comment\">// componentWillUnmount, but before the layout phase, so that the finished</span></span><br><span class=\"line\">        <span class=\"comment\">// work is current during componentDidMount/Update.</span></span><br><span class=\"line\">        root.<span class=\"property\">current</span> = finishedWork;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The next phase is the layout phase, where we call effects that read</span></span><br><span class=\"line\">        <span class=\"comment\">// the host tree after it&#x27;s been mutated. The idiomatic use case for this is</span></span><br><span class=\"line\">        <span class=\"comment\">// layout, but class component lifecycles also fire here for legacy reasons.</span></span><br><span class=\"line\">        <span class=\"title function_\">startCommitLifeCyclesTimer</span>(); <span class=\"comment\">// false</span></span><br><span class=\"line\">        nextEffect = firstEffect;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ...</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// debugger</span></span><br><span class=\"line\">                    <span class=\"comment\">// 生命周期和ref</span></span><br><span class=\"line\">                    <span class=\"title function_\">commitLayoutEffects</span>(root, expirationTime);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">invariant</span>(nextEffect !== <span class=\"literal\">null</span>, <span class=\"string\">&#x27;Should be working on an effect.&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"title function_\">captureCommitPhaseError</span>(nextEffect, error);</span><br><span class=\"line\">                    nextEffect = nextEffect.<span class=\"property\">nextEffect</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (nextEffect !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"title function_\">stopCommitLifeCyclesTimer</span>(); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        nextEffect = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enableSchedulerTracing) &#123;</span><br><span class=\"line\">            __interactionsRef.<span class=\"property\">current</span> = ((<span class=\"attr\">prevInteractions</span>: any): <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">Interaction</span>&gt;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        executionContext = prevExecutionContext;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// No effects.</span></span><br><span class=\"line\">        root.<span class=\"property\">current</span> = finishedWork;</span><br><span class=\"line\">        <span class=\"comment\">// Measure these anyway so the flamegraph explicitly shows that there were</span></span><br><span class=\"line\">        <span class=\"comment\">// no effects.</span></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Maybe there&#x27;s a better way to report this.</span></span><br><span class=\"line\">        <span class=\"title function_\">startCommitSnapshotEffectsTimer</span>();</span><br><span class=\"line\">        <span class=\"title function_\">stopCommitSnapshotEffectsTimer</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enableProfilerTimer) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">recordCommitTime</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">startCommitHostEffectsTimer</span>();</span><br><span class=\"line\">        <span class=\"title function_\">stopCommitHostEffectsTimer</span>();</span><br><span class=\"line\">        <span class=\"title function_\">startCommitLifeCyclesTimer</span>();</span><br><span class=\"line\">        <span class=\"title function_\">stopCommitLifeCyclesTimer</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">stopCommitTimer</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rootDidHavePassiveEffects = rootDoesHavePassiveEffects;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootDoesHavePassiveEffects) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This commit has passive effects. Stash a reference to them. But don&#x27;t</span></span><br><span class=\"line\">        <span class=\"comment\">// schedule a callback until after flushing layout work.</span></span><br><span class=\"line\">        rootDoesHavePassiveEffects = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        rootWithPendingPassiveEffects = root;</span><br><span class=\"line\">        pendingPassiveEffectsExpirationTime = expirationTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if there&#x27;s remaining work on this root</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> remainingExpirationTime = root.<span class=\"property\">firstPendingTime</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remainingExpirationTime !== <span class=\"title class_\">NoWork</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentTime = <span class=\"title function_\">requestCurrentTime</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> priorityLevel = <span class=\"title function_\">inferPriorityFromExpirationTime</span>(currentTime, remainingExpirationTime);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enableSchedulerTracing) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (didDeprioritizeIdleSubtree) &#123;</span><br><span class=\"line\">                didDeprioritizeIdleSubtree = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"title function_\">scheduleInteractions</span>(root, <span class=\"title class_\">Never</span>, root.<span class=\"property\">memoizedInteractions</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 到这, DidMount已执行</span></span><br><span class=\"line\">        <span class=\"comment\">// debugger;</span></span><br><span class=\"line\">        <span class=\"title function_\">scheduleCallbackForRoot</span>(root, priorityLevel, remainingExpirationTime);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If there&#x27;s no remaining work, we can clear the set of already failed</span></span><br><span class=\"line\">        <span class=\"comment\">// error boundaries.</span></span><br><span class=\"line\">        legacyErrorBoundariesThatAlreadyFailed = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enableSchedulerTracing) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!rootDidHavePassiveEffects) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If there are no passive effects, then we can complete the pending interactions.</span></span><br><span class=\"line\">            <span class=\"comment\">// Otherwise, we&#x27;ll wait until after the passive effects are flushed.</span></span><br><span class=\"line\">            <span class=\"comment\">// Wait to do this until after remaining work has been scheduled,</span></span><br><span class=\"line\">            <span class=\"comment\">// so that we don&#x27;t prematurely signal complete for interactions when there&#x27;s e.g. hidden work.</span></span><br><span class=\"line\">            <span class=\"title function_\">finishPendingInteractions</span>(root, expirationTime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">onCommitRoot</span>(finishedWork.<span class=\"property\">stateNode</span>, expirationTime); <span class=\"comment\">// 里面应该是dev-tool的处理，先不看</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (remainingExpirationTime === <span class=\"title class_\">Sync</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Count the number of times the root synchronously re-renders without</span></span><br><span class=\"line\">        <span class=\"comment\">// finishing. If there are too many, it indicates an infinite update loop.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root === rootWithNestedUpdates) &#123;</span><br><span class=\"line\">            nestedUpdateCount++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            nestedUpdateCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">            rootWithNestedUpdates = root;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        nestedUpdateCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasUncaughtError) &#123;</span><br><span class=\"line\">        hasUncaughtError = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> error = firstUncaughtError;</span><br><span class=\"line\">        firstUncaughtError = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((executionContext &amp; <span class=\"title class_\">LegacyUnbatchedContext</span>) !== <span class=\"title class_\">NoContext</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is a legacy edge case. We just committed the initial mount of</span></span><br><span class=\"line\">        <span class=\"comment\">// a ReactDOM.render-ed root inside of batchedUpdates. The commit fired</span></span><br><span class=\"line\">        <span class=\"comment\">// synchronously, but layout updates should be deferred until the end</span></span><br><span class=\"line\">        <span class=\"comment\">// of the batch.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If layout work was scheduled, flush it now.</span></span><br><span class=\"line\">    <span class=\"title function_\">flushSyncCallbackQueue</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"prepareforcommit\"><a class=\"markdownIt-Anchor\" href=\"#prepareforcommit\">#</a> prepareForCommit</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">prepareForCommit</span>(<span class=\"params\">containerInfo: Container</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    eventsEnabled = <span class=\"title class_\">ReactBrowserEventEmitterIsEnabled</span>(); <span class=\"comment\">// 启用 _enabled</span></span><br><span class=\"line\">    selectionInformation = <span class=\"title function_\">getSelectionInformation</span>(); <span class=\"comment\">// 获取当前activeElement, 现在是body</span></span><br><span class=\"line\">    <span class=\"title class_\">ReactBrowserEventEmitterSetEnabled</span>(<span class=\"literal\">false</span>); <span class=\"comment\">// 设为false, 对应上上 _enabled = false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"commitmutationeffects\"><a class=\"markdownIt-Anchor\" href=\"#commitmutationeffects\">#</a> commitMutationEffects</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitMutationEffects</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Should probably move the bulk of this function to commitWork.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nextEffect !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setCurrentDebugFiberInDEV</span>(nextEffect); <span class=\"comment\">// __DEV__</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> effectTag = nextEffect.<span class=\"property\">effectTag</span>; <span class=\"comment\">// 将要执行的步骤状态</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (effectTag &amp; <span class=\"title class_\">ContentReset</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">commitResetTextContent</span>(nextEffect);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (effectTag &amp; <span class=\"title class_\">Ref</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> current = nextEffect.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">commitDetachRef</span>(current);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The following switch statement is only concerned about placement,</span></span><br><span class=\"line\">        <span class=\"comment\">// updates, and deletions. To avoid needing to add a case for every possible</span></span><br><span class=\"line\">        <span class=\"comment\">// bitmap value, we remove the secondary effects from the effect tag and</span></span><br><span class=\"line\">        <span class=\"comment\">// switch on that value.</span></span><br><span class=\"line\">        <span class=\"comment\">// 新增 or 更新 or 删除</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> primaryEffectTag = effectTag &amp; (<span class=\"title class_\">Placement</span> | <span class=\"title class_\">Update</span> | <span class=\"title class_\">Deletion</span>); <span class=\"comment\">// (2 | 4 | 8)</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (primaryEffectTag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">Placement</span>: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// debugger</span></span><br><span class=\"line\">                <span class=\"title function_\">commitPlacement</span>(nextEffect);</span><br><span class=\"line\">                <span class=\"comment\">// Clear the &quot;placement&quot; from effect tag so that we know that this is</span></span><br><span class=\"line\">                <span class=\"comment\">// inserted, before any life-cycles like componentDidMount gets called.</span></span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> findDOMNode doesn&#x27;t rely on this any more but isMounted does</span></span><br><span class=\"line\">                <span class=\"comment\">// and isMounted is deprecated anyway so we should be able to kill this.</span></span><br><span class=\"line\">                nextEffect.<span class=\"property\">effectTag</span> &amp;= ~<span class=\"title class_\">Placement</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">PlacementAndUpdate</span>: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 6</span></span><br><span class=\"line\">                <span class=\"comment\">// Placement</span></span><br><span class=\"line\">                <span class=\"title function_\">commitPlacement</span>(nextEffect); <span class=\"comment\">// 插入dom</span></span><br><span class=\"line\">                <span class=\"comment\">// Clear the &quot;placement&quot; from effect tag so that we know that this is</span></span><br><span class=\"line\">                <span class=\"comment\">// inserted, before any life-cycles like componentDidMount gets called.</span></span><br><span class=\"line\">                nextEffect.<span class=\"property\">effectTag</span> &amp;= ~<span class=\"title class_\">Placement</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Update</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> current = nextEffect.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">                <span class=\"title function_\">commitWork</span>(current, nextEffect);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">Update</span>: &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> current = nextEffect.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">                <span class=\"title function_\">commitWork</span>(current, nextEffect);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">Deletion</span>: &#123;</span><br><span class=\"line\">                <span class=\"title function_\">commitDeletion</span>(nextEffect);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Only record a mutation effect if primaryEffectTag is non-zero.</span></span><br><span class=\"line\">        <span class=\"title function_\">recordEffect</span>(); <span class=\"comment\">// __DEV__</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">resetCurrentDebugFiberInDEV</span>(); <span class=\"comment\">// __DEV__</span></span><br><span class=\"line\">        nextEffect = nextEffect.<span class=\"property\">nextEffect</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"commitwork\"><a class=\"markdownIt-Anchor\" href=\"#commitwork\">#</a> commitWork</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitWork</span>(<span class=\"params\">current: Fiber | <span class=\"literal\">null</span>, finishedWork: Fiber</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (finishedWork.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">FunctionComponent</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ForwardRef</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">MemoComponent</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">SimpleMemoComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Note: We currently never use MountMutation, but useLayout uses</span></span><br><span class=\"line\">            <span class=\"comment\">// UnmountMutation.</span></span><br><span class=\"line\">            <span class=\"title function_\">commitHookEffectList</span>(<span class=\"title class_\">UnmountMutation</span>, <span class=\"title class_\">MountMutation</span>, finishedWork);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ClassComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"attr\">instance</span>: <span class=\"title class_\">Instance</span> = finishedWork.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instance != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Commit the work prepared earlier.</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> newProps = finishedWork.<span class=\"property\">memoizedProps</span>;</span><br><span class=\"line\">                <span class=\"comment\">// For hydration we reuse the update path but we treat the oldProps</span></span><br><span class=\"line\">                <span class=\"comment\">// as the newProps. The updatePayload will contain the real change in</span></span><br><span class=\"line\">                <span class=\"comment\">// this case.</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> oldProps = current !== <span class=\"literal\">null</span> ? current.<span class=\"property\">memoizedProps</span> : newProps;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> type = finishedWork.<span class=\"property\">type</span>;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Type the updateQueue to be specific to host components.</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"attr\">updatePayload</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">UpdatePayload</span> = (finishedWork.<span class=\"property\">updateQueue</span>: any);</span><br><span class=\"line\">                finishedWork.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 更新</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (updatePayload !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">commitUpdate</span>(instance, updatePayload, type, oldProps, newProps, finishedWork);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostText</span>: &#123;</span><br><span class=\"line\">            <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">                finishedWork.<span class=\"property\">stateNode</span> !== <span class=\"literal\">null</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;This should have a text node initialized. This error is likely &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;caused by a bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"attr\">textInstance</span>: <span class=\"title class_\">TextInstance</span> = finishedWork.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"attr\">newText</span>: string = finishedWork.<span class=\"property\">memoizedProps</span>;</span><br><span class=\"line\">            <span class=\"comment\">// For hydration we reuse the update path but we treat the oldProps</span></span><br><span class=\"line\">            <span class=\"comment\">// as the newProps. The updatePayload will contain the real change in</span></span><br><span class=\"line\">            <span class=\"comment\">// this case.</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"attr\">oldText</span>: string = current !== <span class=\"literal\">null</span> ? current.<span class=\"property\">memoizedProps</span> : newText;</span><br><span class=\"line\">            <span class=\"title function_\">commitTextUpdate</span>(textInstance, oldText, newText);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">EventTarget</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostRoot</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">Profiler</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">SuspenseComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"title function_\">commitSuspenseComponent</span>(finishedWork);</span><br><span class=\"line\">            <span class=\"title function_\">attachSuspenseRetryListeners</span>(finishedWork);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">SuspenseListComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"title function_\">attachSuspenseRetryListeners</span>(finishedWork);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">IncompleteClassComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">EventComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">            <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">                <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;This unit of work tag should not have side-effects. This error is &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;likely caused by a bug in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"commithookeffectlist\"><a class=\"markdownIt-Anchor\" href=\"#commithookeffectlist\">#</a> commitHookEffectList</h3>\n<p>见  <code>hooks.md</code>  -&gt;  <code>useeffect</code> -&gt;  <code>commitHookEffectList</code></p>\n<h3 id=\"commitplacement\"><a class=\"markdownIt-Anchor\" href=\"#commitplacement\">#</a> commitPlacement</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitPlacement</span>(<span class=\"params\">finishedWork: Fiber</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!supportsMutation) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// supportsMutation固定true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Recursively insert all host nodes into the parent.</span></span><br><span class=\"line\">    <span class=\"comment\">// 递归获得父节点fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> parentFiber = <span class=\"title function_\">getHostParentFiber</span>(finishedWork);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Note: these two variables *must* always be updated together.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> parent;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (parentFiber.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostComponent</span>:</span><br><span class=\"line\">            parent = parentFiber.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">            isContainer = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostRoot</span>:</span><br><span class=\"line\">            parent = parentFiber.<span class=\"property\">stateNode</span>.<span class=\"property\">containerInfo</span>; <span class=\"comment\">// dom</span></span><br><span class=\"line\">            isContainer = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostPortal</span>:</span><br><span class=\"line\">            parent = parentFiber.<span class=\"property\">stateNode</span>.<span class=\"property\">containerInfo</span>;</span><br><span class=\"line\">            isContainer = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">            <span class=\"title function_\">invariant</span>(</span><br><span class=\"line\">                <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;Invalid host parent fiber. This error is likely caused by a bug &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;in React. Please file an issue.&#x27;</span>,</span><br><span class=\"line\">            );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parentFiber.<span class=\"property\">effectTag</span> &amp; <span class=\"title class_\">ContentReset</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Reset the text content of the parent before doing any insertions</span></span><br><span class=\"line\">        <span class=\"title function_\">resetTextContent</span>(parent);</span><br><span class=\"line\">        <span class=\"comment\">// Clear ContentReset from the effect tag</span></span><br><span class=\"line\">        parentFiber.<span class=\"property\">effectTag</span> &amp;= ~<span class=\"title class_\">ContentReset</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> before = <span class=\"title function_\">getHostSibling</span>(finishedWork); <span class=\"comment\">// 复用情况下找到下一个相邻节点</span></span><br><span class=\"line\">    <span class=\"comment\">// We only have the top Fiber that was inserted but we need to recurse down its</span></span><br><span class=\"line\">    <span class=\"comment\">// children to find all the terminal nodes.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">node</span>: <span class=\"title class_\">Fiber</span> = finishedWork;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.<span class=\"property\">tag</span> === <span class=\"title class_\">HostComponent</span> || node.<span class=\"property\">tag</span> === <span class=\"title class_\">HostText</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> stateNode = node.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (before) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果有相邻节点，插在前面</span></span><br><span class=\"line\">                <span class=\"comment\">// 这里都是插在before前面</span></span><br><span class=\"line\">                <span class=\"comment\">// 区别是insertInContainerBefore里面判断了parent是不是COMMENT_NODE</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isContainer) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">insertInContainerBefore</span>(parent, stateNode, before);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">insertBefore</span>(parent, stateNode, before);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 都是parent.appendChild(stateNode)</span></span><br><span class=\"line\">                <span class=\"comment\">// 区别同上</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isContainer) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">appendChildToContainer</span>(parent, stateNode);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">appendChild</span>(parent, stateNode);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">tag</span> === <span class=\"title class_\">HostPortal</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If the insertion itself is a portal, then we don&#x27;t want to traverse</span></span><br><span class=\"line\">            <span class=\"comment\">// down its children. Instead, we&#x27;ll get insertions from each child in</span></span><br><span class=\"line\">            <span class=\"comment\">// the portal directly.</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">child</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            node.<span class=\"property\">child</span>.<span class=\"property\">return</span> = node;</span><br><span class=\"line\">            node = node.<span class=\"property\">child</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node === finishedWork) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node.<span class=\"property\">sibling</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.<span class=\"property\">return</span> === <span class=\"literal\">null</span> || node.<span class=\"property\">return</span> === finishedWork) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = node.<span class=\"property\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.<span class=\"property\">sibling</span>.<span class=\"property\">return</span> = node.<span class=\"property\">return</span>;</span><br><span class=\"line\">        node = node.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"commitlayouteffects\"><a class=\"markdownIt-Anchor\" href=\"#commitlayouteffects\">#</a> commitLayoutEffects</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitLayoutEffects</span>(<span class=\"params\">root: FiberRoot, committedExpirationTime: ExpirationTime</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期和ref</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Should probably move the bulk of this function to commitWork.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nextEffect !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setCurrentDebugFiberInDEV</span>(nextEffect); <span class=\"comment\">// dev</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> effectTag = nextEffect.<span class=\"property\">effectTag</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (effectTag &amp; (<span class=\"title class_\">Update</span> | <span class=\"title class_\">Callback</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">recordEffect</span>(); <span class=\"comment\">// false</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> current = nextEffect.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">            <span class=\"title function_\">commitLayoutEffectOnFiber</span>(</span><br><span class=\"line\">                <span class=\"comment\">// componentDidUpdate</span></span><br><span class=\"line\">                root,</span><br><span class=\"line\">                current,</span><br><span class=\"line\">                nextEffect,</span><br><span class=\"line\">                committedExpirationTime,</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (effectTag &amp; <span class=\"title class_\">Ref</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">recordEffect</span>(); <span class=\"comment\">// false</span></span><br><span class=\"line\">            <span class=\"title function_\">commitAttachRef</span>(nextEffect);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (effectTag &amp; <span class=\"title class_\">Passive</span>) &#123;</span><br><span class=\"line\">            rootDoesHavePassiveEffects = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">resetCurrentDebugFiberInDEV</span>();</span><br><span class=\"line\">        nextEffect = nextEffect.<span class=\"property\">nextEffect</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"commitlifecycles\"><a class=\"markdownIt-Anchor\" href=\"#commitlifecycles\">#</a> commitLifeCycles</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitLifeCycles</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    finishedRoot: FiberRoot,</span></span><br><span class=\"line\"><span class=\"params\">    current: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    finishedWork: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    committedExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (finishedWork.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">FunctionComponent</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ForwardRef</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">SimpleMemoComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"title function_\">commitHookEffectList</span>(<span class=\"title class_\">UnmountLayout</span>, <span class=\"title class_\">MountLayout</span>, finishedWork);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ClassComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> instance = finishedWork.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (finishedWork.<span class=\"property\">effectTag</span> &amp; <span class=\"title class_\">Update</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">startPhaseTimer</span>(finishedWork, <span class=\"string\">&#x27;componentDidMount&#x27;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\">                    <span class=\"comment\">// We could update instance props and state here,</span></span><br><span class=\"line\">                    <span class=\"comment\">// but instead we rely on them being set during last render.</span></span><br><span class=\"line\">                    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> revisit this when we implement resuming.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// debugger</span></span><br><span class=\"line\">                    instance.<span class=\"title function_\">componentDidMount</span>(); <span class=\"comment\">// 生命周期</span></span><br><span class=\"line\">                    <span class=\"title function_\">stopPhaseTimer</span>(); <span class=\"comment\">// false</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> prevProps =</span><br><span class=\"line\">                        finishedWork.<span class=\"property\">elementType</span> === finishedWork.<span class=\"property\">type</span></span><br><span class=\"line\">                            ? current.<span class=\"property\">memoizedProps</span></span><br><span class=\"line\">                            : <span class=\"title function_\">resolveDefaultProps</span>(finishedWork.<span class=\"property\">type</span>, current.<span class=\"property\">memoizedProps</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> prevState = current.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">                    <span class=\"title function_\">startPhaseTimer</span>(finishedWork, <span class=\"string\">&#x27;componentDidUpdate&#x27;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// We could update instance props and state here,</span></span><br><span class=\"line\">                    <span class=\"comment\">// but instead we rely on them being set during last render.</span></span><br><span class=\"line\">                    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> revisit this when we implement resuming.</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    instance.<span class=\"title function_\">componentDidUpdate</span>(</span><br><span class=\"line\">                        prevProps,</span><br><span class=\"line\">                        prevState,</span><br><span class=\"line\">                        instance.<span class=\"property\">__reactInternalSnapshotBeforeUpdate</span>,</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                    <span class=\"title function_\">stopPhaseTimer</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> updateQueue = finishedWork.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (updateQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// We could update instance props and state here,</span></span><br><span class=\"line\">                <span class=\"comment\">// but instead we rely on them being set during last render.</span></span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> revisit this when we implement resuming.</span></span><br><span class=\"line\">                <span class=\"title function_\">commitUpdateQueue</span>(finishedWork, updateQueue, instance, committedExpirationTime);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostRoot</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> updateQueue = finishedWork.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (updateQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (finishedWork.<span class=\"property\">child</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (finishedWork.<span class=\"property\">child</span>.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"title class_\">HostComponent</span>:</span><br><span class=\"line\">                            instance = <span class=\"title function_\">getPublicInstance</span>(finishedWork.<span class=\"property\">child</span>.<span class=\"property\">stateNode</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> <span class=\"title class_\">ClassComponent</span>:</span><br><span class=\"line\">                            instance = finishedWork.<span class=\"property\">child</span>.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"title function_\">commitUpdateQueue</span>(finishedWork, updateQueue, instance, committedExpirationTime);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"attr\">instance</span>: <span class=\"title class_\">Instance</span> = finishedWork.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Renderers may schedule work to be done after host components are mounted</span></span><br><span class=\"line\">            <span class=\"comment\">// (eg DOM renderer may schedule auto-focus for inputs and form controls).</span></span><br><span class=\"line\">            <span class=\"comment\">// These effects should only be committed when components are first mounted,</span></span><br><span class=\"line\">            <span class=\"comment\">// aka when there is no current/alternate.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span> &amp;&amp; finishedWork.<span class=\"property\">effectTag</span> &amp; <span class=\"title class_\">Update</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> type = finishedWork.<span class=\"property\">type</span>;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> props = finishedWork.<span class=\"property\">memoizedProps</span>;</span><br><span class=\"line\">                <span class=\"title function_\">commitMount</span>(instance, type, props, finishedWork);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostText</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// We have no life-cycles associated with text.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostPortal</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// We have no life-cycles associated with portals.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">Profiler</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">SuspenseComponent</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">SuspenseListComponent</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">IncompleteClassComponent</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">EventTarget</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">EventComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (enableEventAPI) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">mountEventComponent</span>(finishedWork.<span class=\"property\">stateNode</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/08/react/fiber/",
            "url": "http://example.com/2020/09/08/react/fiber/",
            "title": "fiber",
            "date_published": "2020-09-08T06:00:00.000Z",
            "content_html": "<p>从  <code>ReactSyncRoot</code>  开始</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dom, 0, false</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">createContainer</span>(container, tag, hydrate); <span class=\"comment\">// FiberRootNode</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_internalRoot</span> = root;</span><br></pre></td></tr></table></figure>\n<p><code>createContainer</code>  在 <code>react-reconciler/inline.dom</code> , 引用的 <code>./src/ReactFiberReconciler</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createContainer</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    containerInfo: Container,</span></span><br><span class=\"line\"><span class=\"params\">    tag: RootTag,</span></span><br><span class=\"line\"><span class=\"params\">    hydrate: boolean,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">OpaqueRoot</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建fiberroot</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">createFiberRoot</span>(containerInfo, tag, hydrate);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo: any, tag: RootTag, hydrate: boolean</span>): <span class=\"title class_\">FiberRoot</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建fiber对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">root</span>: <span class=\"title class_\">FiberRoot</span> = (<span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo, tag, hydrate): any);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Cyclic construction. This cheats the type system right now because</span></span><br><span class=\"line\">    <span class=\"comment\">// stateNode is any.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> uninitializedFiber = <span class=\"title function_\">createHostRootFiber</span>(tag);</span><br><span class=\"line\">    root.<span class=\"property\">current</span> = uninitializedFiber;</span><br><span class=\"line\">    uninitializedFiber.<span class=\"property\">stateNode</span> = root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建 <code>FiberRoot</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在其他文件定义的常量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NoWork</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> noTimeout = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面有注释</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberRootNode</span>(<span class=\"params\">containerInfo, tag, hydrate</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">current</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">containerInfo</span> = containerInfo;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pendingChildren</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pingCache</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">finishedExpirationTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">finishedWork</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">timeoutHandle</span> = noTimeout; <span class=\"comment\">// -1</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">context</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pendingContext</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">hydrate</span> = hydrate;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">firstBatch</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">callbackNode</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">callbackExpirationTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">firstPendingTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lastPendingTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pingTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// false 无视</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (enableSchedulerTracing) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">interactionThreadID</span> = <span class=\"title function_\">unstable_getThreadID</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedInteractions</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">pendingInteractionMap</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>BaseFiberRootProperties</code>  中有相关注释</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">BaseFiberRootProperties</span> = &#123;|</span><br><span class=\"line\">    <span class=\"comment\">// The type of root (legacy, batched, concurrent, etc.)</span></span><br><span class=\"line\">    <span class=\"comment\">// 类型0或1或2</span></span><br><span class=\"line\">    <span class=\"attr\">tag</span>: <span class=\"title class_\">RootTag</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Any additional information from the host associated with this root.</span></span><br><span class=\"line\">    <span class=\"comment\">// 根节点挂载元素</span></span><br><span class=\"line\">    <span class=\"attr\">containerInfo</span>: any,</span><br><span class=\"line\">    <span class=\"comment\">// Used only by persistent updates.</span></span><br><span class=\"line\">    <span class=\"attr\">pendingChildren</span>: any,</span><br><span class=\"line\">    <span class=\"comment\">// The currently active root fiber. This is the mutable root of the tree.</span></span><br><span class=\"line\">    <span class=\"attr\">current</span>: <span class=\"title class_\">Fiber</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">pingCache</span>: <span class=\"title class_\">WeakMap</span>&lt;<span class=\"title class_\">Thenable</span>, <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">ExpirationTime</span>&gt;&gt; | <span class=\"title class_\">Map</span>&lt;<span class=\"title class_\">Thenable</span>, <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">ExpirationTime</span>&gt;&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">finishedExpirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">    <span class=\"comment\">// A finished work-in-progress HostRoot that&#x27;s ready to be committed.</span></span><br><span class=\"line\">    <span class=\"attr\">finishedWork</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// Timeout handle returned by setTimeout. Used to cancel a pending timeout, if</span></span><br><span class=\"line\">    <span class=\"comment\">// it&#x27;s superseded by a new one.</span></span><br><span class=\"line\">    <span class=\"attr\">timeoutHandle</span>: <span class=\"title class_\">TimeoutHandle</span> | <span class=\"title class_\">NoTimeout</span>,</span><br><span class=\"line\">    <span class=\"comment\">// Top context object, used by renderSubtreeIntoContainer</span></span><br><span class=\"line\">    <span class=\"attr\">context</span>: <span class=\"title class_\">Object</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">pendingContext</span>: <span class=\"title class_\">Object</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// Determines if we should attempt to hydrate on the initial mount</span></span><br><span class=\"line\">    +<span class=\"attr\">hydrate</span>: boolean,</span><br><span class=\"line\">    <span class=\"comment\">// List of top-level batches. This list indicates whether a commit should be</span></span><br><span class=\"line\">    <span class=\"comment\">// deferred. Also contains completion callbacks.</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Lift this into the renderer</span></span><br><span class=\"line\">    <span class=\"attr\">firstBatch</span>: <span class=\"title class_\">Batch</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// Node returned by Scheduler.scheduleCallback</span></span><br><span class=\"line\">    <span class=\"attr\">callbackNode</span>: *,</span><br><span class=\"line\">    <span class=\"comment\">// Expiration of the callback associated with this root</span></span><br><span class=\"line\">    <span class=\"attr\">callbackExpirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">    <span class=\"comment\">// The earliest pending expiration time that exists in the tree</span></span><br><span class=\"line\">    <span class=\"attr\">firstPendingTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">    <span class=\"comment\">// The latest pending expiration time that exists in the tree</span></span><br><span class=\"line\">    <span class=\"attr\">lastPendingTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">    <span class=\"comment\">// The time at which a suspended component pinged the root to render again</span></span><br><span class=\"line\">    <span class=\"attr\">pingTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">|&#125;;</span><br></pre></td></tr></table></figure>\n<p>创建 <code>RootFiber</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createHostRootFiber</span>(<span class=\"params\">tag: RootTag</span>): <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mode;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tag === <span class=\"title class_\">ConcurrentRoot</span>) &#123;</span><br><span class=\"line\">        mode = <span class=\"title class_\">ConcurrentMode</span> | <span class=\"title class_\">BatchedMode</span> | <span class=\"title class_\">StrictMode</span>; <span class=\"comment\">// 利用二进制特性,一个参数就能同时表示多种状态</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (tag === <span class=\"title class_\">BatchedRoot</span>) &#123;</span><br><span class=\"line\">        mode = <span class=\"title class_\">BatchedMode</span> | <span class=\"title class_\">StrictMode</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        mode = <span class=\"title class_\">NoMode</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3, null, null, 0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">createFiber</span>(<span class=\"title class_\">HostRoot</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, mode);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FiberNode</span>(<span class=\"params\">tag: WorkTag, pendingProps: mixed, key: <span class=\"literal\">null</span> | string, mode: TypeOfMode</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Instance</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag; <span class=\"comment\">// 标记不同的组件类型 3</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key; <span class=\"comment\">// ReactElement里面的key null</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">elementType</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// ReactElement.type，也就是我们调用`createElement`的第一个参数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 异步组件resolved之后返回的内容，一般是`function`或者`class`</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stateNode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 跟当前Fiber相关本地状态（比如浏览器环境就是DOM节点）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Fiber</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">return</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">child</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 单链表树结构 指向自己的第一个子节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sibling</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 指向自己的兄弟结构 兄弟节点的return指向同一个父节点</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">index</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ref</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// ref属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pendingProps</span> = pendingProps; <span class=\"comment\">// 新的变动带来的新的props</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedProps</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 上一次渲染完成之后的props</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">updateQueue</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 该Fiber对应的组件产生的Update会存放在这个队列里面</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">memoizedState</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 上一次渲染的时候的state</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">contextDependencies</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 一个列表，存放这个Fiber依赖的context</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 用来描述当前Fiber和他子树的`Bitfield`</span></span><br><span class=\"line\">    <span class=\"comment\">// 共存的模式表示这个子树是否默认是异步渲染的</span></span><br><span class=\"line\">    <span class=\"comment\">// Fiber被创建的时候他会继承父Fiber</span></span><br><span class=\"line\">    <span class=\"comment\">// 其他的标识也可以在创建的时候被设置</span></span><br><span class=\"line\">    <span class=\"comment\">// 但是在创建之后不应该再被修改，特别是他的子Fiber创建之前</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">mode</span> = mode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Effects</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">effectTag</span> = <span class=\"title class_\">NoEffect</span>; <span class=\"comment\">// 用来记录Side Effect</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nextEffect</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 单链表用来快速查找下一个side effect</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">firstEffect</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 子树中第一个side effect</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lastEffect</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 子树中最后一个side effect</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">expirationTime</span> = <span class=\"title class_\">NoWork</span>; <span class=\"comment\">// 代表任务在未来的哪个时间点应该被完成 不包括他的子树产生的任务</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">childExpirationTime</span> = <span class=\"title class_\">NoWork</span>; <span class=\"comment\">// 快速确定子树中是否有不在等待的变化</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在Fiber树更新的过程中，每个Fiber都会有一个跟其对应的Fiber</span></span><br><span class=\"line\">    <span class=\"comment\">// 我们称他为`current &lt;==&gt; workInProgress`</span></span><br><span class=\"line\">    <span class=\"comment\">// 在渲染完成之后他们会交换位置</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This is a constructor function, rather than a POJO constructor, still</span></span><br><span class=\"line\"><span class=\"comment\">// please ensure we do the following:</span></span><br><span class=\"line\"><span class=\"comment\">// 1) Nobody should add any instance methods on this. Instance methods can be</span></span><br><span class=\"line\"><span class=\"comment\">//    more difficult to predict when they get optimized and they are almost</span></span><br><span class=\"line\"><span class=\"comment\">//    never inlined properly in static compilers.</span></span><br><span class=\"line\"><span class=\"comment\">// 2) Nobody should rely on `instanceof Fiber` for type testing. We should</span></span><br><span class=\"line\"><span class=\"comment\">//    always know when it is a fiber.</span></span><br><span class=\"line\"><span class=\"comment\">// 3) We might want to experiment with using numeric keys since they are easier</span></span><br><span class=\"line\"><span class=\"comment\">//    to optimize in a non-JIT environment.</span></span><br><span class=\"line\"><span class=\"comment\">// 4) We can easily go from a constructor to a createFiber object literal if that</span></span><br><span class=\"line\"><span class=\"comment\">//    is faster.</span></span><br><span class=\"line\"><span class=\"comment\">// 5) It should be easy to port this to a C struct and keep a C implementation</span></span><br><span class=\"line\"><span class=\"comment\">//    compatible.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> createFiber = <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    tag: WorkTag,</span></span><br><span class=\"line\"><span class=\"params\">    pendingProps: mixed,</span></span><br><span class=\"line\"><span class=\"params\">    key: <span class=\"literal\">null</span> | string,</span></span><br><span class=\"line\"><span class=\"params\">    mode: TypeOfMode,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// $FlowFixMe: the shapes are exact here but Flow doesn&#x27;t like constructors</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FiberNode</span>(tag, pendingProps, key, mode);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>之后是两个对象的互相引用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root.<span class=\"property\">current</span> = uninitializedFiber; <span class=\"comment\">// root即FiberRoot</span></span><br><span class=\"line\">uninitializedFiber.<span class=\"property\">stateNode</span> = root; <span class=\"comment\">// uninitializedFiber即RootFiber</span></span><br></pre></td></tr></table></figure>\n<p><code>FiberRoot</code>  更多的是和 dom 相关的作用<br>\n <code>RootFiber</code>  更多的是一个虚拟 dom，他也有类似 dom 的树结构，每次 react 跟新，都先处理 <code>RootFiber</code> ，然后在作用于 <code>FiberRoot</code> , 最后更新 dom</p>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/08/react/renderRoot/",
            "url": "http://example.com/2020/09/08/react/renderRoot/",
            "title": "renderRoot",
            "date_published": "2020-09-08T06:00:00.000Z",
            "content_html": "<p>构建 fiber 树和 dom 树，互相对应为参数，能互相找到，并执行了渲染前的生命周期</p>\n<h3 id=\"然后是renderroot\"><a class=\"markdownIt-Anchor\" href=\"#然后是renderroot\">#</a> 然后是 <code>renderRoot</code></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderRoot</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    root: FiberRoot,</span></span><br><span class=\"line\"><span class=\"params\">    expirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\">    isSync: boolean,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">SchedulerCallback</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.<span class=\"property\">firstPendingTime</span> &lt; expirationTime) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If there&#x27;s no work left at this expiration time, exit immediately. This</span></span><br><span class=\"line\">        <span class=\"comment\">// happens when multiple callbacks are scheduled for a single root, but an</span></span><br><span class=\"line\">        <span class=\"comment\">// earlier callback flushes the work of a later one.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在同步情况下，如果还存在待提交的处理，就先执行他</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSync &amp;&amp; root.<span class=\"property\">finishedExpirationTime</span> === expirationTime) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// false</span></span><br><span class=\"line\">        <span class=\"comment\">// There&#x27;s already a pending commit at this expiration time.</span></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> This is poorly factored. This case only exists for the</span></span><br><span class=\"line\">        <span class=\"comment\">// batch.commit() API.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> commitRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// debugger</span></span><br><span class=\"line\">    <span class=\"title function_\">flushPassiveEffects</span>(); <span class=\"comment\">// 第一次return false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If the root or expiration time have changed, throw out the existing stack</span></span><br><span class=\"line\">    <span class=\"comment\">// and prepare a fresh one. Otherwise we&#x27;ll continue where we left off.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root !== workInProgressRoot || expirationTime !== renderExpirationTime) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建备份为当前执行工作（workInProgress）</span></span><br><span class=\"line\">        <span class=\"comment\">// 给root.current创建alternate,alternate和root.current拥有相同参数，并互相为对方的alternate</span></span><br><span class=\"line\">        <span class=\"title function_\">prepareFreshStack</span>(root, expirationTime);</span><br><span class=\"line\">        <span class=\"comment\">// 执行后workInProgressRoot就等于root.current.alternate</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If we have a work-in-progress fiber, it means there&#x27;s still work to do</span></span><br><span class=\"line\">    <span class=\"comment\">// in this root.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workInProgress !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prevExecutionContext = executionContext; <span class=\"comment\">// 8 记录状态</span></span><br><span class=\"line\">        executionContext |= <span class=\"title class_\">RenderContext</span>; <span class=\"comment\">// 添加RenderContext状态</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> prevDispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prevDispatcher === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// The React isomorphic package does not include a default dispatcher.</span></span><br><span class=\"line\">            <span class=\"comment\">// Instead the first renderer will lazily attach one, in order to give</span></span><br><span class=\"line\">            <span class=\"comment\">// nicer error messages.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// ContextOnlyDispatcher错误提示对象函数</span></span><br><span class=\"line\">            <span class=\"comment\">// hooks报错函数对象</span></span><br><span class=\"line\">            prevDispatcher = <span class=\"title class_\">ContextOnlyDispatcher</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = <span class=\"title class_\">ContextOnlyDispatcher</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isSync) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 进这</span></span><br><span class=\"line\">                    <span class=\"title function_\">workLoopSync</span>();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">workLoop</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (thrownValue) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ...</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        executionContext = prevExecutionContext;</span><br><span class=\"line\">        <span class=\"title function_\">resetContextDependencies</span>(); <span class=\"comment\">// 重置context相关</span></span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentDispatcher</span>.<span class=\"property\">current</span> = prevDispatcher;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enableSchedulerTracing) &#123;</span><br><span class=\"line\">            __interactionsRef.<span class=\"property\">current</span> = ((<span class=\"attr\">prevInteractions</span>: any): <span class=\"title class_\">Set</span>&lt;<span class=\"title class_\">Interaction</span>&gt;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workInProgress !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// There&#x27;s still work left over. Return a continuation.</span></span><br><span class=\"line\">            <span class=\"title function_\">stopInterruptedWorkLoopTimer</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (expirationTime !== <span class=\"title class_\">Sync</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">startRequestCallbackTimer</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> renderRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, expirationTime);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// debugger;</span></span><br><span class=\"line\">    <span class=\"comment\">// We now have a consistent tree. The next step is either to commit it, or, if</span></span><br><span class=\"line\">    <span class=\"comment\">// something suspended, wait to commit it after a timeout.</span></span><br><span class=\"line\">    <span class=\"title function_\">stopFinishedWorkLoopTimer</span>(); <span class=\"comment\">// __DEV__ ?</span></span><br><span class=\"line\"></span><br><span class=\"line\">    root.<span class=\"property\">finishedWork</span> = root.<span class=\"property\">current</span>.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">    root.<span class=\"property\">finishedExpirationTime</span> = expirationTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isLocked = <span class=\"title function_\">resolveLocksOnRoot</span>(root, expirationTime);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isLocked) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This root has a lock that prevents it from committing. Exit. If we begin</span></span><br><span class=\"line\">        <span class=\"comment\">// work on the root again, without any intervening updates, it will finish</span></span><br><span class=\"line\">        <span class=\"comment\">// without doing additional work.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set this to null to indicate there&#x27;s no in-progress render.</span></span><br><span class=\"line\">    workInProgressRoot = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (workInProgressRootExitStatus) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">RootIncomplete</span>: &#123;</span><br><span class=\"line\">            <span class=\"title function_\">invariant</span>(<span class=\"literal\">false</span>, <span class=\"string\">&#x27;Should have a work-in-progress.&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Flow knows about invariant, so it compains if I add a break statement,</span></span><br><span class=\"line\">        <span class=\"comment\">// but eslint doesn&#x27;t know about invariant, so it complains if I do.</span></span><br><span class=\"line\">        <span class=\"comment\">// eslint-disable-next-line no-fallthrough</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">RootErrored</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// An error was thrown. First check if there is lower priority work</span></span><br><span class=\"line\">            <span class=\"comment\">// scheduled on this root.</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> lastPendingTime = root.<span class=\"property\">lastPendingTime</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastPendingTime &lt; expirationTime) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// There&#x27;s lower priority work. Before raising the error, try rendering</span></span><br><span class=\"line\">                <span class=\"comment\">// at the lower priority to see if it fixes it. Use a continuation to</span></span><br><span class=\"line\">                <span class=\"comment\">// maintain the existing priority and position in the queue.</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> renderRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, lastPendingTime);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isSync) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If we&#x27;re rendering asynchronously, it&#x27;s possible the error was</span></span><br><span class=\"line\">                <span class=\"comment\">// caused by tearing due to a mutation during an event. Try rendering</span></span><br><span class=\"line\">                <span class=\"comment\">// one more time without yiedling to events.</span></span><br><span class=\"line\">                <span class=\"title function_\">prepareFreshStack</span>(root, expirationTime);</span><br><span class=\"line\">                <span class=\"title function_\">scheduleSyncCallback</span>(renderRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, expirationTime));</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// If we&#x27;re already rendering synchronously, commit the root in its</span></span><br><span class=\"line\">            <span class=\"comment\">// errored state.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> commitRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">RootSuspended</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// We have an acceptable loading state. We need to figure out if we should</span></span><br><span class=\"line\">            <span class=\"comment\">// immediately commit it or wait a bit.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// If we have processed new updates during this render, we may now have a</span></span><br><span class=\"line\">            <span class=\"comment\">// new loading state ready. We want to ensure that we commit that as soon as</span></span><br><span class=\"line\">            <span class=\"comment\">// possible.</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> hasNotProcessedNewUpdates =</span><br><span class=\"line\">                workInProgressRootLatestProcessedExpirationTime === <span class=\"title class_\">Sync</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasNotProcessedNewUpdates &amp;&amp; !isSync) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If we have not processed any new updates during this pass, then this is</span></span><br><span class=\"line\">                <span class=\"comment\">// either a retry of an existing fallback state or a hidden tree.</span></span><br><span class=\"line\">                <span class=\"comment\">// Hidden trees shouldn&#x27;t be batched with other work and after that&#x27;s</span></span><br><span class=\"line\">                <span class=\"comment\">// fixed it can only be a retry.</span></span><br><span class=\"line\">                <span class=\"comment\">// We&#x27;re going to throttle committing retries so that we don&#x27;t show too</span></span><br><span class=\"line\">                <span class=\"comment\">// many loading states too quickly.</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> msUntilTimeout = globalMostRecentFallbackTime + <span class=\"variable constant_\">FALLBACK_THROTTLE_MS</span> - <span class=\"title function_\">now</span>();</span><br><span class=\"line\">                <span class=\"comment\">// Don&#x27;t bother with a very short suspense time.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (msUntilTimeout &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (workInProgressRootHasPendingPing) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// This render was pinged but we didn&#x27;t get to restart earlier so try</span></span><br><span class=\"line\">                        <span class=\"comment\">// restarting now instead.</span></span><br><span class=\"line\">                        <span class=\"title function_\">prepareFreshStack</span>(root, expirationTime);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> renderRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, expirationTime);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> lastPendingTime = root.<span class=\"property\">lastPendingTime</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lastPendingTime &lt; expirationTime) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// There&#x27;s lower priority work. It might be unsuspended. Try rendering</span></span><br><span class=\"line\">                        <span class=\"comment\">// at that level.</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> renderRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, lastPendingTime);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// The render is suspended, it hasn&#x27;t timed out, and there&#x27;s no lower</span></span><br><span class=\"line\">                    <span class=\"comment\">// priority work to do. Instead of committing the fallback</span></span><br><span class=\"line\">                    <span class=\"comment\">// immediately, wait for more data to arrive.</span></span><br><span class=\"line\">                    root.<span class=\"property\">timeoutHandle</span> = <span class=\"title function_\">scheduleTimeout</span>(</span><br><span class=\"line\">                        commitRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root),</span><br><span class=\"line\">                        msUntilTimeout,</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// The work expired. Commit immediately.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> commitRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">RootSuspendedWithDelay</span>: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isSync) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// We&#x27;re suspended in a state that should be avoided. We&#x27;ll try to avoid committing</span></span><br><span class=\"line\">                <span class=\"comment\">// it for as long as the timeouts let us.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (workInProgressRootHasPendingPing) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// This render was pinged but we didn&#x27;t get to restart earlier so try</span></span><br><span class=\"line\">                    <span class=\"comment\">// restarting now instead.</span></span><br><span class=\"line\">                    <span class=\"title function_\">prepareFreshStack</span>(root, expirationTime);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> renderRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, expirationTime);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> lastPendingTime = root.<span class=\"property\">lastPendingTime</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (lastPendingTime &lt; expirationTime) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// There&#x27;s lower priority work. It might be unsuspended. Try rendering</span></span><br><span class=\"line\">                    <span class=\"comment\">// at that level immediately.</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> renderRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root, lastPendingTime);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">let</span> msUntilTimeout;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (workInProgressRootLatestSuspenseTimeout !== <span class=\"title class_\">Sync</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// We have processed a suspense config whose expiration time we can use as</span></span><br><span class=\"line\">                    <span class=\"comment\">// the timeout.</span></span><br><span class=\"line\">                    msUntilTimeout =</span><br><span class=\"line\">                        <span class=\"title function_\">expirationTimeToMs</span>(workInProgressRootLatestSuspenseTimeout) - <span class=\"title function_\">now</span>();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workInProgressRootLatestProcessedExpirationTime === <span class=\"title class_\">Sync</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// This should never normally happen because only new updates cause</span></span><br><span class=\"line\">                    <span class=\"comment\">// delayed states, so we should have processed something. However,</span></span><br><span class=\"line\">                    <span class=\"comment\">// this could also happen in an offscreen tree.</span></span><br><span class=\"line\">                    msUntilTimeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If we don&#x27;t have a suspense config, we&#x27;re going to use a heuristic to</span></span><br><span class=\"line\">                    <span class=\"comment\">// determine how long we can suspend.</span></span><br><span class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"attr\">eventTimeMs</span>: number = <span class=\"title function_\">inferTimeFromExpirationTime</span>(</span><br><span class=\"line\">                        workInProgressRootLatestProcessedExpirationTime,</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> currentTimeMs = <span class=\"title function_\">now</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> timeUntilExpirationMs =</span><br><span class=\"line\">                        <span class=\"title function_\">expirationTimeToMs</span>(expirationTime) - currentTimeMs;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> timeElapsed = currentTimeMs - eventTimeMs;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (timeElapsed &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// We get this wrong some time since we estimate the time.</span></span><br><span class=\"line\">                        timeElapsed = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    msUntilTimeout = <span class=\"title function_\">jnd</span>(timeElapsed) - timeElapsed;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// Clamp the timeout to the expiration time.</span></span><br><span class=\"line\">                    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Once the event time is exact instead of inferred from expiration time</span></span><br><span class=\"line\">                    <span class=\"comment\">// we don&#x27;t need this.</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (timeUntilExpirationMs &lt; msUntilTimeout) &#123;</span><br><span class=\"line\">                        msUntilTimeout = timeUntilExpirationMs;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Don&#x27;t bother with a very short suspense time.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (msUntilTimeout &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// The render is suspended, it hasn&#x27;t timed out, and there&#x27;s no lower</span></span><br><span class=\"line\">                    <span class=\"comment\">// priority work to do. Instead of committing the fallback</span></span><br><span class=\"line\">                    <span class=\"comment\">// immediately, wait for more data to arrive.</span></span><br><span class=\"line\">                    root.<span class=\"property\">timeoutHandle</span> = <span class=\"title function_\">scheduleTimeout</span>(</span><br><span class=\"line\">                        commitRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root),</span><br><span class=\"line\">                        msUntilTimeout,</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// The work expired. Commit immediately.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> commitRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">RootCompleted</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// The work completed. Ready to commit.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                !isSync &amp;&amp;</span><br><span class=\"line\">                workInProgressRootLatestProcessedExpirationTime !== <span class=\"title class_\">Sync</span> &amp;&amp;</span><br><span class=\"line\">                workInProgressRootCanSuspendUsingConfig !== <span class=\"literal\">null</span></span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If we have exceeded the minimum loading delay, which probably</span></span><br><span class=\"line\">                <span class=\"comment\">// means we have shown a spinner already, we might have to suspend</span></span><br><span class=\"line\">                <span class=\"comment\">// a bit longer to ensure that the spinner is shown for enough time.</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> msUntilTimeout = <span class=\"title function_\">computeMsUntilSuspenseLoadingDelay</span>(</span><br><span class=\"line\">                    workInProgressRootLatestProcessedExpirationTime,</span><br><span class=\"line\">                    expirationTime,</span><br><span class=\"line\">                    workInProgressRootCanSuspendUsingConfig,</span><br><span class=\"line\">                );</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (msUntilTimeout &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                    root.<span class=\"property\">timeoutHandle</span> = <span class=\"title function_\">scheduleTimeout</span>(</span><br><span class=\"line\">                        commitRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root),</span><br><span class=\"line\">                        msUntilTimeout,</span><br><span class=\"line\">                    );</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> commitRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attr\">default</span>: &#123;</span><br><span class=\"line\">            <span class=\"title function_\">invariant</span>(<span class=\"literal\">false</span>, <span class=\"string\">&#x27;Unknown root exit status.&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"先进入workloopsync\"><a class=\"markdownIt-Anchor\" href=\"#先进入workloopsync\">#</a> 先进入 <code>workLoopSync</code></h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">workLoopSync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// debugger;</span></span><br><span class=\"line\">    <span class=\"comment\">// 遍历</span></span><br><span class=\"line\">    <span class=\"comment\">// Already timed out, so perform work without checking if we need to yield.</span></span><br><span class=\"line\">    <span class=\"comment\">// 构建fiber树</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (workInProgress !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 每次都返回他的子节点生层的fiber, 给workInProgress添加child的fiber</span></span><br><span class=\"line\">        <span class=\"comment\">// debugger</span></span><br><span class=\"line\">        workInProgress = <span class=\"title function_\">performUnitOfWork</span>(workInProgress);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// debugger;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>workInProgress</code>  是 current.alternate</p>\n<h3 id=\"performunitofwork\"><a class=\"markdownIt-Anchor\" href=\"#performunitofwork\">#</a> performUnitOfWork</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">performUnitOfWork</span>(<span class=\"params\">unitOfWork: Fiber</span>): <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// The current, flushed, state of this fiber is the alternate. Ideally</span></span><br><span class=\"line\">    <span class=\"comment\">// nothing should rely on this, but relying on it here means that we don&#x27;t</span></span><br><span class=\"line\">    <span class=\"comment\">// need an additional field on the work in progress.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = unitOfWork.<span class=\"property\">alternate</span>; <span class=\"comment\">// unitOfWork是备份，current是本体</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> next;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        next = <span class=\"title function_\">beginWork</span>(current, unitOfWork, renderExpirationTime); <span class=\"comment\">// 返回了当前子节点的fiber</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    unitOfWork.<span class=\"property\">memoizedProps</span> = unitOfWork.<span class=\"property\">pendingProps</span>; <span class=\"comment\">// 记住props</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 没有子节点了,就找兄弟节点，都没有，返回父节点的兄弟节点</span></span><br><span class=\"line\">        <span class=\"comment\">// If this doesn&#x27;t spawn new work, complete the current work.</span></span><br><span class=\"line\">        next = <span class=\"title function_\">completeUnitOfWork</span>(unitOfWork);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">ReactCurrentOwner</span>.<span class=\"property\">current</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 重置</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"beginwork\"><a class=\"markdownIt-Anchor\" href=\"#beginwork\">#</a> beginWork</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">beginWork</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    current: Fiber | <span class=\"literal\">null</span>, <span class=\"comment\">// 本体 （old）</span></span></span><br><span class=\"line\"><span class=\"params\">    workInProgress: Fiber, <span class=\"comment\">// 备份 （new）</span></span></span><br><span class=\"line\"><span class=\"params\">    renderExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> updateExpirationTime = workInProgress.<span class=\"property\">expirationTime</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Before entering the begin phase, clear the expiration time.</span></span><br><span class=\"line\">    <span class=\"comment\">// 清除到期时间</span></span><br><span class=\"line\">    workInProgress.<span class=\"property\">expirationTime</span> = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 按照tag的执行不同的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (workInProgress.<span class=\"property\">tag</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">IndeterminateComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2 function类型组件是这个tag</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">mountIndeterminateComponent</span>(</span><br><span class=\"line\">                current,</span><br><span class=\"line\">                workInProgress,</span><br><span class=\"line\">                workInProgress.<span class=\"property\">type</span>,</span><br><span class=\"line\">                renderExpirationTime,</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">ClassComponent</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从这里开始和上一步不一样了</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"title class_\">Component</span> = workInProgress.<span class=\"property\">type</span>;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> unresolvedProps = workInProgress.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 是否一样，不一样则合并defaultProps属性并返回结果</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> resolvedProps =</span><br><span class=\"line\">                workInProgress.<span class=\"property\">elementType</span> === <span class=\"title class_\">Component</span></span><br><span class=\"line\">                    ? unresolvedProps</span><br><span class=\"line\">                    : <span class=\"title function_\">resolveDefaultProps</span>(<span class=\"title class_\">Component</span>, unresolvedProps);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">updateClassComponent</span>(</span><br><span class=\"line\">                <span class=\"comment\">// 返回child fiber</span></span><br><span class=\"line\">                current,</span><br><span class=\"line\">                workInProgress,</span><br><span class=\"line\">                <span class=\"title class_\">Component</span>,</span><br><span class=\"line\">                resolvedProps,</span><br><span class=\"line\">                renderExpirationTime,</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 第一次执行的这个</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostRoot</span>: <span class=\"comment\">// 3 根节点</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">updateHostRoot</span>(current, workInProgress, renderExpirationTime);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"title class_\">HostComponent</span>: <span class=\"comment\">// 5 子组件的根节点(最外层节点)</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">updateHostComponent</span>(current, workInProgress, renderExpirationTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"updatehostroot\"><a class=\"markdownIt-Anchor\" href=\"#updatehostroot\">#</a> updateHostRoot</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostRoot</span>(<span class=\"params\">current, workInProgress, renderExpirationTime</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把一些变量入栈了，放在了文件全局变量中,意义不明</span></span><br><span class=\"line\">    <span class=\"title function_\">pushHostRootContext</span>(workInProgress);</span><br><span class=\"line\">    <span class=\"comment\">// 跟新队列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> updateQueue = workInProgress.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从变量名得知意思</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextProps = workInProgress.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevState = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevChildren = prevState !== <span class=\"literal\">null</span> ? prevState.<span class=\"property\">element</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可以理解为初始化赋值一些数据，如workInProgress.memoizedState等</span></span><br><span class=\"line\">    <span class=\"title function_\">processUpdateQueue</span>(workInProgress, updateQueue, nextProps, <span class=\"literal\">null</span>, renderExpirationTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = workInProgress.<span class=\"property\">memoizedState</span>; <span class=\"comment\">// 是一个ReactNode</span></span><br><span class=\"line\">    <span class=\"comment\">// Caution: React DevTools currently depends on this property</span></span><br><span class=\"line\">    <span class=\"comment\">// being called &quot;element&quot;.</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextChildren = nextState.<span class=\"property\">element</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">root</span>: <span class=\"title class_\">FiberRoot</span> = workInProgress.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        (current === <span class=\"literal\">null</span> || current.<span class=\"property\">child</span> === <span class=\"literal\">null</span>) &amp;&amp;</span><br><span class=\"line\">        root.<span class=\"property\">hydrate</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"title function_\">enterHydrationState</span>(workInProgress)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Otherwise reset hydration state in case we aborted and resumed another</span></span><br><span class=\"line\">        <span class=\"comment\">// root.</span></span><br><span class=\"line\">        <span class=\"comment\">// 给workInProgress添加了child属性</span></span><br><span class=\"line\">        <span class=\"title function_\">reconcileChildren</span>(current, workInProgress, nextChildren, renderExpirationTime);</span><br><span class=\"line\">        <span class=\"title function_\">resetHydrationState</span>(); <span class=\"comment\">// 重置了一些属性,目前意义未知</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 到这里就走完了一个循环，然后看child再来一个流程</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"processupdatequeue\"><a class=\"markdownIt-Anchor\" href=\"#processupdatequeue\">#</a> processUpdateQueue</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> processUpdateQueue&lt;<span class=\"title class_\">State</span>&gt;(</span><br><span class=\"line\">    <span class=\"attr\">workInProgress</span>: <span class=\"title class_\">Fiber</span>,</span><br><span class=\"line\">    <span class=\"attr\">queue</span>: <span class=\"title class_\">UpdateQueue</span>&lt;<span class=\"title class_\">State</span>&gt;,</span><br><span class=\"line\">    <span class=\"attr\">props</span>: any,</span><br><span class=\"line\">    <span class=\"attr\">instance</span>: any,</span><br><span class=\"line\">    <span class=\"attr\">renderExpirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    hasForceUpdate = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 克隆了queue(部分属性),执行后queue === workInProgress.updateQueue，好像并没有什么变化</span></span><br><span class=\"line\">    queue = <span class=\"title function_\">ensureWorkInProgressQueueIsAClone</span>(workInProgress, queue);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// These values may change as we process the queue.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newBaseState = queue.<span class=\"property\">baseState</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newFirstUpdate = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newExpirationTime = <span class=\"title class_\">NoWork</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Iterate through the list of updates to compute the result.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> update = queue.<span class=\"property\">firstUpdate</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resultState = newBaseState;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (update !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> updateExpirationTime = update.<span class=\"property\">expirationTime</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (updateExpirationTime &lt; renderExpirationTime) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This update does have sufficient priority.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Mark the event time of this update as relevant to this render pass.</span></span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> This should ideally use the true event time of this update rather than</span></span><br><span class=\"line\">            <span class=\"comment\">// its priority which is a derived and not reverseable value.</span></span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> We should skip this update if it was already committed but currently</span></span><br><span class=\"line\">            <span class=\"comment\">// we have no way of detecting the difference between a committed and suspended</span></span><br><span class=\"line\">            <span class=\"comment\">// update here.</span></span><br><span class=\"line\">            <span class=\"comment\">// 不知道做了什么，因为第一次初始化时大部分都是null，仅仅是一些变量的初始化处理，下面也都是这样</span></span><br><span class=\"line\">            <span class=\"title function_\">markRenderEventTimeAndConfig</span>(updateExpirationTime, update.<span class=\"property\">suspenseConfig</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Process it and compute a new result.</span></span><br><span class=\"line\">            <span class=\"comment\">// 更新组件state</span></span><br><span class=\"line\">            resultState = <span class=\"title function_\">getStateFromUpdate</span>(</span><br><span class=\"line\">                workInProgress,</span><br><span class=\"line\">                queue,</span><br><span class=\"line\">                update,</span><br><span class=\"line\">                resultState,</span><br><span class=\"line\">                props,</span><br><span class=\"line\">                instance,</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">const</span> callback = update.<span class=\"property\">callback</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (callback !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">Callback</span>;</span><br><span class=\"line\">                <span class=\"comment\">// Set this to null, in case it was mutated during an aborted render.</span></span><br><span class=\"line\">                update.<span class=\"property\">nextEffect</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (queue.<span class=\"property\">lastEffect</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    queue.<span class=\"property\">firstEffect</span> = queue.<span class=\"property\">lastEffect</span> = update;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    queue.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = update;</span><br><span class=\"line\">                    queue.<span class=\"property\">lastEffect</span> = update;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Continue to the next update.</span></span><br><span class=\"line\">        update = update.<span class=\"property\">next</span>; <span class=\"comment\">// 下一个更新</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newFirstUpdate === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        queue.<span class=\"property\">lastUpdate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newFirstCapturedUpdate === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        queue.<span class=\"property\">lastCapturedUpdate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">Callback</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newFirstUpdate === <span class=\"literal\">null</span> &amp;&amp; newFirstCapturedUpdate === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We processed every update, without skipping. That means the new base</span></span><br><span class=\"line\">        <span class=\"comment\">// state is the same as the result state.</span></span><br><span class=\"line\">        newBaseState = resultState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.<span class=\"property\">baseState</span> = newBaseState;</span><br><span class=\"line\">    queue.<span class=\"property\">firstUpdate</span> = newFirstUpdate;</span><br><span class=\"line\">    queue.<span class=\"property\">firstCapturedUpdate</span> = newFirstCapturedUpdate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set the remaining expiration time to be whatever is remaining in the queue.</span></span><br><span class=\"line\">    <span class=\"comment\">// This should be fine because the only two other things that contribute to</span></span><br><span class=\"line\">    <span class=\"comment\">// expiration time are props and context. We&#x27;re already in the middle of the</span></span><br><span class=\"line\">    <span class=\"comment\">// begin phase by the time we start processing the queue, so we&#x27;ve already</span></span><br><span class=\"line\">    <span class=\"comment\">// dealt with the props. Context in components that specify</span></span><br><span class=\"line\">    <span class=\"comment\">// shouldComponentUpdate is tricky; but we&#x27;ll have to account for</span></span><br><span class=\"line\">    <span class=\"comment\">// that regardless.</span></span><br><span class=\"line\">    workInProgress.<span class=\"property\">expirationTime</span> = newExpirationTime; <span class=\"comment\">// 剩余到期时间？</span></span><br><span class=\"line\">    workInProgress.<span class=\"property\">memoizedState</span> = resultState;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"reconcilechildren-reconcilechildfibers\"><a class=\"markdownIt-Anchor\" href=\"#reconcilechildren-reconcilechildfibers\">#</a> reconcileChildren -&gt; reconcileChildFibers</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">reconcileChildFibers</span>(</span><br><span class=\"line\">    workInProgress,</span><br><span class=\"line\">    current.<span class=\"property\">child</span>,</span><br><span class=\"line\">    nextChildren,</span><br><span class=\"line\">    renderExpirationTime,</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileSingleElement</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    returnFiber: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    currentFirstChild: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    element: ReactElement,</span></span><br><span class=\"line\"><span class=\"params\">    expirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = element.<span class=\"property\">key</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> child = currentFirstChild;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (child !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.<span class=\"property\">type</span> === <span class=\"variable constant_\">REACT_FRAGMENT_TYPE</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// created是一个fiber</span></span><br><span class=\"line\">        <span class=\"comment\">// 更具element创建fiber</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> created = <span class=\"title function_\">createFiberFromElement</span>(element, returnFiber.<span class=\"property\">mode</span>, expirationTime);</span><br><span class=\"line\">        created.<span class=\"property\">ref</span> = <span class=\"title function_\">coerceRef</span>(returnFiber, currentFirstChild, element); <span class=\"comment\">// 处理ref,因为例子上没，先不看</span></span><br><span class=\"line\">        created.<span class=\"property\">return</span> = returnFiber; <span class=\"comment\">// 父节点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> created;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">placeSingleChild</span>(<span class=\"params\">newFiber: Fiber</span>): <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This is simpler for the single child case. We only need to do a</span></span><br><span class=\"line\">    <span class=\"comment\">// placement for inserting new children.</span></span><br><span class=\"line\">    <span class=\"comment\">// shouldTrackSideEffects是直接传参为true（运行时）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shouldTrackSideEffects &amp;&amp; newFiber.<span class=\"property\">alternate</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        newFiber.<span class=\"property\">effectTag</span> = <span class=\"title class_\">Placement</span>; <span class=\"comment\">// 0 -&gt; 2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newFiber;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This API will tag the children with the side-effect of the reconciliation</span></span><br><span class=\"line\"><span class=\"comment\">// itself. They will be added to the side-effect list as we pass through the</span></span><br><span class=\"line\"><span class=\"comment\">// children and the parent.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildFibers</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    returnFiber: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    currentFirstChild: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    newChild: any,</span></span><br><span class=\"line\"><span class=\"params\">    expirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This function is not recursive.</span></span><br><span class=\"line\">    <span class=\"comment\">// If the top level item is an array, we treat it as a set of children,</span></span><br><span class=\"line\">    <span class=\"comment\">// not as a fragment. Nested arrays on the other hand will be treated as</span></span><br><span class=\"line\">    <span class=\"comment\">// fragment nodes. Recursion happens at the normal flow.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Handle top level unkeyed fragments as if they were arrays.</span></span><br><span class=\"line\">    <span class=\"comment\">// This leads to an ambiguity between &lt;&gt;&#123;[...]&#125;&lt;/&gt; and &lt;&gt;...&lt;/&gt;.</span></span><br><span class=\"line\">    <span class=\"comment\">// We treat the ambiguous cases above the same.</span></span><br><span class=\"line\">    <span class=\"comment\">// 是否fragment</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isUnkeyedTopLevelFragment =</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp;</span><br><span class=\"line\">        newChild !== <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">        newChild.<span class=\"property\">type</span> === <span class=\"variable constant_\">REACT_FRAGMENT_TYPE</span> &amp;&amp;</span><br><span class=\"line\">        newChild.<span class=\"property\">key</span> === <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUnkeyedTopLevelFragment) &#123;</span><br><span class=\"line\">        newChild = newChild.<span class=\"property\">props</span>.<span class=\"property\">children</span>; <span class=\"comment\">// 如果是fragment取他的子节点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Handle object types</span></span><br><span class=\"line\">    <span class=\"comment\">// newChild可能是一个children</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isObject = <span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; newChild !== <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (</span><br><span class=\"line\">            newChild.<span class=\"property\">$$typeof</span> <span class=\"comment\">// 子节点是单一的</span></span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"attr\">REACT_ELEMENT_TYPE</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">placeSingleChild</span>(</span><br><span class=\"line\">                    <span class=\"title function_\">reconcileSingleElement</span>(</span><br><span class=\"line\">                        returnFiber,</span><br><span class=\"line\">                        currentFirstChild,</span><br><span class=\"line\">                        newChild,</span><br><span class=\"line\">                        expirationTime,</span><br><span class=\"line\">                    ),</span><br><span class=\"line\">                );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"updateclasscomponent\"><a class=\"markdownIt-Anchor\" href=\"#updateclasscomponent\">#</a> updateClassComponent</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateClassComponent</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    current: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    workInProgress: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    Component: any,</span></span><br><span class=\"line\"><span class=\"params\">    nextProps,</span></span><br><span class=\"line\"><span class=\"params\">    renderExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Push context providers early to prevent context stack mismatches.</span></span><br><span class=\"line\">    <span class=\"comment\">// During mounting we don&#x27;t know the child context yet as the instance doesn&#x27;t exist.</span></span><br><span class=\"line\">    <span class=\"comment\">// We will invalidate the child context in finishClassComponent() right after rendering.</span></span><br><span class=\"line\">    <span class=\"comment\">// 是否有context</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> hasContext;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isLegacyContextProvider</span>(<span class=\"title class_\">Component</span>)) &#123;</span><br><span class=\"line\">        hasContext = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"title function_\">pushLegacyContextProvider</span>(workInProgress);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        hasContext = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// context相关,先不管</span></span><br><span class=\"line\">    <span class=\"title function_\">prepareToReadContext</span>(workInProgress, renderExpirationTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> instance = workInProgress.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> shouldUpdate;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instance === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// An class component without an instance only mounts if it suspended</span></span><br><span class=\"line\">            <span class=\"comment\">// inside a non- concurrent tree, in an inconsistent state. We want to</span></span><br><span class=\"line\">            <span class=\"comment\">// tree it like a new mount, even though an empty version of it already</span></span><br><span class=\"line\">            <span class=\"comment\">// committed. Disconnect the alternate pointers.</span></span><br><span class=\"line\">            current.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            workInProgress.<span class=\"property\">alternate</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// Since this is conceptually a new fiber, schedule a Placement effect</span></span><br><span class=\"line\">            workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">Placement</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// In the initial pass we might need to construct the instance.</span></span><br><span class=\"line\">        <span class=\"comment\">// 构造实例</span></span><br><span class=\"line\">        <span class=\"title function_\">constructClassInstance</span>(workInProgress, <span class=\"title class_\">Component</span>, nextProps, renderExpirationTime);</span><br><span class=\"line\">        <span class=\"comment\">// 执行渲染前的生命周期</span></span><br><span class=\"line\">        <span class=\"title function_\">mountClassInstance</span>(workInProgress, <span class=\"title class_\">Component</span>, nextProps, renderExpirationTime);</span><br><span class=\"line\">        shouldUpdate = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextUnitOfWork = <span class=\"title function_\">finishClassComponent</span>(</span><br><span class=\"line\">        current,</span><br><span class=\"line\">        workInProgress,</span><br><span class=\"line\">        <span class=\"title class_\">Component</span>,</span><br><span class=\"line\">        shouldUpdate,</span><br><span class=\"line\">        hasContext,</span><br><span class=\"line\">        renderExpirationTime,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nextUnitOfWork;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"constructclassinstance\"><a class=\"markdownIt-Anchor\" href=\"#constructclassinstance\">#</a> constructClassInstance</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">constructClassInstance</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    workInProgress: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    ctor: any,</span></span><br><span class=\"line\"><span class=\"params\">    props: any,</span></span><br><span class=\"line\"><span class=\"params\">    renderExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>): any &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isLegacyContextConsumer = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> unmaskedContext = emptyContextObject;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> contextType = ctor.<span class=\"property\">contextType</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 到这 前景：从root -&gt; LocaleProvider,一层层下去</span></span><br><span class=\"line\">    <span class=\"comment\">// debugger</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取context ? context相关，先不看</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> contextType === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; contextType !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        context = <span class=\"title function_\">readContext</span>((<span class=\"attr\">contextType</span>: any));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        unmaskedContext = <span class=\"title function_\">getUnmaskedContext</span>(workInProgress, ctor, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> contextTypes = ctor.<span class=\"property\">contextTypes</span>;</span><br><span class=\"line\">        isLegacyContextConsumer = contextTypes !== <span class=\"literal\">null</span> &amp;&amp; contextTypes !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">        context = isLegacyContextConsumer</span><br><span class=\"line\">            ? <span class=\"title function_\">getMaskedContext</span>(workInProgress, unmaskedContext)</span><br><span class=\"line\">            : emptyContextObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// new 当前组件（class）,获得实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> <span class=\"title function_\">ctor</span>(props, context);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> state = (workInProgress.<span class=\"property\">memoizedState</span> =</span><br><span class=\"line\">        instance.<span class=\"property\">state</span> !== <span class=\"literal\">null</span> &amp;&amp; instance.<span class=\"property\">state</span> !== <span class=\"literal\">undefined</span> ? instance.<span class=\"property\">state</span> : <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"comment\">// workInProgress和instance互相添加为属性，stateNode和_reactInternalFiber，能够让双方互相找到</span></span><br><span class=\"line\">    <span class=\"comment\">// 更新了instance的updater方法（直接被替换了一个新的）</span></span><br><span class=\"line\">    <span class=\"title function_\">adoptClassInstance</span>(workInProgress, instance);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Cache unmasked context so we can avoid recreating masked context unless necessary.</span></span><br><span class=\"line\">    <span class=\"comment\">// ReactFiberContext usually updates this cache but can&#x27;t for newly-created instances.</span></span><br><span class=\"line\">    <span class=\"comment\">// 在contextType有数据时是true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isLegacyContextConsumer) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">cacheContext</span>(workInProgress, unmaskedContext, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mountclassinstance\"><a class=\"markdownIt-Anchor\" href=\"#mountclassinstance\">#</a> mountClassInstance</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Invokes the mount life-cycles on a previously never rendered instance.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountClassInstance</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    workInProgress: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    ctor: any,</span></span><br><span class=\"line\"><span class=\"params\">    newProps: any,</span></span><br><span class=\"line\"><span class=\"params\">    renderExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新state等数据</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> instance = workInProgress.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\">    instance.<span class=\"property\">props</span> = newProps;</span><br><span class=\"line\">    instance.<span class=\"property\">state</span> = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    instance.<span class=\"property\">refs</span> = emptyRefsObject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> contextType = ctor.<span class=\"property\">contextType</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// context</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> contextType === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; contextType !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        instance.<span class=\"property\">context</span> = <span class=\"title function_\">readContext</span>(contextType);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> unmaskedContext = <span class=\"title function_\">getUnmaskedContext</span>(workInProgress, ctor, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        instance.<span class=\"property\">context</span> = <span class=\"title function_\">getMaskedContext</span>(workInProgress, unmaskedContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> updateQueue = workInProgress.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (updateQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">processUpdateQueue</span>(workInProgress, updateQueue, newProps, instance, renderExpirationTime);</span><br><span class=\"line\">        instance.<span class=\"property\">state</span> = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理getDerivedStateFromProps，第一个看到的生命周期处理</span></span><br><span class=\"line\">    <span class=\"comment\">// getDerivedStateFromProps 有返回值，做Object.assign处理，否则返回原state</span></span><br><span class=\"line\">    <span class=\"comment\">// workInProgress.memoizedState被更新了</span></span><br><span class=\"line\">    <span class=\"comment\">// 现在还处于渲染前</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> getDerivedStateFromProps = ctor.<span class=\"property\">getDerivedStateFromProps</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> getDerivedStateFromProps === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">applyDerivedStateFromProps</span>(workInProgress, ctor, getDerivedStateFromProps, newProps);</span><br><span class=\"line\">        instance.<span class=\"property\">state</span> = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// In order to support react-lifecycles-compat polyfilled components,</span></span><br><span class=\"line\">    <span class=\"comment\">// Unsafe lifecycles should not be invoked for components using the new APIs.</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果使用了新的生命周期函数，就不调用老的不安全的生命周期函数componentWillMount</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> ctor.<span class=\"property\">getDerivedStateFromProps</span> !== <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"keyword\">typeof</span> instance.<span class=\"property\">getSnapshotBeforeUpdate</span> !== <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class=\"line\">        (<span class=\"keyword\">typeof</span> instance.<span class=\"property\">UNSAFE_componentWillMount</span> === <span class=\"string\">&#x27;function&#x27;</span> ||</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> instance.<span class=\"property\">componentWillMount</span> === <span class=\"string\">&#x27;function&#x27;</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用componentWillMount、UNSAFE_componentWillMount</span></span><br><span class=\"line\">        <span class=\"title function_\">callComponentWillMount</span>(workInProgress, instance);</span><br><span class=\"line\">        <span class=\"comment\">// If we had additional state updates during this life-cycle, let&#x27;s</span></span><br><span class=\"line\">        <span class=\"comment\">// process them now.</span></span><br><span class=\"line\">        updateQueue = workInProgress.<span class=\"property\">updateQueue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (updateQueue !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">processUpdateQueue</span>(</span><br><span class=\"line\">                workInProgress,</span><br><span class=\"line\">                updateQueue,</span><br><span class=\"line\">                newProps,</span><br><span class=\"line\">                instance,</span><br><span class=\"line\">                renderExpirationTime,</span><br><span class=\"line\">            );</span><br><span class=\"line\">            instance.<span class=\"property\">state</span> = workInProgress.<span class=\"property\">memoizedState</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> instance.<span class=\"property\">componentDidMount</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">Update</span>; <span class=\"comment\">// effectTag添加Update</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"finishclasscomponent\"><a class=\"markdownIt-Anchor\" href=\"#finishclasscomponent\">#</a> finishClassComponent</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">finishClassComponent</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    current: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    workInProgress: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    Component: any,</span></span><br><span class=\"line\"><span class=\"params\">    shouldUpdate: boolean,</span></span><br><span class=\"line\"><span class=\"params\">    hasContext: boolean,</span></span><br><span class=\"line\"><span class=\"params\">    renderExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Refs should update even if shouldComponentUpdate returns false</span></span><br><span class=\"line\">    <span class=\"comment\">// 标记ref,表示workInProgress上存在ref属性，通过effectTag</span></span><br><span class=\"line\">    <span class=\"comment\">// debugger</span></span><br><span class=\"line\">    <span class=\"title function_\">markRef</span>(current, workInProgress);</span><br><span class=\"line\">    <span class=\"comment\">//  是否包含DidCapture标记</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> didCaptureError = (workInProgress.<span class=\"property\">effectTag</span> &amp; <span class=\"title class_\">DidCapture</span>) !== <span class=\"title class_\">NoEffect</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!shouldUpdate &amp;&amp; !didCaptureError) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Context providers should defer to sCU for rendering</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasContext) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">invalidateContextProvider</span>(workInProgress, <span class=\"title class_\">Component</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">bailoutOnAlreadyFinishedWork</span>(current, workInProgress, renderExpirationTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> instance = workInProgress.<span class=\"property\">stateNode</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Rerender</span></span><br><span class=\"line\">    <span class=\"title class_\">ReactCurrentOwner</span>.<span class=\"property\">current</span> = workInProgress;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextChildren;</span><br><span class=\"line\">    <span class=\"comment\">// 包含DidCapture标记 &amp;&amp; getDerivedStateFromError不是函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (didCaptureError &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Component</span>.<span class=\"property\">getDerivedStateFromError</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If we captured an error, but getDerivedStateFrom catch is not defined,</span></span><br><span class=\"line\">        <span class=\"comment\">// unmount all the children. componentDidCatch will schedule an update to</span></span><br><span class=\"line\">        <span class=\"comment\">// re-render a fallback. This is temporary until we migrate everyone to</span></span><br><span class=\"line\">        <span class=\"comment\">// the new API.</span></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Warn in a future release.</span></span><br><span class=\"line\">        nextChildren = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enableProfilerTimer) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">stopProfilerTimerIfRunning</span>(workInProgress);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 正常渲染</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (__DEV__) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// debugger</span></span><br><span class=\"line\">            <span class=\"comment\">// 执行render, 即React.createElement</span></span><br><span class=\"line\">            <span class=\"comment\">// 把es6模板转成React.createElement应该是loader完成的,具体怎么转的就先不管了</span></span><br><span class=\"line\">            <span class=\"comment\">// 见createElement.md</span></span><br><span class=\"line\">            nextChildren = instance.<span class=\"title function_\">render</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// React DevTools reads this flag.</span></span><br><span class=\"line\">    <span class=\"comment\">// React DevTools需要</span></span><br><span class=\"line\">    workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">PerformedWork</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current !== <span class=\"literal\">null</span> &amp;&amp; didCaptureError) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 和reconcileChildFibers代码一样，唯一区别是调用时shouldTrackSideEffects为false</span></span><br><span class=\"line\">        <span class=\"title function_\">reconcileChildren</span>(current, workInProgress, nextChildren, renderExpirationTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Memoize state using the values we just used to render.</span></span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Restructure so we never read values from the instance.</span></span><br><span class=\"line\">    <span class=\"comment\">// 记住state, 这个是preState?</span></span><br><span class=\"line\">    workInProgress.<span class=\"property\">memoizedState</span> = instance.<span class=\"property\">state</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The context might have changed so we need to recalculate it.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasContext) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">invalidateContextProvider</span>(workInProgress, <span class=\"title class_\">Component</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"reconcilechildfibers-和-mountchildfibers\"><a class=\"markdownIt-Anchor\" href=\"#reconcilechildfibers-和-mountchildfibers\">#</a> reconcileChildFibers 和 mountChildFibers</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> reconcileChildFibers = <span class=\"title class_\">ChildReconciler</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mountChildFibers = <span class=\"title class_\">ChildReconciler</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildren</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    current: Fiber | <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"params\">    workInProgress: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">    nextChildren: any,</span></span><br><span class=\"line\"><span class=\"params\">    renderExpirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If this is a fresh new component that hasn&#x27;t been rendered yet, we</span></span><br><span class=\"line\">        <span class=\"comment\">// won&#x27;t update its child set by applying minimal side-effects. Instead,</span></span><br><span class=\"line\">        <span class=\"comment\">// we will add them all to the child before it gets rendered. That means</span></span><br><span class=\"line\">        <span class=\"comment\">// we can optimize this reconciliation pass by not tracking side-effects.</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">mountChildFibers</span>(</span><br><span class=\"line\">            workInProgress,</span><br><span class=\"line\">            <span class=\"literal\">null</span>,</span><br><span class=\"line\">            nextChildren,</span><br><span class=\"line\">            renderExpirationTime,</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If the current child is the same as the work in progress, it means that</span></span><br><span class=\"line\">        <span class=\"comment\">// we haven&#x27;t yet started any work on these children. Therefore, we use</span></span><br><span class=\"line\">        <span class=\"comment\">// the clone algorithm to create a copy of all the current children.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If we had any progressed work already, that is invalid at this point so</span></span><br><span class=\"line\">        <span class=\"comment\">// let&#x27;s throw it out.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 把子节点转换成一个fiber</span></span><br><span class=\"line\">        <span class=\"comment\">// debugger;</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">reconcileChildFibers</span>(</span><br><span class=\"line\">            workInProgress,</span><br><span class=\"line\">            current.<span class=\"property\">child</span>,</span><br><span class=\"line\">            nextChildren,</span><br><span class=\"line\">            renderExpirationTime,</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"updatehostcomponent\"><a class=\"markdownIt-Anchor\" href=\"#updatehostcomponent\">#</a> updateHostComponent</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateHostComponent</span>(<span class=\"params\">current, workInProgress, renderExpirationTime</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// debugger</span></span><br><span class=\"line\">    <span class=\"title function_\">pushHostContext</span>(workInProgress);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">tryToClaimNextHydratableInstance</span>(workInProgress);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = workInProgress.<span class=\"property\">type</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextProps = workInProgress.<span class=\"property\">pendingProps</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevProps = current !== <span class=\"literal\">null</span> ? current.<span class=\"property\">memoizedProps</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> nextChildren = nextProps.<span class=\"property\">children</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isDirectTextChild = <span class=\"title function_\">shouldSetTextContent</span>(type, nextProps); <span class=\"comment\">// 子节点是文本节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDirectTextChild) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是文本节点</span></span><br><span class=\"line\">        <span class=\"comment\">// We special case a direct text child of a host node. This is a common</span></span><br><span class=\"line\">        <span class=\"comment\">// case. We won&#x27;t handle it as a reified child. We will instead handle</span></span><br><span class=\"line\">        <span class=\"comment\">// this in the host environment that also have access to this prop. That</span></span><br><span class=\"line\">        <span class=\"comment\">// avoids allocating another HostText fiber and traversing it.</span></span><br><span class=\"line\">        nextChildren = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (prevProps !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"title function_\">shouldSetTextContent</span>(type, prevProps)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// If we&#x27;re switching from a direct text child to a normal child, or to</span></span><br><span class=\"line\">        <span class=\"comment\">// empty, we need to schedule the text content to be reset.</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">ContentReset</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">markRef</span>(current, workInProgress);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check the host config to see if the children are offscreen/hidden.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        workInProgress.<span class=\"property\">mode</span> &amp; <span class=\"title class_\">ConcurrentMode</span> &amp;&amp;</span><br><span class=\"line\">        renderExpirationTime !== <span class=\"title class_\">Never</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"title function_\">shouldDeprioritizeSubtree</span>(type, nextProps)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">reconcileChildren</span>(current, workInProgress, nextChildren, renderExpirationTime);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"reconcilechildfibers详细\"><a class=\"markdownIt-Anchor\" href=\"#reconcilechildfibers详细\">#</a> reconcileChildFibers（详细）</h3>\n<p>见 <span class=\"exturl\" data-url=\"aHR0cDovL3JlY29uY2lsZUNoaWxkRmliZXJzLm1k\">reconcileChildFibers.md</span></p>\n<h3 id=\"completeunitofwork\"><a class=\"markdownIt-Anchor\" href=\"#completeunitofwork\">#</a> completeUnitOfWork</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">completeUnitOfWork</span>(<span class=\"params\">unitOfWork: Fiber</span>): <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Attempt to complete the current unit of work, then move to the next</span></span><br><span class=\"line\">    <span class=\"comment\">// sibling. If there are no more siblings, return to the parent fiber.</span></span><br><span class=\"line\">    <span class=\"comment\">// 翻译：结束当前的工作单元，然后移动到下一个兄弟。如果没有，返回父fiber</span></span><br><span class=\"line\">    workInProgress = unitOfWork;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The current, flushed, state of this fiber is the alternate. Ideally</span></span><br><span class=\"line\">        <span class=\"comment\">// nothing should rely on this, but relying on it here means that we don&#x27;t</span></span><br><span class=\"line\">        <span class=\"comment\">// need an additional field on the work in progress.</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> current = workInProgress.<span class=\"property\">alternate</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> returnFiber = workInProgress.<span class=\"property\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Check if the work completed or if something threw.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((workInProgress.<span class=\"property\">effectTag</span> &amp; <span class=\"title class_\">Incomplete</span>) === <span class=\"title class_\">NoEffect</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!enableProfilerTimer || (workInProgress.<span class=\"property\">mode</span> &amp; <span class=\"title class_\">ProfileMode</span>) === <span class=\"title class_\">NoMode</span>) &#123;</span><br><span class=\"line\">                next = <span class=\"title function_\">completeWork</span>(current, workInProgress, renderExpirationTime);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">startProfilerTimer</span>(workInProgress);</span><br><span class=\"line\">                next = <span class=\"title function_\">completeWork</span>(current, workInProgress, renderExpirationTime);</span><br><span class=\"line\">                <span class=\"comment\">// Update render duration assuming we didn&#x27;t error.</span></span><br><span class=\"line\">                <span class=\"title function_\">stopProfilerTimerIfRunningAndRecordDelta</span>(workInProgress, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"title function_\">resetChildExpirationTime</span>(workInProgress); <span class=\"comment\">// 重置时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Completing this fiber spawned new work. Work on that next.</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                returnFiber !== <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">                <span class=\"comment\">// Do not append effects to parents if a sibling failed to complete</span></span><br><span class=\"line\">                (returnFiber.<span class=\"property\">effectTag</span> &amp; <span class=\"title class_\">Incomplete</span>) === <span class=\"title class_\">NoEffect</span></span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Append all the effects of the subtree and this fiber onto the effect</span></span><br><span class=\"line\">                <span class=\"comment\">// list of the parent. The completion order of the children affects the</span></span><br><span class=\"line\">                <span class=\"comment\">// side-effect order.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (returnFiber.<span class=\"property\">firstEffect</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    returnFiber.<span class=\"property\">firstEffect</span> = workInProgress.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (workInProgress.<span class=\"property\">lastEffect</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (returnFiber.<span class=\"property\">lastEffect</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        returnFiber.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = workInProgress.<span class=\"property\">firstEffect</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    returnFiber.<span class=\"property\">lastEffect</span> = workInProgress.<span class=\"property\">lastEffect</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// If this fiber had side-effects, we append it AFTER the children&#x27;s</span></span><br><span class=\"line\">                <span class=\"comment\">// side-effects. We can perform certain side-effects earlier if needed,</span></span><br><span class=\"line\">                <span class=\"comment\">// by doing multiple passes over the effect list. We don&#x27;t want to</span></span><br><span class=\"line\">                <span class=\"comment\">// schedule our own side-effect on our own list because if end up</span></span><br><span class=\"line\">                <span class=\"comment\">// reusing children we&#x27;ll schedule this effect onto itself since we&#x27;re</span></span><br><span class=\"line\">                <span class=\"comment\">// at the end.</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> effectTag = workInProgress.<span class=\"property\">effectTag</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Skip both NoWork and PerformedWork tags when creating the effect</span></span><br><span class=\"line\">                <span class=\"comment\">// list. PerformedWork effect is read by React DevTools but shouldn&#x27;t be</span></span><br><span class=\"line\">                <span class=\"comment\">// committed.</span></span><br><span class=\"line\">                <span class=\"comment\">// debugger</span></span><br><span class=\"line\">                <span class=\"comment\">// effect添加，</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (effectTag &gt; <span class=\"title class_\">PerformedWork</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (returnFiber.<span class=\"property\">lastEffect</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        returnFiber.<span class=\"property\">lastEffect</span>.<span class=\"property\">nextEffect</span> = workInProgress;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        returnFiber.<span class=\"property\">firstEffect</span> = workInProgress;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    returnFiber.<span class=\"property\">lastEffect</span> = workInProgress;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This fiber did not complete because something threw. Pop values off</span></span><br><span class=\"line\">            <span class=\"comment\">// the stack without entering the complete phase. If this is a boundary,</span></span><br><span class=\"line\">            <span class=\"comment\">// capture values if possible.</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> next = <span class=\"title function_\">unwindWork</span>(workInProgress, renderExpirationTime);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Because this fiber did not complete, don&#x27;t reset its expiration time.</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (enableProfilerTimer &amp;&amp; (workInProgress.<span class=\"property\">mode</span> &amp; <span class=\"title class_\">ProfileMode</span>) !== <span class=\"title class_\">NoMode</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Record the render duration for the fiber that errored.</span></span><br><span class=\"line\">                <span class=\"title function_\">stopProfilerTimerIfRunningAndRecordDelta</span>(workInProgress, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Include the time spent working on failed children before continuing.</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> actualDuration = workInProgress.<span class=\"property\">actualDuration</span>;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> child = workInProgress.<span class=\"property\">child</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (child !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    actualDuration += child.<span class=\"property\">actualDuration</span>;</span><br><span class=\"line\">                    child = child.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                workInProgress.<span class=\"property\">actualDuration</span> = actualDuration;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (next !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If completing this work spawned new work, do that next. We&#x27;ll come</span></span><br><span class=\"line\">                <span class=\"comment\">// back here again.</span></span><br><span class=\"line\">                <span class=\"comment\">// Since we&#x27;re restarting, remove anything that is not a host effect</span></span><br><span class=\"line\">                <span class=\"comment\">// from the effect tag.</span></span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">TODO:</span> The name stopFailedWorkTimer is misleading because Suspense</span></span><br><span class=\"line\">                <span class=\"comment\">// also captures and restarts.</span></span><br><span class=\"line\">                <span class=\"title function_\">stopFailedWorkTimer</span>(workInProgress);</span><br><span class=\"line\">                next.<span class=\"property\">effectTag</span> &amp;= <span class=\"title class_\">HostEffectMask</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"title function_\">stopWorkTimer</span>(workInProgress);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (returnFiber !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Mark the parent fiber as incomplete and clear its effect list.</span></span><br><span class=\"line\">                returnFiber.<span class=\"property\">firstEffect</span> = returnFiber.<span class=\"property\">lastEffect</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                returnFiber.<span class=\"property\">effectTag</span> |= <span class=\"title class_\">Incomplete</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> siblingFiber = workInProgress.<span class=\"property\">sibling</span>; <span class=\"comment\">// 返回相邻节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (siblingFiber !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If there is more work to do in this returnFiber, do that next.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> siblingFiber;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Otherwise, return to the parent 没有就从父节点中找相邻节点</span></span><br><span class=\"line\">        workInProgress = returnFiber;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (workInProgress !== <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We&#x27;ve reached the root.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workInProgressRootExitStatus === <span class=\"title class_\">RootIncomplete</span>) &#123;</span><br><span class=\"line\">        workInProgressRootExitStatus = <span class=\"title class_\">RootCompleted</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/08/react/%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97/",
            "url": "http://example.com/2020/09/08/react/%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97/",
            "title": "时间",
            "date_published": "2020-09-08T03:00:00.000Z",
            "content_html": "<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">requestCurrentTime</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// executionContext是否是RenderContext 或 CommitContext</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((executionContext &amp; (<span class=\"title class_\">RenderContext</span> | <span class=\"title class_\">CommitContext</span>)) !== <span class=\"title class_\">NoContext</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We&#x27;re inside React, so it&#x27;s fine to read the actual time.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">msToExpirationTime</span>(<span class=\"title function_\">now</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// We&#x27;re not inside React, so we may be in the middle of a browser event.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentEventTime !== <span class=\"title class_\">NoWork</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Use the same start time for all updates until we enter React again.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> currentEventTime;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// This is the first update since React yielded. Compute a new start time.</span></span><br><span class=\"line\">    <span class=\"comment\">// react执行的第一次更新，计算一个新的时间</span></span><br><span class=\"line\">    <span class=\"comment\">// now = 当前performance.now() - 文件加载时的performance.now()的时间差，就是文件加载时到执行这里的时间差</span></span><br><span class=\"line\">    currentEventTime = <span class=\"title function_\">msToExpirationTime</span>(<span class=\"title function_\">now</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> currentEventTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/08/react/%E5%90%84%E7%A7%8D%E5%AF%B9%E8%B1%A1/",
            "url": "http://example.com/2020/09/08/react/%E5%90%84%E7%A7%8D%E5%AF%B9%E8%B1%A1/",
            "title": "一些对象定义",
            "date_published": "2020-09-08T03:00:00.000Z",
            "content_html": "<h2 id=\"update\"><a class=\"markdownIt-Anchor\" href=\"#update\">#</a> Update</h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">Update</span>&lt;<span class=\"title class_\">State</span>&gt; = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 过期时间</span></span><br><span class=\"line\">    <span class=\"attr\">expirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">suspenseConfig</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">SuspenseConfig</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">tag</span>: <span class=\"number\">0</span> | <span class=\"number\">1</span> | <span class=\"number\">2</span> | <span class=\"number\">3</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// react 组件对象 element:&#123;$$typeof: Symbol(react.element),...&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">payload</span>: <span class=\"built_in\">any</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对应回调</span></span><br><span class=\"line\">    <span class=\"attr\">callback</span>: (<span class=\"function\">() =&gt;</span> mixed) | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下一个update</span></span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"title class_\">Update</span>&lt;<span class=\"title class_\">State</span>&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">nextEffect</span>: <span class=\"title class_\">Update</span>&lt;<span class=\"title class_\">State</span>&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"updatequeue\"><a class=\"markdownIt-Anchor\" href=\"#updatequeue\">#</a> UpdateQueue</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> type <span class=\"title class_\">UpdateQueue</span>&lt;<span class=\"title class_\">State</span>&gt; = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前state</span></span><br><span class=\"line\">    <span class=\"attr\">baseState</span>: <span class=\"title class_\">State</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第一个update</span></span><br><span class=\"line\">    <span class=\"attr\">firstUpdate</span>: <span class=\"title class_\">Update</span>&lt;<span class=\"title class_\">State</span>&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 最后一个update</span></span><br><span class=\"line\">    <span class=\"attr\">lastUpdate</span>: <span class=\"title class_\">Update</span>&lt;<span class=\"title class_\">State</span>&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">firstCapturedUpdate</span>: <span class=\"title class_\">Update</span>&lt;<span class=\"title class_\">State</span>&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastCapturedUpdate</span>: <span class=\"title class_\">Update</span>&lt;<span class=\"title class_\">State</span>&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// side effect</span></span><br><span class=\"line\">    <span class=\"attr\">firstEffect</span>: <span class=\"title class_\">Update</span>&lt;<span class=\"title class_\">State</span>&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastEffect</span>: <span class=\"title class_\">Update</span>&lt;<span class=\"title class_\">State</span>&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">firstCapturedEffect</span>: <span class=\"title class_\">Update</span>&lt;<span class=\"title class_\">State</span>&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastCapturedEffect</span>: <span class=\"title class_\">Update</span>&lt;<span class=\"title class_\">State</span>&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"update-状态\"><a class=\"markdownIt-Anchor\" href=\"#update-状态\">#</a> update 状态</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//0更新 1替换 2强制更新 3捕获性的更新</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UpdateState</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ReplaceState</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ForceUpdate</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">CaptureUpdate</span> = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/07/react/%E5%B8%B8%E9%87%8F/",
            "url": "http://example.com/2020/09/07/react/%E5%B8%B8%E9%87%8F/",
            "title": "常量",
            "date_published": "2020-09-07T03:03:00.000Z",
            "content_html": "<h2 id=\"roottag\"><a class=\"markdownIt-Anchor\" href=\"#roottag\">#</a> RootTag</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> type <span class=\"title class_\">RootTag</span> = <span class=\"number\">0</span> | <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">LegacyRoot</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">BatchedRoot</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ConcurrentRoot</span> = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"typeofmode\"><a class=\"markdownIt-Anchor\" href=\"#typeofmode\">#</a> TypeOfMode</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> type <span class=\"title class_\">TypeOfMode</span> = number;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NoMode</span> = <span class=\"number\">0b0000</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">StrictMode</span> = <span class=\"number\">0b0001</span>;</span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> Remove BatchedMode and ConcurrentMode by reading from the root</span></span><br><span class=\"line\"><span class=\"comment\">// tag instead</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">BatchedMode</span> = <span class=\"number\">0b0010</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ConcurrentMode</span> = <span class=\"number\">0b0100</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ProfileMode</span> = <span class=\"number\">0b1000</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"worktag\"><a class=\"markdownIt-Anchor\" href=\"#worktag\">#</a> WorkTag</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> type <span class=\"title class_\">WorkTag</span> =</span><br><span class=\"line\">    | <span class=\"number\">0</span></span><br><span class=\"line\">    | <span class=\"number\">1</span></span><br><span class=\"line\">    | <span class=\"number\">2</span></span><br><span class=\"line\">    | <span class=\"number\">3</span></span><br><span class=\"line\">    | <span class=\"number\">4</span></span><br><span class=\"line\">    | <span class=\"number\">5</span></span><br><span class=\"line\">    | <span class=\"number\">6</span></span><br><span class=\"line\">    | <span class=\"number\">7</span></span><br><span class=\"line\">    | <span class=\"number\">8</span></span><br><span class=\"line\">    | <span class=\"number\">9</span></span><br><span class=\"line\">    | <span class=\"number\">10</span></span><br><span class=\"line\">    | <span class=\"number\">11</span></span><br><span class=\"line\">    | <span class=\"number\">12</span></span><br><span class=\"line\">    | <span class=\"number\">13</span></span><br><span class=\"line\">    | <span class=\"number\">14</span></span><br><span class=\"line\">    | <span class=\"number\">15</span></span><br><span class=\"line\">    | <span class=\"number\">16</span></span><br><span class=\"line\">    | <span class=\"number\">17</span></span><br><span class=\"line\">    | <span class=\"number\">18</span></span><br><span class=\"line\">    | <span class=\"number\">19</span></span><br><span class=\"line\">    | <span class=\"number\">20</span></span><br><span class=\"line\">    | <span class=\"number\">21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">FunctionComponent</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ClassComponent</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">IndeterminateComponent</span> = <span class=\"number\">2</span>; <span class=\"comment\">// Before we know whether it is function or class</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostRoot</span> = <span class=\"number\">3</span>; <span class=\"comment\">// Root of a host tree. Could be nested inside another node.</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostPortal</span> = <span class=\"number\">4</span>; <span class=\"comment\">// A subtree. Could be an entry point to a different renderer.</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostComponent</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostText</span> = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Fragment</span> = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Mode</span> = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ContextConsumer</span> = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ContextProvider</span> = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ForwardRef</span> = <span class=\"number\">11</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Profiler</span> = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">SuspenseComponent</span> = <span class=\"number\">13</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">MemoComponent</span> = <span class=\"number\">14</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">SimpleMemoComponent</span> = <span class=\"number\">15</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">LazyComponent</span> = <span class=\"number\">16</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">IncompleteClassComponent</span> = <span class=\"number\">17</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">DehydratedSuspenseComponent</span> = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">EventComponent</span> = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">EventTarget</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">SuspenseListComponent</span> = <span class=\"number\">21</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"executioncontext\"><a class=\"markdownIt-Anchor\" href=\"#executioncontext\">#</a> ExecutionContext</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">ExecutionContext</span> = number;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">NoContext</span> = <span class=\"number\">0b000000</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">BatchedContext</span> = <span class=\"number\">0b000001</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">EventContext</span> = <span class=\"number\">0b000010</span>; <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">DiscreteEventContext</span> = <span class=\"number\">0b000100</span>; <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">LegacyUnbatchedContext</span> = <span class=\"number\">0b001000</span>; <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">RenderContext</span> = <span class=\"number\">0b010000</span>; <span class=\"comment\">// 16</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CommitContext</span> = <span class=\"number\">0b100000</span>; <span class=\"comment\">// 32</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"expirationtime\"><a class=\"markdownIt-Anchor\" href=\"#expirationtime\">#</a> ExpirationTime</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> type <span class=\"title class_\">ExpirationTime</span> = number;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NoWork</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Never</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Sync</span> = <span class=\"variable constant_\">MAX_SIGNED_31_BIT_INT</span>; <span class=\"comment\">// Math.pow(2, 30) - 1</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Batched</span> = <span class=\"title class_\">Sync</span> - <span class=\"number\">1</span>; <span class=\"comment\">// Math.pow(2, 30) - 2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"reactprioritylevel\"><a class=\"markdownIt-Anchor\" href=\"#reactprioritylevel\">#</a> ReactPriorityLevel</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> opaque type <span class=\"title class_\">ReactPriorityLevel</span> = <span class=\"number\">99</span> | <span class=\"number\">98</span> | <span class=\"number\">97</span> | <span class=\"number\">96</span> | <span class=\"number\">95</span> | <span class=\"number\">90</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Except for NoPriority, these correspond to Scheduler priorities. We use</span></span><br><span class=\"line\"><span class=\"comment\">// ascending numbers so we can compare them like numbers. They start at 90 to</span></span><br><span class=\"line\"><span class=\"comment\">// avoid clashing with Scheduler&#x27;s priorities.</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ImmediatePriority</span>: <span class=\"title class_\">ReactPriorityLevel</span> = <span class=\"number\">99</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UserBlockingPriority</span>: <span class=\"title class_\">ReactPriorityLevel</span> = <span class=\"number\">98</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NormalPriority</span>: <span class=\"title class_\">ReactPriorityLevel</span> = <span class=\"number\">97</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">LowPriority</span>: <span class=\"title class_\">ReactPriorityLevel</span> = <span class=\"number\">96</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">IdlePriority</span>: <span class=\"title class_\">ReactPriorityLevel</span> = <span class=\"number\">95</span>;</span><br><span class=\"line\"><span class=\"comment\">// NoPriority is the absence of priority. Also React-only.</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NoPriority</span>: <span class=\"title class_\">ReactPriorityLevel</span> = <span class=\"number\">90</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"sideeffecttag\"><a class=\"markdownIt-Anchor\" href=\"#sideeffecttag\">#</a> SideEffectTag</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> type <span class=\"title class_\">SideEffectTag</span> = number;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Don&#x27;t change these two values. They&#x27;re used by React Dev Tools.</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NoEffect</span> = <span class=\"comment\">/*              */</span> <span class=\"number\">0b000000000000</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">PerformedWork</span> = <span class=\"comment\">/*         */</span> <span class=\"number\">0b000000000001</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// You can change the rest (and add more).</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Placement</span> = <span class=\"comment\">/*             */</span> <span class=\"number\">0b000000000010</span>; <span class=\"comment\">// 替换</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Update</span> = <span class=\"comment\">/*                */</span> <span class=\"number\">0b000000000100</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">PlacementAndUpdate</span> = <span class=\"comment\">/*    */</span> <span class=\"number\">0b000000000110</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Deletion</span> = <span class=\"comment\">/*              */</span> <span class=\"number\">0b000000001000</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ContentReset</span> = <span class=\"comment\">/*          */</span> <span class=\"number\">0b000000010000</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Callback</span> = <span class=\"comment\">/*              */</span> <span class=\"number\">0b000000100000</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">DidCapture</span> = <span class=\"comment\">/*            */</span> <span class=\"number\">0b000001000000</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Ref</span> = <span class=\"comment\">/*                   */</span> <span class=\"number\">0b000010000000</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Snapshot</span> = <span class=\"comment\">/*              */</span> <span class=\"number\">0b000100000000</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Passive</span> = <span class=\"comment\">/*               */</span> <span class=\"number\">0b001000000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Passive &amp; Update &amp; Callback &amp; Ref &amp; Snapshot</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">LifecycleEffectMask</span> = <span class=\"comment\">/*   */</span> <span class=\"number\">0b001110100100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Union of all host effects</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">HostEffectMask</span> = <span class=\"comment\">/*        */</span> <span class=\"number\">0b001111111111</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">Incomplete</span> = <span class=\"comment\">/*            */</span> <span class=\"number\">0b010000000000</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">ShouldCapture</span> = <span class=\"comment\">/*         */</span> <span class=\"number\">0b100000000000</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"supportsmutation\"><a class=\"markdownIt-Anchor\" href=\"#supportsmutation\">#</a> supportsMutation</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在浏览器环境中</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> supportsMutation = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"hookeffecttag\"><a class=\"markdownIt-Anchor\" href=\"#hookeffecttag\">#</a> HookEffectTag</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> type <span class=\"title class_\">HookEffectTag</span> = number;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">NoEffect</span> = <span class=\"comment\">/*             */</span> <span class=\"number\">0b00000000</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UnmountSnapshot</span> = <span class=\"comment\">/*      */</span> <span class=\"number\">0b00000010</span>; <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UnmountMutation</span> = <span class=\"comment\">/*      */</span> <span class=\"number\">0b00000100</span>; <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">MountMutation</span> = <span class=\"comment\">/*        */</span> <span class=\"number\">0b00001000</span>; <span class=\"comment\">// 8</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UnmountLayout</span> = <span class=\"comment\">/*        */</span> <span class=\"number\">0b00010000</span>; <span class=\"comment\">// 16</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">MountLayout</span> = <span class=\"comment\">/*          */</span> <span class=\"number\">0b00100000</span>; <span class=\"comment\">// 32</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">MountPassive</span> = <span class=\"comment\">/*         */</span> <span class=\"number\">0b01000000</span>; <span class=\"comment\">// 64</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UnmountPassive</span> = <span class=\"comment\">/*       */</span> <span class=\"number\">0b10000000</span>; <span class=\"comment\">// 128</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"htmlnodetype\"><a class=\"markdownIt-Anchor\" href=\"#htmlnodetype\">#</a> HTMLNodeType</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">ELEMENT_NODE</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">TEXT_NODE</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">COMMENT_NODE</span> = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">DOCUMENT_NODE</span> = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">DOCUMENT_FRAGMENT_NODE</span> = <span class=\"number\">11</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优先级相关\"><a class=\"markdownIt-Anchor\" href=\"#优先级相关\">#</a> 优先级相关</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> Use symbols?</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">ImmediatePriority</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">UserBlockingPriority</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">NormalPriority</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">LowPriority</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">IdlePriority</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Max 31 bit integer. The max integer size in V8 for 32-bit systems.</span></span><br><span class=\"line\"><span class=\"comment\">// Math.pow(2, 30) - 1</span></span><br><span class=\"line\"><span class=\"comment\">// 0b111111111111111111111111111111</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxSigned31BitInt = <span class=\"number\">1073741823</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Times out immediately</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">IMMEDIATE_PRIORITY_TIMEOUT</span> = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// Eventually times out</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">USER_BLOCKING_PRIORITY</span> = <span class=\"number\">250</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">NORMAL_PRIORITY_TIMEOUT</span> = <span class=\"number\">5000</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">LOW_PRIORITY_TIMEOUT</span> = <span class=\"number\">10000</span>;</span><br><span class=\"line\"><span class=\"comment\">// Never times out</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">IDLE_PRIORITY</span> = maxSigned31BitInt;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "react源码解析"
            ]
        },
        {
            "id": "http://example.com/2020/09/07/react/1.%E5%88%9D%E5%A7%8B%E6%B5%81%E7%A8%8B/",
            "url": "http://example.com/2020/09/07/react/1.%E5%88%9D%E5%A7%8B%E6%B5%81%E7%A8%8B/",
            "title": "初始流程",
            "date_published": "2020-09-07T02:23:00.000Z",
            "content_html": "<p>本次阅读会无视<em> DEV</em> 等没有运行到的分支条件</p>\n<p>react 的渲染主要由 react-dom 完成，首先从 ReactDOM.render 开始</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">ReactDOM</span> = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"keyword\">function</span> (<span class=\"params\">element, container, callback</span>) &#123;</span><br><span class=\"line\">    ... <span class=\"comment\">// 一些验证参数合法的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">legacyRenderSubtreeIntoContainer</span>(<span class=\"literal\">null</span>, element, container, <span class=\"literal\">false</span>, callback);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后看 <code>legacyRenderSubtreeIntoContainer</code></p>\n<p>参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">parentComponent</span>: ?<span class=\"title class_\">React</span>$Component&lt;any, any&gt;, <span class=\"comment\">// 父组件</span></span><br><span class=\"line\">    <span class=\"attr\">children</span>: <span class=\"title class_\">ReactNodeList</span>, <span class=\"comment\">// 已经被处理的react node</span></span><br><span class=\"line\">    <span class=\"attr\">container</span>: <span class=\"title class_\">DOMContainer</span>, <span class=\"comment\">// 挂载dom元素</span></span><br><span class=\"line\">    <span class=\"attr\">forceHydrate</span>: boolean,</span><br><span class=\"line\">    <span class=\"attr\">callback</span>: ?<span class=\"title class_\">Function</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一次进来，root 不存在</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">root</span>: _ReactSyncRoot = (container.<span class=\"property\">_reactRootContainer</span>: any);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fiberRoot;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Initial mount</span></span><br><span class=\"line\">        root = container.<span class=\"property\">_reactRootContainer</span> = <span class=\"title function_\">legacyCreateRootFromDOMContainer</span>(</span><br><span class=\"line\">            container,</span><br><span class=\"line\">            forceHydrate,</span><br><span class=\"line\">        );</span><br><span class=\"line\">        fiberRoot = root.<span class=\"property\">_internalRoot</span>; <span class=\"comment\">// FiberNode</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> originalCallback = callback;</span><br><span class=\"line\">            callback = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> instance = <span class=\"title function_\">getPublicRootInstance</span>(fiberRoot);</span><br><span class=\"line\">                originalCallback.<span class=\"title function_\">call</span>(instance);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Initial mount should not be batched.</span></span><br><span class=\"line\">        <span class=\"title function_\">unbatchedUpdates</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">updateContainer</span>(children, fiberRoot, parentComponent, callback);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">getPublicRootInstance</span>(fiberRoot);</span><br></pre></td></tr></table></figure>\n<p><code>legacyCreateRootFromDOMContainer</code>  的作用是删除 container 中已经存在的子节点，然后返回 <code>new ReactSyncRoot(container, LegacyRoot, shouldHydrate)</code>  // dom, 0, false</p>\n<p>之后是创建 fiber, 见 <code>fiber.md</code> , 然后开始第一次的 mount</p>\n<p><code>unbatchedUpdates</code>  里主要是改变执行状态，然后就执行回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非批量修改， 第一次渲染会执行</span></span><br><span class=\"line\">executionContext = <span class=\"title class_\">NoContext</span>; <span class=\"comment\">// 初始为0（二进制）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> unbatchedUpdates&lt;A, R&gt;(<span class=\"attr\">fn</span>: <span class=\"function\">(<span class=\"params\">a: A</span>) =&gt;</span> R, <span class=\"attr\">a</span>: A): R &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevExecutionContext = executionContext; <span class=\"comment\">// 记住状态</span></span><br><span class=\"line\">    executionContext &amp;= ~<span class=\"title class_\">BatchedContext</span>; <span class=\"comment\">// 删除BatchedContext状态</span></span><br><span class=\"line\">    executionContext |= <span class=\"title class_\">LegacyUnbatchedContext</span>; <span class=\"comment\">// 添加LegacyUnbatchedContext状态</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>(a);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        executionContext = prevExecutionContext; <span class=\"comment\">// 归还状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executionContext === <span class=\"title class_\">NoContext</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Flush the immediate callbacks that were scheduled during this batch</span></span><br><span class=\"line\">            <span class=\"title function_\">flushSyncCallbackQueue</span>(); <span class=\"comment\">// 刷新同步回调队列</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>计算时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">updateContainer</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    element: ReactNodeList, <span class=\"comment\">// children</span></span></span><br><span class=\"line\"><span class=\"params\">    container: OpaqueRoot, <span class=\"comment\">// fiber</span></span></span><br><span class=\"line\"><span class=\"params\">    parentComponent: ?React$Component&lt;any, any&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    callback: ?<span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">ExpirationTime</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = container.<span class=\"property\">current</span>; <span class=\"comment\">// FiberNode</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前时间</span></span><br><span class=\"line\">    <span class=\"comment\">// 在10ms内获取到的是同一数值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentTime = <span class=\"title function_\">requestCurrentTime</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> suspenseConfig = <span class=\"title function_\">requestCurrentSuspenseConfig</span>(); <span class=\"comment\">// null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> expirationTime = <span class=\"title function_\">computeExpirationForFiber</span>(currentTime, current, suspenseConfig);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">updateContainerAtExpirationTime</span>(</span><br><span class=\"line\">        element,</span><br><span class=\"line\">        container,</span><br><span class=\"line\">        parentComponent,</span><br><span class=\"line\">        expirationTime,</span><br><span class=\"line\">        suspenseConfig,</span><br><span class=\"line\">        callback,</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化 container.context，这里暂时不细看，第一次得到的是 {}</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">updateContainerAtExpirationTime</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    element: ReactNodeList,</span></span><br><span class=\"line\"><span class=\"params\">    container: OpaqueRoot,</span></span><br><span class=\"line\"><span class=\"params\">    parentComponent: ?React$Component&lt;any, any&gt;,</span></span><br><span class=\"line\"><span class=\"params\">    expirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\">    suspenseConfig: <span class=\"literal\">null</span> | SuspenseConfig,</span></span><br><span class=\"line\"><span class=\"params\">    callback: ?<span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = container.<span class=\"property\">current</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"title function_\">getContextForSubtree</span>(parentComponent); <span class=\"comment\">// 第一次是 &#123;&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (container.<span class=\"property\">context</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        container.<span class=\"property\">context</span> = context;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        container.<span class=\"property\">pendingContext</span> = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">scheduleRootUpdate</span>(current, element, expirationTime, suspenseConfig, callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"schedulerootupdate\"><a class=\"markdownIt-Anchor\" href=\"#schedulerootupdate\">#</a> scheduleRootUpdate</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">scheduleRootUpdate</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  current: Fiber,</span></span><br><span class=\"line\"><span class=\"params\">  element: ReactNodeList,</span></span><br><span class=\"line\"><span class=\"params\">  expirationTime: ExpirationTime,</span></span><br><span class=\"line\"><span class=\"params\">  suspenseConfig: <span class=\"literal\">null</span> | SuspenseConfig,</span></span><br><span class=\"line\"><span class=\"params\">  callback: ?<span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> update = <span class=\"title function_\">createUpdate</span>(expirationTime, suspenseConfig); <span class=\"comment\">// 返回一个update对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Caution: React DevTools currently depends on this property</span></span><br><span class=\"line\">  <span class=\"comment\">// being called &quot;element&quot;.</span></span><br><span class=\"line\">  update.<span class=\"property\">payload</span> = &#123;element&#125;; <span class=\"comment\">// element是react组件 &#123;type:xxxx...&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">enqueueUpdate</span>(current, update); <span class=\"comment\">// 主要是fiber(current).updateQueue数据变动（初始化）,先不细看</span></span><br><span class=\"line\">  <span class=\"title function_\">scheduleWork</span>(current, expirationTime); <span class=\"comment\">// 完成了到DidMount的生命周期</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> expirationTime;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后是 <code>scheduleWork</code>  即 <code>scheduleUpdateOnFiber</code></p>\n<p>见 <span class=\"exturl\" data-url=\"aHR0cDovL3NjaGVkdWxlLm1k\">schedule.md</span></p>\n<h2 id=\"renderroot\"><a class=\"markdownIt-Anchor\" href=\"#renderroot\">#</a> renderRoot</h2>\n<p>构建 fiber 树和 dom 树，互相对应为参数，能互相找到，并执行了渲染前的生命周期</p>\n<p>见 <span class=\"exturl\" data-url=\"aHR0cDovL3JlbmRlclJvb3QubWQ=\">renderRoot.md</span></p>\n<p>最后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> commitRoot.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, root);</span><br></pre></td></tr></table></figure>\n<h2 id=\"commitroot\"><a class=\"markdownIt-Anchor\" href=\"#commitroot\">#</a> commitRoot</h2>\n<p>见 <span class=\"exturl\" data-url=\"aHR0cDovL2NvbW1pdFJvb3QubWQ=\">commitRoot.md</span></p>\n",
            "tags": [
                "react源码解析"
            ]
        }
    ]
}