{
    "version": "https://jsonfeed.org/version/1",
    "title": "学习笔记 • All posts by \"javascript高级笔记\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/1.js%E7%AE%80%E4%BB%8B/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/1.js%E7%AE%80%E4%BB%8B/",
            "title": "js简介",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h3 id=\"javascript\"><a class=\"markdownIt-Anchor\" href=\"#javascript\">#</a> javascript</h3>\n<ul>\n<li>􏵛􏴞􏲛 核心（ECMAScript􏲜）</li>\n<li>文档对象模型（DOM）</li>\n<li>浏览器对象模型（BOM）</li>\n</ul>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/11.DOM%E6%89%A9%E5%B1%95/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/11.DOM%E6%89%A9%E5%B1%95/",
            "title": "DOM扩展",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"选择符-api\"><a class=\"markdownIt-Anchor\" href=\"#选择符-api\">#</a> 选择符 api</h2>\n<h3 id=\"queryselector\"><a class=\"markdownIt-Anchor\" href=\"#queryselector\">#</a> querySelector</h3>\n<h3 id=\"queryselectorall\"><a class=\"markdownIt-Anchor\" href=\"#queryselectorall\">#</a> queryselectorAll</h3>\n<h3 id=\"matchesselector\"><a class=\"markdownIt-Anchor\" href=\"#matchesselector\">#</a> matchesSelector</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> if (document.body.matchesSelector(&quot;body.page1&quot;))&#123;</span><br><span class=\"line\">        // document.body.matchesSelector is not a function</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>chrome 现在还没支持 (2019-6)</p>\n<h2 id=\"元素遍历\"><a class=\"markdownIt-Anchor\" href=\"#元素遍历\">#</a> 元素遍历</h2>\n<ul>\n<li>childElementCount 返回子元素个数（不包过文本节点和注释）</li>\n<li>firstElementChild 返回第一个子元素</li>\n<li>lastElementChild 返回最后一个子元素</li>\n<li>previousElementSibling 前一个同辈元素</li>\n<li>nextElementSibling 后一个同辈元素</li>\n</ul>\n<h2 id=\"html5\"><a class=\"markdownIt-Anchor\" href=\"#html5\">#</a> HTML5</h2>\n<h3 id=\"class-相关扩充\"><a class=\"markdownIt-Anchor\" href=\"#class-相关扩充\">#</a> class 相关扩充</h3>\n<ol>\n<li>getElementByClassName</li>\n<li>classList</li>\n</ol>\n<ul>\n<li>add (value) 添加一个类，重复不添加</li>\n<li>contains (vale) 是否包含一个类</li>\n<li>remove (value) 删除一个类</li>\n<li>toggle (value) 存在就删除，不存在就添加</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.classList.remove(&quot;disabled&quot;);</span><br><span class=\"line\">div.classList.add(&quot;current&quot;);</span><br></pre></td></tr></table></figure>\n<p>只有 firefox 和 chrome 支持</p>\n<h3 id=\"焦点管理\"><a class=\"markdownIt-Anchor\" href=\"#焦点管理\">#</a> 焦点管理</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var button = document.getElementById(&quot;myButton&quot;);</span><br><span class=\"line\">button.focus();</span><br><span class=\"line\">alert(document.activeElement === button);   //true</span><br><span class=\"line\">alert(document.hasFocus());  //true</span><br></pre></td></tr></table></figure>\n<p>document.activeElement 默认是 document.body</p>\n<h3 id=\"htmldocument-变化\"><a class=\"markdownIt-Anchor\" href=\"#htmldocument-变化\">#</a> HTMLDocument 变化</h3>\n<ul>\n<li>readyState: loading (正在加载) complete (加载完文档)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (document.readyState == &quot;complete&quot;)&#123;</span><br><span class=\"line\">    // TODO􏴤􏱣􏰉􏰊</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>兼容模式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (document.compatMode == &quot;CSS1Compat&quot;)&#123;</span><br><span class=\"line\">        alert(&quot;Standards mode&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">        alert(&quot;Quirks mode&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>head</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var head = document.head || document.getElementsByTagName(&quot;head&quot;)[0];</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符集属性\"><a class=\"markdownIt-Anchor\" href=\"#字符集属性\">#</a> 字符集属性</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(document.charset); //&quot;UTF-16&quot;</span><br><span class=\"line\">document.charset = &quot;UTF-8&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义属性\"><a class=\"markdownIt-Anchor\" href=\"#自定义属性\">#</a> 自定义属性</h3>\n<p>data-*</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div = document.getElementById(&quot;myDiv&quot;);</span><br><span class=\"line\">//􏱏􏷚􏰎定􏰐􏰪􏰌的􏰯</span><br><span class=\"line\">var appId = div.dataset.appId; var myName = div.dataset.myname;</span><br><span class=\"line\">//􏰓􏰔􏰯</span><br><span class=\"line\">div.dataset.appId = 23456; div.dataset.myname = &quot;Michael&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入标记\"><a class=\"markdownIt-Anchor\" href=\"#插入标记\">#</a> 插入标记</h3>\n<ol>\n<li>innerHTML</li>\n<li>outerHTML</li>\n<li>insertAdjacentHTML</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//􏰊􏰝􏱛􏰚􏰒􏱐􏺘􏰶􏰷􏶈􏳖 作为前一个同辈元素插入</span><br><span class=\"line\">element.insertAdjacentHTML(&quot;beforebegin&quot;, &quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;);</span><br><span class=\"line\">//􏰊􏰝􏰀􏰚􏰒􏱁􏰶􏰷􏶈􏳖 第一个</span><br><span class=\"line\">element.insertAdjacentHTML(&quot;afterbegin&quot;, &quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;);</span><br><span class=\"line\">//􏰊􏰝􏰣􏲄􏰚􏰒􏱁􏰶􏰷􏶈􏳖 最后一个</span><br><span class=\"line\">element.insertAdjacentHTML(&quot;beforeend&quot;, &quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;);</span><br><span class=\"line\">//􏰊􏰝􏲄􏰚􏰒􏱐􏺘􏰶􏰷􏶈􏳖 后一个</span><br><span class=\"line\">element.insertAdjacentHTML(&quot;afterend&quot;, &quot;&lt;p&gt;Hello world!&lt;/p&gt;&quot;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"scrollintoview\"><a class=\"markdownIt-Anchor\" href=\"#scrollintoview\">#</a> scrollIntoView</h3>\n<p>让元素进入可见范围</p>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/10.DOM/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/10.DOM/",
            "title": "DOM",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"节点层次\"><a class=\"markdownIt-Anchor\" href=\"#节点层次\">#</a> 节点层次</h2>\n<h3 id=\"node-类型\"><a class=\"markdownIt-Anchor\" href=\"#node-类型\">#</a> Node 类型</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ELEMENT_NODE: 1 // div等</span><br><span class=\"line\">ATTRBUTE_NODE: 2</span><br><span class=\"line\">TEXT_NODE: 3 // 文本节点</span><br><span class=\"line\">CDATA_SECTION_NODE: 4</span><br><span class=\"line\">ENTITY_REFERENCE_NODE: 5</span><br><span class=\"line\">ENTITY_NODE: 6</span><br><span class=\"line\">PROCESSING_INSTRUCTION_NODE: 7</span><br><span class=\"line\">COMMENT_NODE: 8 // 注释节点</span><br><span class=\"line\">DOCUMENT_NODE: 9 // document类型</span><br><span class=\"line\">DOCUMENT_TYPE_NODE: 10</span><br><span class=\"line\">DOCUMENT_FRAGMENT_NODE: 11</span><br><span class=\"line\">NOTATION_NODE: 12</span><br></pre></td></tr></table></figure>\n<h3 id=\"document-类型\"><a class=\"markdownIt-Anchor\" href=\"#document-类型\">#</a> document 类型</h3>\n<p>document 是 HTMLDocument 的一个实例，表示整个 html 页面。document 对象是 window 的一个属性</p>\n<h3 id=\"element-类型-1\"><a class=\"markdownIt-Anchor\" href=\"#element-类型-1\">#</a> element 类型 (1)</h3>\n<ol>\n<li>html 元素</li>\n</ol>\n<p>包含 <code>id</code> , <code>title</code> , <code>lang</code> , <code>className</code> , <code>dir</code> 5 个基本特性，可以直接通过 <span class=\"exturl\" data-url=\"aHR0cDovL2Rpdi54eHg=\">div.xxx</span> 读取或设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div = document.getElementById(&quot;myDiv&quot;);</span><br><span class=\"line\">console.log(div.id)</span><br><span class=\"line\">div.id = &#x27;id&#x27;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>操作特性</li>\n</ol>\n<p><code>getAttribute()􏴎</code>   <code>setAttribute()􏲪</code>   <code>removeAttribute()</code></p>\n<p>可以操作 html 自带的和自定义的特性</p>\n<ol start=\"3\">\n<li>attribute 属性</li>\n</ol>\n<p>Element 类型是使用 attribute 属性的唯一一个 DOM 节点类型。<br>\n保存在 NamedNodeMap 中，拥有以下方法</p>\n<ul>\n<li>getNamedItem (name) 返回 nodeName 属性等于 name 的节点</li>\n<li>removeNamedItem (name) 删除</li>\n<li>setNamedItem (node) 向列表中添加节点、以节点的 nodeName 属性为索引</li>\n<li>item (pos) 返回唯一数字 pos 位置的节点</li>\n</ul>\n<h3 id=\"text-类型-3\"><a class=\"markdownIt-Anchor\" href=\"#text-类型-3\">#</a> Text 类型 (3)</h3>\n<p>可以通过 nodeValue 属性或 data 属性访问 Text 节点中包含的文本</p>\n<ul>\n<li>appendData (text) text 添加到末尾</li>\n<li>deleteData (offset, count) 删除 (offset, offset+count) 位置的文本</li>\n<li>insertData (offset, text) 在 offset 处插入 text</li>\n<li>replaceData (offset, count, text) 用 text 替换 (offset, offset+count) 位置的文本</li>\n<li>splitText (offset) 在 offset 处将文本节点拆分为两个</li>\n<li>substringData (offset, count) 获得 (offset, offset+count) 位置的文本</li>\n</ul>\n<ol>\n<li>创建文本节点</li>\n</ol>\n<p>document.createTextNode()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var element = document.createElement(&quot;div&quot;);</span><br><span class=\"line\">element.className = &quot;message&quot;;</span><br><span class=\"line\">var textNode = document.createTextNode(&quot;Hello world!&quot;);</span><br><span class=\"line\">element.appendChild(textNode);</span><br><span class=\"line\">document.body.appendChild(element);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>规范化文本节点</li>\n</ol>\n<p><code>normalize</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var element = document.createElement(&quot;div&quot;);</span><br><span class=\"line\">element.className = &quot;message&quot;;</span><br><span class=\"line\">var textNode = document.createTextNode(&quot;Hello world!&quot;);</span><br><span class=\"line\">element.appendChild(textNode);</span><br><span class=\"line\">var anotherTextNode = document.createTextNode(&quot;Yippee!&quot;);</span><br><span class=\"line\">element.appendChild(anotherTextNode);</span><br><span class=\"line\">document.body.appendChild(element);</span><br><span class=\"line\">alert(element.childNodes.length);    //2</span><br><span class=\"line\">element.normalize();</span><br><span class=\"line\">alert(element.childNodes.length);    //1</span><br><span class=\"line\">alert(element.firstChild.nodeValue); // &quot;Hello world!Yippee!&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"comment-类型-8\"><a class=\"markdownIt-Anchor\" href=\"#comment-类型-8\">#</a> Comment 类型 (8)</h3>\n<p>Comment 类型与 Text 类型继承自相同的基类，因此他拥有除 splitText 外的所有字符串操作方法</p>\n<h3 id=\"cdatasection-类型-4\"><a class=\"markdownIt-Anchor\" href=\"#cdatasection-类型-4\">#</a> CDATASection 类型 (4)</h3>\n<p>CDATASection 类型只针对基于 XML 的文档，表示的是 CDATA 区域，方法与 Comment 类似 (拥有除 splitText 方法)</p>\n<h3 id=\"documenttype-类型-10\"><a class=\"markdownIt-Anchor\" href=\"#documenttype-类型-10\">#</a> DocumentType 类型 (10)</h3>\n<p>包含于文档的 doctype 有关的所有信息，很少使用。</p>\n<p>通过 <code>document.doctype</code>  读取</p>\n<h3 id=\"documentfragment-类型-11\"><a class=\"markdownIt-Anchor\" href=\"#documentfragment-类型-11\">#</a> DocumentFragment 类型 (11)</h3>\n<p>可以包含和控制节点，但不会像完整的文档那样占用额外的资源，一般当做‘临时仓库’来使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fragment = document.createDocumentFragment();</span><br><span class=\"line\">    var ul = document.getElementById(&quot;myList&quot;);</span><br><span class=\"line\">    var li = null;</span><br><span class=\"line\">    for (var i=0; i &lt; 3; i++)&#123;</span><br><span class=\"line\">        li = document.createElement(&quot;li&quot;);</span><br><span class=\"line\">        li.appendChild(document.createTextNode(&quot;Item &quot; + (i+1)));</span><br><span class=\"line\">        fragment.appendChild(li);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ul.appendChild(fragment);</span><br></pre></td></tr></table></figure>\n<h3 id=\"attr-类型-2\"><a class=\"markdownIt-Anchor\" href=\"#attr-类型-2\">#</a> Attr 类型 (2)</h3>\n<p>元素的特性，id、class 等属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var attr = document.createAttribute(&quot;align&quot;);</span><br><span class=\"line\">attr.value = &quot;left&quot;;</span><br><span class=\"line\">element.setAttributeNode(attr);</span><br><span class=\"line\">alert(element.attributes[&quot;align&quot;].value);</span><br><span class=\"line\">alert(element.getAttributeNode(&quot;align&quot;).value); //&quot;left&quot;</span><br><span class=\"line\">alert(element.getAttribute(&quot;align&quot;));           //&quot;left&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"dom-操作技术\"><a class=\"markdownIt-Anchor\" href=\"#dom-操作技术\">#</a> DOM 操作技术</h2>\n<h3 id=\"动态插入脚本\"><a class=\"markdownIt-Anchor\" href=\"#动态插入脚本\">#</a> 动态插入脚本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loadScriptString(code)&#123;</span><br><span class=\"line\">    var script = document.createElement(&quot;script&quot;);</span><br><span class=\"line\">    script.type = &quot;text/javascript&quot;;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        script.appendChild(document.createTextNode(code));</span><br><span class=\"line\">    &#125; catch (ex)&#123;</span><br><span class=\"line\">        script.text = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    document.body.appendChild(script);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态样式\"><a class=\"markdownIt-Anchor\" href=\"#动态样式\">#</a> 动态样式</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function loadStyleString(css)&#123;</span><br><span class=\"line\">        var style = document.createElement(&quot;style&quot;);</span><br><span class=\"line\">        style.type = &quot;text/css&quot;;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        style.appendChild(document.createTextNode(css));</span><br><span class=\"line\">    &#125; catch (ex)&#123;</span><br><span class=\"line\">        style.styleSheet.cssText = css;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var head = document.getElementsByTagName(&quot;head&quot;)[0];</span><br><span class=\"line\">    head.appendChild(style);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"nodelist\"><a class=\"markdownIt-Anchor\" href=\"#nodelist\">#</a> NodeList</h3>\n<p>NodeList、NamedNodeMap、HTMLCollection 都是即时的，一直保持最新</p>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/13.%E4%BA%8B%E4%BB%B6/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/13.%E4%BA%8B%E4%BB%B6/",
            "title": "事件",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/15.Canvas/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/15.Canvas/",
            "title": "Canvas",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"基本用法\"><a class=\"markdownIt-Anchor\" href=\"#基本用法\">#</a> 基本用法</h2>\n<p>创建获取 canvas</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id=&quot;drawing&quot; width=&quot; 200&quot; height=&quot;200&quot;&gt;A drawing of something.&lt;/canvas&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var drawing = document.getElementById(&quot;drawing&quot;);</span><br><span class=\"line\">if (drawing.getContext)&#123;</span><br><span class=\"line\">    var context = drawing.getContext(&quot;2d&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //􏴺􏸿􏸞􏴿 canvas转化为图片链接</span><br><span class=\"line\">    var imgURI = drawing.toDataURL(&quot;image/png&quot;);</span><br><span class=\"line\">    var image = document.createElement(&quot;img&quot;); image.src = imgURI; document.body.appendChild(image);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2d-上下文\"><a class=\"markdownIt-Anchor\" href=\"#2d-上下文\">#</a> 2D 上下文</h2>\n<h3 id=\"填充fillstyle和描边strokestyle\"><a class=\"markdownIt-Anchor\" href=\"#填充fillstyle和描边strokestyle\">#</a> 填充 (fillStyle) 和描边 (strokeStyle)</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var drawing = document.getElementById(&quot;drawing&quot;);</span><br><span class=\"line\">if (drawing.getContext)&#123;</span><br><span class=\"line\">    var context = drawing.getContext(&quot;2d&quot;);</span><br><span class=\"line\">    context.strokeStyle = &quot;red&quot;;</span><br><span class=\"line\">    context.fillStyle = &quot;#0000ff&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"绘制矩形\"><a class=\"markdownIt-Anchor\" href=\"#绘制矩形\">#</a> 绘制矩形</h3>\n<p><code>fillRect</code>  在画布上绘制矩形会填充指定颜色</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var drawing = document.getElementById(&quot;drawing&quot;);</span><br><span class=\"line\">if (drawing.getContext)&#123;</span><br><span class=\"line\">    var context = drawing.getContext(&quot;2d&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    context.fillStyle = &quot;#ff0000&quot;;</span><br><span class=\"line\">    context.fillRect(10, 10, 50, 50);</span><br><span class=\"line\"></span><br><span class=\"line\">    context.fillStyle = &quot;rgba(0,0,255,0.5)&quot;;</span><br><span class=\"line\">    context.fillRect(30, 30, 50, 50);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>strokeRect</code>  指定矩形描边颜色</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.strokeStyle = &quot;#ff0000&quot;;</span><br><span class=\"line\">context.strokeRect(10, 10, 50, 50);</span><br></pre></td></tr></table></figure>\n<p><code>clearRect</code>  清除画布上指定矩形区域</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.clearRect(40, 40, 10, 10);</span><br></pre></td></tr></table></figure>\n<h3 id=\"绘制路径\"><a class=\"markdownIt-Anchor\" href=\"#绘制路径\">#</a> 绘制路径</h3>\n<ul>\n<li>arc (x, y, radius, startAngle, endAngle, counterclockwise): 以 (x,y) 为圆心，radius 为半径画弧线，startAngle 和 endAngle 是起始结束角度，counterclockwise 为 true 是逆时针</li>\n<li>arcTo (x1, y1, x2, y2, radius): 从上一点开始画一条经过 (x1,y1)(x2,y2) 的以 radius 为半径的弧线</li>\n<li>bezierCurveTo (c1x, c1y, c2x, c2y, x, y)：从上一点开始绘制一条到 (x,y) 的曲线，以 (c1x,c1y)(c2x,c2y) 为控制点。三次贝塞尔曲线</li>\n<li>lineTo (x, y): 从上一点开始画到 (x,y) 的直线</li>\n<li>moveTo (x, y): 把游标移到想 x,y, 不划线</li>\n<li>quadraticCurveTo (cx, cy, x, y): 二次曲线</li>\n<li>rect (x, y, width, height): 绘制矩形路径</li>\n</ul>\n<h3 id=\"绘制文本\"><a class=\"markdownIt-Anchor\" href=\"#绘制文本\">#</a> 绘制文本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.font = &quot;bold 14px Arial&quot;;</span><br><span class=\"line\">context.textAlign = &quot;center&quot;;</span><br><span class=\"line\">context.textBaseline = &quot;middle&quot;;</span><br><span class=\"line\">context.fillText(&quot;文本&quot;, 100, 20);</span><br></pre></td></tr></table></figure>\n<h3 id=\"变换\"><a class=\"markdownIt-Anchor\" href=\"#变换\">#</a> 变换</h3>\n<ul>\n<li>rotate (angle): 围绕远点旋转</li>\n<li>scale (scaleX,scaleY): 缩放</li>\n<li>translate (x,y)􏴣: 将坐标远点移到 (x,y)</li>\n<li>transform (m1_1, m1_2, m2_1, m2_2, dx, dy): 直接修改变换矩阵，即乘以下面矩阵<br>\n m1_1 m1_2 dx<br>\nm2_1 m2_2 dy<br>\n0 0 1</li>\n<li>setTransform (m1_1, m1_2, m2_1, m2_2, dx, dy): 先将矩阵变为默认状态，在用 transform 处理</li>\n</ul>\n<h3 id=\"绘制图像\"><a class=\"markdownIt-Anchor\" href=\"#绘制图像\">#</a> 绘制图像</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var image = document.images[0];</span><br><span class=\"line\">context.drawImage(image, 10, 10); // 指定点绘制图像</span><br><span class=\"line\">context.drawImage(image, 50, 10, 20, 30); // 指钉点绘制指定大小的图形</span><br><span class=\"line\">context.drawImage(image, 0, 10, 50, 50, 0, 100, 40, 60) // 从原图上选取区域指定点绘制图像</span><br></pre></td></tr></table></figure>\n<h3 id=\"阴影\"><a class=\"markdownIt-Anchor\" href=\"#阴影\">#</a> 阴影</h3>\n<ul>\n<li>shadowColor: 阴影颜色，默认黑</li>\n<li>shadowOffsetX: x 方向偏移量，默认 0</li>\n<li>shadowOffsetY: y 方向偏移量，默认 0</li>\n<li>shadowBlur: 模糊像素，默认 0</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">context.shadowOffsetX = 5; context.shadowOffsetY = 5;</span><br><span class=\"line\">context.shadowBlur = 4; context.shadowColor = &quot;rgba(0, 0, 0, 0.5)&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"渐变\"><a class=\"markdownIt-Anchor\" href=\"#渐变\">#</a> 渐变</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gradient = context.createLinearGradient(30, 30, 70, 70);</span><br><span class=\"line\">   gradient.addColorStop(0, &quot;white&quot;);</span><br><span class=\"line\">   gradient.addColorStop(1, &quot;black&quot;);</span><br><span class=\"line\">   context.fillStyle = gradient;</span><br><span class=\"line\">   context.fillRect(30, 30, 50, 50);</span><br></pre></td></tr></table></figure>\n<h3 id=\"模式\"><a class=\"markdownIt-Anchor\" href=\"#模式\">#</a> 模式</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var image = document.images[0],</span><br><span class=\"line\">pattern = context.createPattern(image, &quot;repeat&quot;);</span><br><span class=\"line\">context.fillStyle = pattern; context.fillRect(10, 10, 150, 150);</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用图像数据\"><a class=\"markdownIt-Anchor\" href=\"#使用图像数据\">#</a> 使用图像数据</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var imageData = context.getImageData(10, 5, 50, 50);</span><br></pre></td></tr></table></figure>\n<p>imageData 有 width,height,data 这些属性</p>\n<p>其中 data 是一个数组，保存了每一个像素点的色值，每个像素点取 4 个位置，如第一个点的 rgba 是 data<a href=\"r\">0</a>,data<a href=\"g\">1</a>,data<a href=\"b\">2</a>,data<a href=\"a\">3</a></p>\n<h3 id=\"合成\"><a class=\"markdownIt-Anchor\" href=\"#合成\">#</a> 合成</h3>\n<ul>\n<li>globalAlpha: 操作透明值</li>\n<li>globalCompositionOperation: 当两个图像重叠时，控制重叠方案</li>\n</ul>\n<h2 id=\"webgl\"><a class=\"markdownIt-Anchor\" href=\"#webgl\">#</a> WebGL</h2>\n<p>TODO: 暂时没必要看</p>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/16.HTML5%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/16.HTML5%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/",
            "title": "HTML5脚本编程",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"跨文档消息传递xdm\"><a class=\"markdownIt-Anchor\" href=\"#跨文档消息传递xdm\">#</a> 跨文档消息传递 (XDM)</h2>\n<p>发送消息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iframeWindow = document.getElementById(&quot;myframe&quot;).contentWindow; iframeWindow.postMessage(&quot;A secret&quot;, &quot;http://www.wrox.com&quot;);</span><br></pre></td></tr></table></figure>\n<p>接受消息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventUtil.addHandler(window, &quot;message&quot;, function(event)&#123;</span><br><span class=\"line\">    if (event.origin == &quot;http://www.wrox.com&quot;)&#123;</span><br><span class=\"line\">        processMessage(event.data);</span><br><span class=\"line\">        event.source.postMessage(&quot;Received!&quot;, &quot;http://p2p.wrox.com&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"原生拖放\"><a class=\"markdownIt-Anchor\" href=\"#原生拖放\">#</a> 原生拖放</h2>\n<h3 id=\"拖放事件\"><a class=\"markdownIt-Anchor\" href=\"#拖放事件\">#</a> 拖放事件</h3>\n<p>拖放元素会触发下面方法<br>\n (1) dragstart<br>\n(2) drag<br>\n(3) dragend</p>\n<p>目标元素会触发下面方法<br>\n (1) dragenter<br>\n(2) dragover<br>\n (3) dragleave 或 drop</p>\n<h3 id=\"datatransfer-对象\"><a class=\"markdownIt-Anchor\" href=\"#datatransfer-对象\">#</a> dataTransfer 对象</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event.dataTransfer.setData(&quot;text&quot;, &quot;some text&quot;);</span><br><span class=\"line\">var text = event.dataTransfer.getData(&quot;text&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">event.dataTransfer.setData(&quot;URL&quot;, &quot;http://www.wrox.com/&quot;);</span><br><span class=\"line\">var url = event.dataTransfer.getData(&quot;URL&quot;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"dropeffect-与-effectallowed\"><a class=\"markdownIt-Anchor\" href=\"#dropeffect-与-effectallowed\">#</a> dropEffect 与 effectAllowed</h3>\n<p>传递行为</p>\n<h2 id=\"媒体元素\"><a class=\"markdownIt-Anchor\" href=\"#媒体元素\">#</a> 媒体元素</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;video src=&quot;conference.mpg&quot; id=&quot;myVideo&quot;&gt;Video player not available.&lt;/video&gt;</span><br><span class=\"line\">&lt;audio src=&quot;song.mp3&quot; id=&quot;myAudio&quot;&gt;Audio player not available.&lt;/audio&gt;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/12.DOM2%E5%92%8CDOM3/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/12.DOM2%E5%92%8CDOM3/",
            "title": "DOM2和DOM3",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"dom-变化\"><a class=\"markdownIt-Anchor\" href=\"#dom-变化\">#</a> DOM 变化</h2>\n<p>和 XML 有关，先不看</p>\n<h2 id=\"样式\"><a class=\"markdownIt-Anchor\" href=\"#样式\">#</a> 样式</h2>\n<h3 id=\"访问元素样式\"><a class=\"markdownIt-Anchor\" href=\"#访问元素样式\">#</a> 访问元素样式</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myDiv = document.getElementById(&quot;myDiv&quot;);</span><br><span class=\"line\">myDiv.style.backgroundColor = &quot;red&quot;;</span><br><span class=\"line\">myDiv.style.width = &quot;100px&quot;;</span><br><span class=\"line\">myDiv.style.height = &quot;200px&quot;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"dom-样式的属性和方法\"><a class=\"markdownIt-Anchor\" href=\"#dom-样式的属性和方法\">#</a> dom 样式的属性和方法</h4>\n<ul>\n<li>cssText: 能通过它访问到 style 特性中的 css 代码</li>\n<li>length: style 中 css 数量</li>\n<li>parentRule: 表示 css 信息的 cssRule 对象</li>\n<li>getPropertyCSSValue (propertyName): 返回包含给定属性值的 cssValue 对象</li>\n<li>getPropertyPriority (propertyName): 如果给定的属性使用了！import，返回 import; 否则返回空字符串</li>\n<li>getPropertyValue (propertyName): 返回给定属性的字符串值</li>\n<li>item (index): 返回给定位置的 css 属性的名称</li>\n<li>removeProperty (propertyName): 从样式中删除属性</li>\n<li>setProperty (propertyName,value,priority): 给属性设值，！import</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myDiv.style.cssText = &quot;width: 25px; height: 100px; background-color: green&quot;; alert(myDiv.style.cssText);</span><br></pre></td></tr></table></figure>\n<h4 id=\"计算的样式\"><a class=\"markdownIt-Anchor\" href=\"#计算的样式\">#</a> 计算的样式</h4>\n<p>xxx.style 只能获取 style 里面的属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Computed Styles Example&lt;/title&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        #myDiv &#123;</span><br><span class=\"line\">            background-color: blue;</span><br><span class=\"line\">            width: 100px;</span><br><span class=\"line\">            height: 200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;myDiv&quot; style=&quot;background-color: red; border: 1px solid black&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var myDiv = document.getElementById(&quot;myDiv&quot;);</span><br><span class=\"line\">var computedStyle = document.defaultView.getComputedStyle(myDiv, null);</span><br><span class=\"line\">var computedStyle = myDiv.currentStyle; // IE</span><br><span class=\"line\"> alert(computedStyle.backgroundColor);</span><br><span class=\"line\">alert(computedStyle.width);</span><br><span class=\"line\">alert(computedStyle.height);</span><br><span class=\"line\">alert(computedStyle.border);</span><br></pre></td></tr></table></figure>\n<h3 id=\"元素大小\"><a class=\"markdownIt-Anchor\" href=\"#元素大小\">#</a> 元素大小</h3>\n<h4 id=\"偏移量\"><a class=\"markdownIt-Anchor\" href=\"#偏移量\">#</a> 偏移量</h4>\n<ul>\n<li>offsetHeight: 元素在垂直方向上占用空间大小，包括元素的高度、(可见的) 水平滚动条的高度、上下边框高度</li>\n<li>offsetWidth: 水平方向。。。。</li>\n<li>offsetLeft: 元素左外边框至父元素左内边框之间的距离</li>\n<li>offsetTop: 上。。。</li>\n</ul>\n<h4 id=\"客户区大小\"><a class=\"markdownIt-Anchor\" href=\"#客户区大小\">#</a> 客户区大小</h4>\n<p>元素内容及其内边距所占据的空间大小</p>\n<ul>\n<li>clientWidth: 内容 + 内边距的宽度</li>\n<li>clientHeight: 内容 + 内边距的高度</li>\n</ul>\n<h4 id=\"滚动大小\"><a class=\"markdownIt-Anchor\" href=\"#滚动大小\">#</a> 滚动大小</h4>\n<ul>\n<li>scrollHeight: 没有滚动条的情况下，元素内容的总高度</li>\n<li>scrollWidth: 。。。。总宽度</li>\n<li>scrollLeft: 被影藏在内容区左侧的像素数，可以用来设置滚动条位置</li>\n<li>scrollTop: 上方</li>\n</ul>\n<h3 id=\"遍历\"><a class=\"markdownIt-Anchor\" href=\"#遍历\">#</a> 遍历</h3>\n<h4 id=\"nodeiterator\"><a class=\"markdownIt-Anchor\" href=\"#nodeiterator\">#</a> NodeIterator</h4>\n<p>document.createNodeIterator(root, whatToShow, filter, entityReferenceExpansion)</p>\n<ul>\n<li>root: 搜索起点的节点</li>\n<li>whatToShow: 表示要访问哪些节点的数字代码</li>\n<li>filter: 是一个 NodeFilter 对象，或一个表示应该接受还是拒绝某种特定节点的函数</li>\n<li>entityReferenceExpansion: 表示是否要扩展实体引用</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">    var filter = function(node)&#123;</span><br><span class=\"line\">        return node.tagName.toLowerCase() == &quot;li&quot; ?</span><br><span class=\"line\">            NodeFilter.FILTER_ACCEPT :</span><br><span class=\"line\">            NodeFilter.FILTER_SKIP;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var iterator = document.createNodeIterator(div, NodeFilter.SHOW_ELEMENT, filter, false);</span><br><span class=\"line\">var node = iterator.nextNode();</span><br><span class=\"line\">while (node !== null) &#123;</span><br><span class=\"line\">    alert(node.tagName);</span><br><span class=\"line\">    node = iterator.nextNode();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"treeworker\"><a class=\"markdownIt-Anchor\" href=\"#treeworker\">#</a> TreeWorker</h4>\n<p>document.createTreeWalker () 4 个参数同 createNodeIterator</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div = document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">var walker = document.createTreeWalker(div, NodeFilter.SHOW_ELEMENT, null, false);</span><br><span class=\"line\">walker.firstChild();</span><br><span class=\"line\">walker.nextSibling();</span><br><span class=\"line\">var node = walker.firstChild();</span><br><span class=\"line\">while (node !== null) &#123; alert(node.tagName);</span><br><span class=\"line\">node = walker.nextSibling();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"范围\"><a class=\"markdownIt-Anchor\" href=\"#范围\">#</a> 范围</h2>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/2.%E5%9C%A8html%E4%BD%BF%E7%94%A8js/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/2.%E5%9C%A8html%E4%BD%BF%E7%94%A8js/",
            "title": "在html使用js",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h3 id=\"script\"><a class=\"markdownIt-Anchor\" href=\"#script\">#</a> script</h3>\n<ul>\n<li>async 异步加载，立即执行</li>\n<li>defer 异步加载，延迟执行（在所有元素解析完成之后，DOMContentLoaded 事件触发之前）</li>\n</ul>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/22.%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/22.%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/",
            "title": "高级技巧",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"高级函数\"><a class=\"markdownIt-Anchor\" href=\"#高级函数\">#</a> 高级函数</h2>\n<h3 id=\"安全的类型检测\"><a class=\"markdownIt-Anchor\" href=\"#安全的类型检测\">#</a> 安全的类型检测</h3>\n<p><code>Object.prototype.toString.call</code></p>\n<h3 id=\"作用域安全的构造函数\"><a class=\"markdownIt-Anchor\" href=\"#作用域安全的构造函数\">#</a> 作用域安全的构造函数</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job)&#123;</span><br><span class=\"line\">    if (this instanceof Person)&#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">        this.job = job;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return new Person(name, age, job);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"惰性载入函数\"><a class=\"markdownIt-Anchor\" href=\"#惰性载入函数\">#</a> 惰性载入函数</h3>\n<p>在判断之后直接把判断后的函数赋给当前函数，这样就不用每次都判断了</p>\n<h3 id=\"函数-curry-化\"><a class=\"markdownIt-Anchor\" href=\"#函数-curry-化\">#</a> 函数 curry 化</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function curry(fn)&#123;</span><br><span class=\"line\">    var args = Array.prototype.slice.call(arguments, 1);</span><br><span class=\"line\">    return function()&#123;</span><br><span class=\"line\">        var innerArgs = Array.prototype.slice.call(arguments);</span><br><span class=\"line\">        var finalArgs = args.concat(innerArgs);</span><br><span class=\"line\">        return fn.apply(null, finalArgs);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"防篡改对象\"><a class=\"markdownIt-Anchor\" href=\"#防篡改对象\">#</a> 防篡改对象</h2>\n<h3 id=\"不可扩展对象\"><a class=\"markdownIt-Anchor\" href=\"#不可扩展对象\">#</a> 不可扩展对象</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123; name: &quot;Nicholas&quot; &#125;;</span><br><span class=\"line\">Object.preventExtensions(person);</span><br><span class=\"line\">person.age = 29;</span><br><span class=\"line\">alert(person.age); //undefined</span><br><span class=\"line\">alert(Object.isExtensible(person)); //false</span><br></pre></td></tr></table></figure>\n<h3 id=\"密封的对象\"><a class=\"markdownIt-Anchor\" href=\"#密封的对象\">#</a> 密封的对象</h3>\n<p>不可扩展，[[Configurable]] 为 flase</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123; name: &quot;Nicholas&quot; &#125;;</span><br><span class=\"line\">Object.seal(person);</span><br><span class=\"line\">person.age = 29;</span><br><span class=\"line\">alert(person.age); //undefined</span><br><span class=\"line\">delete person.name;</span><br><span class=\"line\">alert(person.name); //&quot;Nicholas&quot;</span><br><span class=\"line\">alert(Object.isExtensible(person)); //false</span><br><span class=\"line\">alert(Object.isSealed(person));     //true</span><br></pre></td></tr></table></figure>\n<h3 id=\"冻结对象\"><a class=\"markdownIt-Anchor\" href=\"#冻结对象\">#</a> 冻结对象</h3>\n<p>既不可扩展，又是密封的，[[Writable]] 为 false</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123; name: &quot;Nicholas&quot; &#125;;</span><br><span class=\"line\">Object.freeze(person);</span><br><span class=\"line\">person.age = 29;</span><br><span class=\"line\">alert(person.age); //undefined</span><br><span class=\"line\">delete person.name;</span><br><span class=\"line\">alert(person.name); //&quot;Nicholas&quot;</span><br><span class=\"line\">person.name = &quot;Greg&quot;;</span><br><span class=\"line\">alert(person.name); //&quot;Nicholas&quot;</span><br><span class=\"line\">alert(Object.isExtensible(person)); // false</span><br><span class=\"line\">alert(Object.isSealed(person)); // true</span><br><span class=\"line\">alert(Object.isFrozen(person)); // true</span><br></pre></td></tr></table></figure>\n<h2 id=\"高级定时器\"><a class=\"markdownIt-Anchor\" href=\"#高级定时器\">#</a> 高级定时器</h2>\n<h3 id=\"重复的定时器\"><a class=\"markdownIt-Anchor\" href=\"#重复的定时器\">#</a> 重复的定时器</h3>\n<p><code>setTimeout</code>   <code>setInterval</code> <br>\n 定时器的时间并不一定准确</p>\n<h3 id=\"yielding-processes\"><a class=\"markdownIt-Anchor\" href=\"#yielding-processes\">#</a> Yielding Processes</h3>\n<h2 id=\"自定义事件\"><a class=\"markdownIt-Anchor\" href=\"#自定义事件\">#</a> 自定义事件</h2>\n<p>观察者模式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function EventTarget()&#123;</span><br><span class=\"line\">        this.handlers = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    EventTarget.prototype = &#123;</span><br><span class=\"line\">        constructor: EventTarget,</span><br><span class=\"line\">        addHandler: function(type, handler)&#123;</span><br><span class=\"line\">            if (typeof this.handlers[type] == &quot;undefined&quot;)&#123;</span><br><span class=\"line\">                this.handlers[type] = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">            this.handlers[type].push(handler);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        fire: function(event)&#123;</span><br><span class=\"line\">            if (!event.target)&#123;</span><br><span class=\"line\">                event.target = this;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (this.handlers[event.type] instanceof Array)&#123;</span><br><span class=\"line\">                var handlers = this.handlers[event.type];</span><br><span class=\"line\">                for (var i=0, len=handlers.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">                    handlers[i](event);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">&#125; &#125;,</span><br><span class=\"line\">        removeHandler: function(type, handler)&#123;</span><br><span class=\"line\">            if (this.handlers[type] instanceof Array)&#123;</span><br><span class=\"line\">                var handlers = this.handlers[type];</span><br><span class=\"line\">                for (var i=0, len=handlers.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">                    if (handlers[i] === handler)&#123;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">&#125; &#125;</span><br><span class=\"line\">                handlers.splice(i, 1);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/23.%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%82%A8%E5%AD%98/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/23.%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%82%A8%E5%AD%98/",
            "title": "离线应用与客户端储存",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"离线检测\"><a class=\"markdownIt-Anchor\" href=\"#离线检测\">#</a> 离线检测</h2>\n<p>1、<br>\n <code>navigator.onLine</code></p>\n<p>2、</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventUtil.addHandler(window, &quot;online&quot;, function()&#123;</span><br><span class=\"line\">    alert(&quot;Online&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">EventUtil.addHandler(window, &quot;offline&quot;, function()&#123;</span><br><span class=\"line\">    alert(&quot;Offline&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用缓存\"><a class=\"markdownIt-Anchor\" href=\"#应用缓存\">#</a> 应用缓存</h2>\n<p>/offline.manifest 中包含着描述文件，这个文件的 MIME 类型必须是 text/cache-manifest</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html manifest=&quot;/offline.manifest&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据存储\"><a class=\"markdownIt-Anchor\" href=\"#数据存储\">#</a> 数据存储</h2>\n<h3 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\">#</a> Cookie</h3>\n<h4 id=\"限制\"><a class=\"markdownIt-Anchor\" href=\"#限制\">#</a> 限制</h4>\n<p>每个浏览器的 cookie 数量限制不一样，最少的只有 20 个<br>\n尺寸限制 20k 以内</p>\n<h4 id=\"cookie-的构成\"><a class=\"markdownIt-Anchor\" href=\"#cookie-的构成\">#</a> cookie 的构成</h4>\n<ul>\n<li>名称</li>\n<li>值</li>\n<li>域</li>\n<li>路径</li>\n<li>失效时间</li>\n<li>安全标志</li>\n</ul>\n<h3 id=\"storage\"><a class=\"markdownIt-Anchor\" href=\"#storage\">#</a> storage</h3>\n<p>最少的 2.5M</p>\n<h3 id=\"indexeddb\"><a class=\"markdownIt-Anchor\" href=\"#indexeddb\">#</a> IndexedDB</h3>\n<p>浏览器数据库<br>\n TODO: 用的时候再看</p>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/25.New%20Api/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/25.New%20Api/",
            "title": "New Api",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"requestanimationframe\"><a class=\"markdownIt-Anchor\" href=\"#requestanimationframe\">#</a> requestAnimationFrame</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">        function draw(timestamp)&#123;</span><br><span class=\"line\">        var drawStart = (timestamp || Date.now()),</span><br><span class=\"line\">        diff = drawStart - startTime;</span><br><span class=\"line\">        startTime = drawStart;</span><br><span class=\"line\">            requestAnimationFrame(draw);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        var requestAnimationFrame = window.requestAnimationFrame ||</span><br><span class=\"line\">                                    window.mozRequestAnimationFrame ||</span><br><span class=\"line\">                                    window.webkitRequestAnimationFrame ||</span><br><span class=\"line\">                                    window.msRequestAnimationFrame,</span><br><span class=\"line\">            startTime = window.mozAnimationStartTime || Date.now();</span><br><span class=\"line\">        requestAnimationFrame(draw);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h2 id=\"page-visibility-api\"><a class=\"markdownIt-Anchor\" href=\"#page-visibility-api\">#</a> Page Visibility API</h2>\n<ul>\n<li>document.hidden: 页面影藏。包括页面在后台标签或浏览器最小化</li>\n<li>document.visibilityState (现不推荐使用)\n<ul>\n<li>页面在后台标签或浏览器最小化</li>\n<li>页面在前台标签</li>\n<li>页面已隐藏，但通过类似 win7 的预览窗口看到</li>\n<li>页面在屏幕外执行预渲染处理</li>\n</ul>\n</li>\n<li>visibilitychange: 文档可见 (不可见) 变化触发</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isHiddenSupported()&#123;</span><br><span class=\"line\">        return typeof (document.hidden || document.msHidden ||</span><br><span class=\"line\">            document.webkitHidden) != &quot;undefined&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (document.hidden || document.msHidden || document.webKitHidden)&#123;</span><br><span class=\"line\">    //􏸌􏴌􏸍􏸎􏿲页面隐藏了</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    //􏸌􏴌􏾼􏸍􏸎没隐藏</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function handleVisibilityChange()&#123;</span><br><span class=\"line\">    var output = document.getElementById(&quot;output&quot;),</span><br><span class=\"line\">    msg;</span><br><span class=\"line\">    if (document.hidden || document.msHidden || document.webkitHidden)&#123;</span><br><span class=\"line\">        msg = &quot;Page is now hidden. &quot; + (new Date()) + &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        msg = &quot;Page is now visible. &quot; + (new Date()) + &quot;&lt;br&gt;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    output.innerHTML += msg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EventUtil.addHandler(document, &quot;msvisibilitychange&quot;, handleVisibilityChange); EventUtil.addHandler(document, &quot;webkitvisibilitychange&quot;,handleVisibilityChange)</span><br></pre></td></tr></table></figure>\n<h2 id=\"geolocation-api\"><a class=\"markdownIt-Anchor\" href=\"#geolocation-api\">#</a> Geolocation API</h2>\n<p>地理定位 <code>navigator.geolocation </code></p>\n<p>getCurrentPosition()</p>\n<ul>\n<li>latitude: 十进制维度</li>\n<li>longitude：十进制经度</li>\n<li>accuracy：坐标精度，单位米</li>\n<li>altitude：海拔高度 (m)</li>\n<li>altitudeAccuracy: 海拔高度精度 (m)</li>\n<li>heading: 指南针方向 0 表示正北</li>\n<li>speed：每秒移动多少米</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.geolocation.getCurrentPosition(function(position)&#123;</span><br><span class=\"line\">    drawMapCenteredAt(position.coords.latitude, positions.coords.longitude);</span><br><span class=\"line\">&#125;, function(error)&#123; // 错误处理</span><br><span class=\"line\">    console.log(&quot;Error code: &quot; + error.code); console.log(&quot;Error message: &quot; + error.message);</span><br><span class=\"line\">&#125;, &#123; // 设定信息类型</span><br><span class=\"line\">        enableHighAccuracy: true, // 尽可能使用最准确的信息</span><br><span class=\"line\">        timeout: 5000, // 等待位置信息最长时间</span><br><span class=\"line\">        maximumAge: 25000 // 重获坐标时间</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>watchPosition</code>  持续获取位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var watchId = navigator.geolocation.watchPosition(function(position)&#123;</span><br><span class=\"line\">    drawMapCenteredAt(position.coords.latitude, positions.coords.longitude);</span><br><span class=\"line\">&#125;, function(error)&#123;</span><br><span class=\"line\">    console.log(&quot;Error code: &quot; + error.code); console.log(&quot;Error message: &quot; + error.message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">clearWatch(watchId); // 取消</span><br></pre></td></tr></table></figure>\n<h2 id=\"file-api\"><a class=\"markdownIt-Anchor\" href=\"#file-api\">#</a> file API</h2>\n<h3 id=\"filereader\"><a class=\"markdownIt-Anchor\" href=\"#filereader\">#</a> FileReader</h3>\n<ul>\n<li>\n<p>readAsText (file,encoding)：以纯文本读取文件</p>\n</li>\n<li>\n<p>readAsDataURL (file)：读取文件并以数据 uri 的形式保存</p>\n</li>\n<li>\n<p>readAsBinaryString (file)：读取文件字符窜，字符窜中的每一个字符表示一个字节</p>\n</li>\n<li>\n<p>readAsArrayBuffer (file)：读取文件 ArrayBuffer 形式</p>\n</li>\n<li>\n<p>progress􏱢 50ms 触发一次</p>\n</li>\n<li>\n<p>error</p>\n</li>\n<li>\n<p>load</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reader = new FileReader();</span><br><span class=\"line\">reader.onerror = function()&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"读取部分内容\"><a class=\"markdownIt-Anchor\" href=\"#读取部分内容\">#</a> 读取部分内容</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function blobSlice(blob, startByte, length)&#123;</span><br><span class=\"line\">    if (blob.slice)&#123;</span><br><span class=\"line\">        return blob.slice(startByte, length);</span><br><span class=\"line\">    &#125; else if (blob.webkitSlice)&#123;</span><br><span class=\"line\">        return blob.webkitSlice(startByte, length);</span><br><span class=\"line\">    &#125; else if (blob.mozSlice)&#123;</span><br><span class=\"line\">        return blob.mozSlice(startByte, length);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">blob = blobSlice(files[0], 0, 32);</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象-url\"><a class=\"markdownIt-Anchor\" href=\"#对象-url\">#</a> 对象 URL</h3>\n<p>引用保存在 Blob 或 File 中数据的 url</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createObjectURL(blob)&#123;</span><br><span class=\"line\">    if (window.URL)&#123;</span><br><span class=\"line\">        return window.URL.createObjectURL(blob);</span><br><span class=\"line\">    &#125; else if (window.webkitURL)&#123;</span><br><span class=\"line\">        return window.webkitURL.createObjectURL(blob);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">url = createObjectURL(files[0]);</span><br><span class=\"line\">...</span><br><span class=\"line\">output.innerHTML = &quot;&lt;img src=\\&quot;&quot; + url + &quot;\\&quot;&gt;&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"读取拖放的文件\"><a class=\"markdownIt-Anchor\" href=\"#读取拖放的文件\">#</a> 读取拖放的文件</h3>\n<p><code>files = event.dataTransfer.files;</code></p>\n<h3 id=\"使用-xhr-上传文件\"><a class=\"markdownIt-Anchor\" href=\"#使用-xhr-上传文件\">#</a> 使用 XHR 上传文件</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = new FormData();</span><br><span class=\"line\">files = event.dataTransfer.files;</span><br><span class=\"line\">i = 0;</span><br><span class=\"line\">len = files.length;</span><br><span class=\"line\">while (i &lt; len)&#123;</span><br><span class=\"line\">    data.append(&quot;file&quot; + i, files[i]);</span><br><span class=\"line\">i++; &#125;</span><br><span class=\"line\">xhr = new XMLHttpRequest();</span><br><span class=\"line\">xhr.open(&quot;post&quot;, &quot;FileAPIExample06Upload.php&quot;, true);</span><br><span class=\"line\">xhr.onreadystatechange = function()&#123;</span><br><span class=\"line\">    if (xhr.readyState == 4)&#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">&#125; &#125;;</span><br><span class=\"line\">        xhr.send(data);</span><br></pre></td></tr></table></figure>\n<h2 id=\"web-计时\"><a class=\"markdownIt-Anchor\" href=\"#web-计时\">#</a> Web 计时</h2>\n<p><code>window.performance </code></p>\n<h2 id=\"web-workers\"><a class=\"markdownIt-Anchor\" href=\"#web-workers\">#</a> Web Workers</h2>\n<p>让 javascript 在后台运行</p>\n<h3 id=\"使用-worker\"><a class=\"markdownIt-Anchor\" href=\"#使用-worker\">#</a> 使用 Worker</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var worker = new Worker(&quot;stufftodo.js&quot;);</span><br><span class=\"line\">worker.postMessage(􏸢start! &quot;); // 发送消息，可传对象</span><br><span class=\"line\">worker.postMessage(&#123;</span><br><span class=\"line\">        type: &quot;command&quot;,</span><br><span class=\"line\">        message: &quot;start! &quot;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> worker.onmessage = function(event)&#123;</span><br><span class=\"line\">        var data = event.data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">worker.onerror = function(event)&#123; // 运行错误</span><br><span class=\"line\">        console.log(&quot;ERROR: &quot; + event.filename + &quot; (&quot; + event.lineno + &quot;): &quot; +</span><br><span class=\"line\">                    event.message);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">worker.terminate(); // 停止worker</span><br></pre></td></tr></table></figure>\n<h3 id=\"worker-全局作用域\"><a class=\"markdownIt-Anchor\" href=\"#worker-全局作用域\">#</a> Worker 全局作用域</h3>\n<p>worker 与当前网页不共享作用域，也不能访问 dom</p>\n<ul>\n<li>navigator 部分属性</li>\n<li>只读 location 对象</li>\n<li>定时器</li>\n<li>XMLHttpRequest</li>\n</ul>\n<p>eg: worker 排序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// worker内部代码</span></span><br><span class=\"line\">self.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = event.<span class=\"property\">data</span>;</span><br><span class=\"line\">    data.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> a – b;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    self.<span class=\"title function_\">postMessage</span>(data);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 页面代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [<span class=\"number\">23</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">14</span>,<span class=\"number\">6</span>,<span class=\"number\">651</span>,<span class=\"number\">87</span>,<span class=\"number\">41</span>,<span class=\"number\">7798</span>,<span class=\"number\">24</span>],</span><br><span class=\"line\">    worker = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&quot;WebWorkerExample01.js&quot;</span>);</span><br><span class=\"line\">worker.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = event.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"comment\">// data是排序后的数组</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">worker.<span class=\"title function_\">postMessage</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// worker内部</span></span><br><span class=\"line\">self.<span class=\"title function_\">close</span>(); <span class=\"comment\">// 关闭worker</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/21.Ajax%E4%B8%8EComet/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/21.Ajax%E4%B8%8EComet/",
            "title": "Ajax与Comet",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"xmlhttprequest-对象\"><a class=\"markdownIt-Anchor\" href=\"#xmlhttprequest-对象\">#</a> XMLHttpRequest 对象</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ie7以前</span><br><span class=\"line\">function createXHR()&#123;</span><br><span class=\"line\">    if (typeof arguments.callee.activeXString != &quot;string&quot;)&#123;</span><br><span class=\"line\">        var versions = [&quot;MSXML2.XMLHttp.6.0&quot;, &quot;MSXML2.XMLHttp.3.0&quot;,</span><br><span class=\"line\">                        &quot;MSXML2.XMLHttp&quot;],i, len;</span><br><span class=\"line\">        for (i=0,len=versions.length; i &lt; len; i++)&#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                new ActiveXObject(versions[i]);</span><br><span class=\"line\">                arguments.callee.activeXString = versions[i];</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125; catch (ex)&#123;</span><br><span class=\"line\">                //􏰳􏰴</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return new ActiveXObject(arguments.callee.activeXString);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ie7之后</span><br><span class=\"line\">new XMLHttpRequest()</span><br></pre></td></tr></table></figure>\n<h3 id=\"xhr-用法\"><a class=\"markdownIt-Anchor\" href=\"#xhr-用法\">#</a> XHR 用法</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.open(&quot;get&quot;, &quot;example.php&quot;, false); // 方法、url、是否异步</span><br><span class=\"line\">xhr.send(null); // 发送数据</span><br></pre></td></tr></table></figure>\n<p>响应之后 hxr 会有以下属性</p>\n<ul>\n<li>responseText: 返回数据</li>\n<li>responseXML: 内容类型</li>\n<li>status: http 状态</li>\n<li>statusText: http 状态说明</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304)&#123;</span><br><span class=\"line\">      alert(xhr.responseText);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">      alert(&quot;Request was unsuccessful: &quot; + xhr.status);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>异步发送时，需判断 xhr 的 readyState, 才能确定 ajax 的状态</p>\n<ul>\n<li>0：未初始化。未调用 open</li>\n<li>1：启动。已 open 未 send</li>\n<li>2：发送。已 send 未接收到响应</li>\n<li>3：接收。已接收到部分响应数据</li>\n<li>4：完成。接收到全部数据</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = createXHR();</span><br><span class=\"line\">xhr.onreadystatechange = function()&#123;</span><br><span class=\"line\">    if (xhr.readyState == 4)&#123;</span><br><span class=\"line\">        if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304)&#123;</span><br><span class=\"line\">              alert(xhr.responseText);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">             alert(&quot;Request was unsuccessful: &quot; + xhr.status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.open(&quot;get&quot;, &quot;example.txt&quot;, true);</span><br><span class=\"line\">xhr.send(null);</span><br></pre></td></tr></table></figure>\n<h3 id=\"http-头部信息\"><a class=\"markdownIt-Anchor\" href=\"#http-头部信息\">#</a> HTTP 头部信息</h3>\n<p>发送头部信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.setRequestHeader(&quot;MyHeader&quot;, &quot;MyValue&quot;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"xmlhttprequest-2-级\"><a class=\"markdownIt-Anchor\" href=\"#xmlhttprequest-2-级\">#</a> XMLHttpRequest 2 级</h2>\n<h3 id=\"formdata\"><a class=\"markdownIt-Anchor\" href=\"#formdata\">#</a> FormData</h3>\n<p>发送表单数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var form = document.getElementById(&quot;user-info&quot;);</span><br><span class=\"line\">xhr.send(new FormData(form));</span><br></pre></td></tr></table></figure>\n<h3 id=\"超时设定\"><a class=\"markdownIt-Anchor\" href=\"#超时设定\">#</a> 超时设定</h3>\n<p>响应时间过长会停止</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.timeout = 1000; //􏿬􏼭􏾭􏱵􏱹􏱺1􏱻􏱼􏱽􏱾􏱖􏿅􏱗IE8+􏱿</span><br><span class=\"line\">xhr.ontimeout = function()&#123;</span><br><span class=\"line\">    alert(&quot;Request did not return in a second.&quot;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"overridemimetype\"><a class=\"markdownIt-Anchor\" href=\"#overridemimetype\">#</a> overrideMimeType()</h3>\n<p>重写返回的 MIME 类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = createXHR();</span><br><span class=\"line\">xhr.open(&quot;get&quot;, &quot;text.php&quot;, true); xhr.overrideMimeType(&quot;text/xml&quot;);</span><br><span class=\"line\">xhr.send(null);</span><br></pre></td></tr></table></figure>\n<h2 id=\"进度事件\"><a class=\"markdownIt-Anchor\" href=\"#进度事件\">#</a> 进度事件</h2>\n<ul>\n<li>loadstart: 在接收到相应数据的第一个字节时触发</li>\n<li>progress: 响应期间持续触发</li>\n<li>error: 请求发生错误触发</li>\n<li>abort: 在主动调用 abort 时触发</li>\n<li>load: 接收完整数据后触发</li>\n<li>loadend: 类似 finally, 结束都会触发</li>\n</ul>\n<p>progress 进度条</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = createXHR(); 21 xhr.onload = function(event)&#123;</span><br><span class=\"line\">    if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) ||</span><br><span class=\"line\">            xhr.status == 304)&#123;</span><br><span class=\"line\">        alert(xhr.responseText);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        alert(&quot;Request was unsuccessful: &quot; + xhr.status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.onprogress = function(event)&#123;</span><br><span class=\"line\">    var divStatus = document.getElementById(&quot;status&quot;);</span><br><span class=\"line\">    if (event.lengthComputable)&#123;</span><br><span class=\"line\">        divStatus.innerHTML = &quot;Received &quot; + event.position + &quot; of &quot; +</span><br><span class=\"line\">            event.totalSize +&quot; bytes&quot;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">xhr.open(&quot;get&quot;, &quot;altevents.php&quot;, true);</span><br><span class=\"line\">xhr.send(null);</span><br></pre></td></tr></table></figure>\n<h2 id=\"跨域资源共享\"><a class=\"markdownIt-Anchor\" href=\"#跨域资源共享\">#</a> 跨域资源共享</h2>\n<h2 id=\"其他跨域技术\"><a class=\"markdownIt-Anchor\" href=\"#其他跨域技术\">#</a> 其他跨域技术</h2>\n<h3 id=\"图像-ping\"><a class=\"markdownIt-Anchor\" href=\"#图像-ping\">#</a> 图像 ping</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var img = new Image();</span><br><span class=\"line\">img.onload = img.onerror = function()&#123;</span><br><span class=\"line\">    alert(&quot;Done!&quot;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">img.src = &quot;http://www.example.com/test?name=Nicholas&quot;;</span><br></pre></td></tr></table></figure>\n<p>只能 get, 无法响应返回文本，是单向通信</p>\n<h3 id=\"jsonp\"><a class=\"markdownIt-Anchor\" href=\"#jsonp\">#</a> JSONP</h3>\n<p>利用 script 请求数据</p>\n<h3 id=\"comet\"><a class=\"markdownIt-Anchor\" href=\"#comet\">#</a> Comet</h3>\n<p>服务器推送技术，有长轮询和流两种实现方式</p>\n<h4 id=\"长轮询\"><a class=\"markdownIt-Anchor\" href=\"#长轮询\">#</a> 长轮询</h4>\n<p>浏览器发送请求，和服务器保持连接状态，直到服务器有数据更新，结束然后开始新的一次</p>\n<h4 id=\"流\"><a class=\"markdownIt-Anchor\" href=\"#流\">#</a> 流</h4>\n<p>readyState 会周期性的变更为 3<br>\n 利用 readyState 状态 3，持续接收比较数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createStreamingClient(url, progress, finished)&#123;</span><br><span class=\"line\">    var xhr = new XMLHttpRequest(),</span><br><span class=\"line\">        received = 0;</span><br><span class=\"line\">    xhr.open(&quot;get&quot;, url, true);</span><br><span class=\"line\">    xhr.onreadystatechange = function()&#123;</span><br><span class=\"line\">        var result;</span><br><span class=\"line\">        if (xhr.readyState == 3)&#123;</span><br><span class=\"line\">            result = xhr.responseText.substring(received);</span><br><span class=\"line\">            received += result.length;</span><br><span class=\"line\">            progress(result);</span><br><span class=\"line\">        &#125; else if (xhr.readyState == 4)&#123;</span><br><span class=\"line\">            finished(xhr.responseText);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send(null);</span><br><span class=\"line\">    return xhr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var client = createStreamingClient(&quot;streaming.php&quot;, function(data)&#123;</span><br><span class=\"line\">    alert(&quot;Received: &quot; + data);</span><br><span class=\"line\">&#125;, function(data)&#123;</span><br><span class=\"line\">   alert(&quot;Done!&quot;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器发送事件\"><a class=\"markdownIt-Anchor\" href=\"#服务器发送事件\">#</a> 服务器发送事件</h3>\n<p>SSE api 用于创建到服务器的单向连接，服务器可发送任意数据。服务器的响应 MIME 必须是 text/event-stream</p>\n<h4 id=\"sse-api\"><a class=\"markdownIt-Anchor\" href=\"#sse-api\">#</a> SSE API</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var source = new EventSource(&quot;myevents.php&quot;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>open: 建立连接是触发</li>\n<li>mesage：从服务器收到新事件时触发</li>\n<li>error: 无法建立连接触发</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source.onmessage = function(event)&#123;</span><br><span class=\"line\">    var data = event.data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">source.close(); // 关闭</span><br></pre></td></tr></table></figure>\n<h3 id=\"web-sockets\"><a class=\"markdownIt-Anchor\" href=\"#web-sockets\">#</a> Web Sockets</h3>\n<p>Web Sockets 的目标是在一个单独的持久连接上提供全双工、双向通信。</p>\n<h4 id=\"web-sockets-api\"><a class=\"markdownIt-Anchor\" href=\"#web-sockets-api\">#</a> Web Sockets API</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var socket = new WebSocket(&quot;ws://www.example.com/server.php&quot;);</span><br></pre></td></tr></table></figure>\n<p>同源策略对 websockets 不适用<br>\n WebSocket 也有 readyState 属性</p>\n<ul>\n<li>WebSocket.OPENING (0)：正在建立连接</li>\n<li>WebSocket.OPEN (1)􏴣：已经建立连接</li>\n<li>WebSocket.CLOSING (2)：正在关闭连接</li>\n<li>WebSocket.CLOSE (3)：已经关闭连接</li>\n</ul>\n<p>socket.close (); 可以主动关闭连接</p>\n<h4 id=\"发送和接收数据\"><a class=\"markdownIt-Anchor\" href=\"#发送和接收数据\">#</a> 发送和接收数据</h4>\n<p>只能发送纯文本数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var socket = new WebSocket(&quot;ws://www.example.com/server.php&quot;);</span><br><span class=\"line\">    socket.send(&quot;Hello world!&quot;);</span><br><span class=\"line\">    socket.send(JSON.stringify(message));</span><br></pre></td></tr></table></figure>\n<p>接收数据 (只能纯文本)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket.onmessage = function(event)&#123;</span><br><span class=\"line\">    var data = event.data;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"其他事件\"><a class=\"markdownIt-Anchor\" href=\"#其他事件\">#</a> 其他事件</h4>\n<p>在生命周期阶段触发</p>\n<ul>\n<li>open：成功建立连接触发</li>\n<li>error：发生错误是触发，连接不能持续</li>\n<li>close：连接关闭时触发</li>\n</ul>\n<p>只有 close 有 event<br>\nwasClean􏱢(是否关闭)、code (状态码)、reason (服务器返回信息)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">socket.onclose = function(event)&#123;</span><br><span class=\"line\">    console.log(&quot;Was clean? &quot; + event.wasClean + &quot; Code=&quot; + event.code + &quot; Reason=&quot; + event.reason);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/3.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/3.%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/",
            "title": "基本概念",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h3 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 􏽃􏽄􏽅􏸀􏽃􏽄􏽅􏸀 数据类型</h3>\n<p>undefined, null, boolean, string, number, object, symbol(es6)</p>\n<h3 id=\"boolean-转换\"><a class=\"markdownIt-Anchor\" href=\"#boolean-转换\">#</a> boolean 转换</h3>\n<p>true: 非空字符串、非零数值、任何对象<br>\n false: ‘’、0|NaN、null、undefined</p>\n<h3 id=\"string\"><a class=\"markdownIt-Anchor\" href=\"#string\">#</a> String()</h3>\n<ul>\n<li>调用 toString 方法</li>\n<li>特定值：null, undedined, NaN -&gt; ‘null’, ‘undefined’, ‘NaN’</li>\n</ul>\n<h3 id=\"number\"><a class=\"markdownIt-Anchor\" href=\"#number\">#</a> Number()</h3>\n<ul>\n<li>true -&gt; 1, false -&gt; 0</li>\n<li>null -&gt; 0, undefined -&gt; NaN</li>\n<li>字符串只有纯数字和进制会被转成 10 进制，’’ -&gt; 0，其他 -&gt; NaN</li>\n<li>对象 先调用 valueof, 如果是 NaN, 在调用 toString</li>\n</ul>\n<h3 id=\"object\"><a class=\"markdownIt-Anchor\" href=\"#object\">#</a> Object</h3>\n<ul>\n<li>constructor 构造函数</li>\n<li>hasOwnProperty 检测属性是否在对象</li>\n<li>isPrototypeOf 检查传入的对象是否是原型</li>\n<li>propertyIsEnumerable 是否能用 for-in 枚举</li>\n<li>toLocalString 返回对象的字符串表示，结果和执行所在地区有关</li>\n<li>toString 返回对象的字符串表示</li>\n<li>valueOf 返回对象字符串、数值或布尔表示，通常与 toString 相同</li>\n</ul>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/5.%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/5.%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/",
            "title": "引用类型",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h3 id=\"regexp-实力属性\"><a class=\"markdownIt-Anchor\" href=\"#regexp-实力属性\">#</a> RegExp 实力属性</h3>\n<ul>\n<li>global g 全局</li>\n<li>ignoreCase i 不区分大小写</li>\n<li>lastIndex 开始搜索下一个匹配项的字符位置，默认 0</li>\n<li>multiline m 多行</li>\n<li>source 正则的字符串表示</li>\n</ul>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/4.%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%86%85%E5%AD%98/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/4.%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%86%85%E5%AD%98/",
            "title": "变量作用域内存",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/8.BOM/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/8.BOM/",
            "title": "BOM",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"window\"><a class=\"markdownIt-Anchor\" href=\"#window\">#</a> window</h2>\n<p>即使 js 访问浏览器的接口，也是 ESCMScript 的全局 Global 对象</p>\n<h3 id=\"全局作用域\"><a class=\"markdownIt-Anchor\" href=\"#全局作用域\">#</a> 全局作用域</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var age = 29;</span><br><span class=\"line\">function sayAge()&#123;</span><br><span class=\"line\">    alert(this.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">alert(window.age); //29</span><br><span class=\"line\">sayAge(); //29</span><br><span class=\"line\"> window.sayAge(); //29</span><br></pre></td></tr></table></figure>\n<p>使用 var 添加的全局属性的 configurable 默认为 false, 所有不能 <code>delete window.age</code> （无效）</p>\n<h3 id=\"弹出窗口\"><a class=\"markdownIt-Anchor\" href=\"#弹出窗口\">#</a> 弹出窗口</h3>\n<p>检测弹出窗是否被屏蔽</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var blocked = false;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">        var wroxWin = window.open(&quot;http://www.wrox.com&quot;, &quot;_blank&quot;);</span><br><span class=\"line\">        if (wroxWin == null)&#123;</span><br><span class=\"line\">            blocked = true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125; catch (ex)&#123;</span><br><span class=\"line\">    blocked = true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (blocked)&#123;</span><br><span class=\"line\">    alert(&quot;The popup was blocked!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"navigator\"><a class=\"markdownIt-Anchor\" href=\"#navigator\">#</a> navigator</h2>\n<h3 id=\"检测插件\"><a class=\"markdownIt-Anchor\" href=\"#检测插件\">#</a> 检测插件</h3>\n<p><code>navigator.plugins</code></p>\n<ul>\n<li>name</li>\n<li>description</li>\n<li>filename</li>\n<li>length 插件所处理的 MIME 类型数量</li>\n</ul>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/7.%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/7.%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "函数表达式",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"函数闭包\"><a class=\"markdownIt-Anchor\" href=\"#函数闭包\">#</a> 函数闭包</h2>\n<p><code>闭包</code> 是指有权访问另一个函数作用域中的变量的函数</p>\n<h2 id=\"内存泄漏\"><a class=\"markdownIt-Anchor\" href=\"#内存泄漏\">#</a> 内存泄漏</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function assignHandler()&#123;</span><br><span class=\"line\">        var element = document.getElementById(&quot;someElement&quot;);</span><br><span class=\"line\">        element.onclick = function()&#123;</span><br><span class=\"line\">            alert(element.id);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>↓</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function assignHandler()&#123;</span><br><span class=\"line\">var element = document.getElementById(&quot;someElement&quot;); var id = element.id;</span><br><span class=\"line\">        element.onclick = function()&#123;</span><br><span class=\"line\">alert(id);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">        element = null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>把 element 设为 null, 可以借出对 dom 对象的引用，回收其占用的内存</p>\n<h2 id=\"私有变量\"><a class=\"markdownIt-Anchor\" href=\"#私有变量\">#</a> 私有变量</h2>\n<p>任何在函数中定义的变量，都可以叫做 <code>私有变量</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(num1, num2)&#123;</span><br><span class=\"line\">        var sum = num1 + num2;</span><br><span class=\"line\">        return sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把有权访问私有变量和私有函数的公有方法称为 <code>特权方法</code></p>\n<ol>\n<li>在构造函数中定义特权方法</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function MyObject()&#123;</span><br><span class=\"line\">    var privateVariable = 10;</span><br><span class=\"line\">    function privateFunction()&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.publicMethod = function ()&#123;</span><br><span class=\"line\">        privateVariable++;</span><br><span class=\"line\">        return privateFunction();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>利用私有和特权成员，隐藏那些不应该被直接修改的数据</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name)&#123;</span><br><span class=\"line\">    this.getName = function()&#123;</span><br><span class=\"line\">        return name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    this.setName = function (value) &#123;</span><br><span class=\"line\">        name = value;</span><br><span class=\"line\">&#125;; &#125;</span><br><span class=\"line\">var person = new Person(&quot;Nicholas&quot;);</span><br><span class=\"line\">alert(person.getName());   //&quot;Nicholas&quot;</span><br><span class=\"line\">person.setName(&quot;Greg&quot;);</span><br><span class=\"line\">alert(person.getName());   //&quot;Greg&quot;</span><br></pre></td></tr></table></figure>\n<p>缺点：构造函数会给每个实例创建相同的方法，浪费</p>\n<h3 id=\"静态私有变量\"><a class=\"markdownIt-Anchor\" href=\"#静态私有变量\">#</a> 静态私有变量</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">        var name = &quot;&quot;;</span><br><span class=\"line\">        Person = function(value)&#123;</span><br><span class=\"line\">            name = value;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Person.prototype.getName = function()&#123;</span><br><span class=\"line\">            return name;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        Person.prototype.setName = function (value)&#123;</span><br><span class=\"line\">            name = value;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">var person1 = new Person(&quot;Nicholas&quot;);</span><br><span class=\"line\">alert(person1.getName()); //&quot;Nicholas&quot;</span><br><span class=\"line\">person1.setName(&quot;Greg&quot;);</span><br><span class=\"line\">alert(person1.getName()); //&quot;Greg&quot;</span><br><span class=\"line\">var person2 = new Person(&quot;Michael&quot;);</span><br><span class=\"line\">alert(person1.getName()); //&quot;Michael&quot;</span><br><span class=\"line\">alert(person2.getName()); //&quot;Michael&quot;</span><br></pre></td></tr></table></figure>\n<p>定义全局构造函数，但每个实例没有自己的私有变量</p>\n<h3 id=\"模块模式\"><a class=\"markdownIt-Anchor\" href=\"#模块模式\">#</a> 模块模式</h3>\n<p>模块模式通过为单例添加私有变量和特权方法来使其增强</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var singleton = function()&#123;</span><br><span class=\"line\">    var privateVariable = 10;</span><br><span class=\"line\">    function privateFunction()&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        publicProperty: true,</span><br><span class=\"line\">        publicMethod : function()&#123;</span><br><span class=\"line\">            privateVariable++;</span><br><span class=\"line\">            return privateFunction();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/6.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/6.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "title": "面向对象",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"对象\"><a class=\"markdownIt-Anchor\" href=\"#对象\">#</a> 对象</h2>\n<h3 id=\"属性类型\"><a class=\"markdownIt-Anchor\" href=\"#属性类型\">#</a> 属性类型</h3>\n<h4 id=\"数据属性\"><a class=\"markdownIt-Anchor\" href=\"#数据属性\">#</a> 数据属性</h4>\n<ul>\n<li>\n<p>[[Configurable]] 能否通过 delete 删除属性，通过 defineProperty 编辑数据属性 默认 true</p>\n</li>\n<li>\n<p>[[Enumerable]] 能否用 for-in 循环属性 默认 true</p>\n</li>\n<li>\n<p>[[Wtirable]] 能否修改属性的值 默认 true</p>\n</li>\n<li>\n<p>[[Value]] 属性的数据值 默认 undefined</p>\n</li>\n<li>\n<p>[[Get]] 在读取属性时调用的函数 默认 undefined 旧浏览器兼容可使用<strong> defineGetter</strong></p>\n</li>\n<li>\n<p>[[Set]] 在写入属性时调用的函数 默认 undefined 旧浏览器兼容可使用<strong> defineSetter</strong></p>\n</li>\n</ul>\n<h3 id=\"定义多个属性\"><a class=\"markdownIt-Anchor\" href=\"#定义多个属性\">#</a> 定义多个属性</h3>\n<p>Object.defineProperties(obj, {xxx:{value:sss}})</p>\n<h3 id=\"读取属性的特性\"><a class=\"markdownIt-Anchor\" href=\"#读取属性的特性\">#</a> 读取属性的特性</h3>\n<p>Object.getOwnPropertyDescriptor (obj, key) 读取 configurable 等属性</p>\n<h2 id=\"创建对象\"><a class=\"markdownIt-Anchor\" href=\"#创建对象\">#</a> 创建对象</h2>\n<h3 id=\"工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#工厂模式\">#</a> 工厂模式</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name, age, job)&#123;</span><br><span class=\"line\">        var o = new Object();</span><br><span class=\"line\">        o.name = name;</span><br><span class=\"line\">        o.age = age;</span><br><span class=\"line\">        o.job = job;</span><br><span class=\"line\">        o.sayName = function()&#123;</span><br><span class=\"line\">            alert(this.name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = createPerson(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br></pre></td></tr></table></figure>\n<p>缺点：不能识别对象</p>\n<h3 id=\"构造函数模式\"><a class=\"markdownIt-Anchor\" href=\"#构造函数模式\">#</a> 构造函数模式</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job)&#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.age = age;</span><br><span class=\"line\">        this.job = job;</span><br><span class=\"line\">        this.sayName = function()&#123;</span><br><span class=\"line\">            alert(this.name);</span><br><span class=\"line\">&#125;; &#125;</span><br><span class=\"line\">    var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br></pre></td></tr></table></figure>\n<p>使用 new 会经历 4 个步骤</p>\n<ol>\n<li>创建一个新的对象</li>\n<li>设置原型链</li>\n<li>把 this 指向新对象并执行</li>\n<li>判断返回值类型，如果是值类型 (undexfined 等), 返回上面对象；如果是引用类型 (this 等), 返回引用类型的对象</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function newFunc (name) &#123;</span><br><span class=\"line\">    var o = &#123;&#125;;</span><br><span class=\"line\">    o.__proto__ = Person.prototype;//绑定Person的原型</span><br><span class=\"line\">    Person.call(o, name);</span><br><span class=\"line\">    return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">作者：MeloGuo</span><br><span class=\"line\">链接：https://www.zhihu.com/question/36440948/answer/213711157</span><br><span class=\"line\">来源：知乎</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>\n<p>缺点：部分属性不共享，浪费内存</p>\n<h3 id=\"原型模式\"><a class=\"markdownIt-Anchor\" href=\"#原型模式\">#</a> 原型模式</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.prototype.name = &quot;Nicholas&quot;;</span><br><span class=\"line\">    Person.prototype.age = 29;</span><br><span class=\"line\">    Person.prototype.job = &quot;Software Engineer&quot;;</span><br><span class=\"line\">    Person.prototype.sayName = function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    var person1 = new Person();</span><br><span class=\"line\">    person1.sayName();   //&quot;Nicholas&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"理解原型对象\"><a class=\"markdownIt-Anchor\" href=\"#理解原型对象\">#</a> 理解原型对象</h4>\n<p>只要创建一个新函数，就会为该函数创建一个 prototype 属性，这个属性指向函数的原型对象。默认情况下，所有的原型对象都会获得一个 constructor (构造函数) 属性，指向原型对象所在函数本身。<br>\nPerson.prototype.constructor === Person</p>\n<h4 id=\"原型与-in\"><a class=\"markdownIt-Anchor\" href=\"#原型与-in\">#</a> 原型与 in</h4>\n<p>无论属性存在实例还是原型中，in 都能访问到<br>\n hasPrototypeProperty 只能访问到实例属性<br>\n下面方法能判断属性只存在于原型中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function hasPrototypeProperty(object, name)&#123;</span><br><span class=\"line\">        return !object.hasOwnProperty(name) &amp;&amp; (name in object);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for-in 能访问到可枚举的，存在于原型或实例中的属性<br>\n Object.keys 能访问到可枚举的，只存在于实例中的属性<br>\n Object.getOwnPropertyNames 能访问到枚举或不可枚举的，只存在于实例中的属性</p>\n<h4 id=\"同时设置多个-prototype\"><a class=\"markdownIt-Anchor\" href=\"#同时设置多个-prototype\">#</a> 同时设置多个 prototype</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Person.prototype = &#123;</span><br><span class=\"line\">        name : &quot;Nicholas&quot;,</span><br><span class=\"line\">        age : 29,</span><br><span class=\"line\">        job : &quot;Software Engineer&quot;,</span><br><span class=\"line\">        sayName : function () &#123;&#125;,</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">     Object.defineProperty(Person.prototype, &quot;constructor&quot;, &#123;</span><br><span class=\"line\">        enumerable: false,</span><br><span class=\"line\">        value: Person</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>constructor 是不可枚举的，不能直接设置 Person.prototype.constructor = Person</p>\n<p>缺点：所有值都是共享的，如果是数组等数据，会出现无法单独修改的情况</p>\n<h3 id=\"组合使用原型模式和构造函数模式\"><a class=\"markdownIt-Anchor\" href=\"#组合使用原型模式和构造函数模式\">#</a> 组合使用原型模式和构造函数模式</h3>\n<p>构造函数用于定义实例属性，原型模式用于定义方法和共享属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">    this.job = job;</span><br><span class=\"line\">    this.friends = [&quot;Shelby&quot;, &quot;Court&quot;];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">    constructor : Person,</span><br><span class=\"line\">    sayName : function()&#123;</span><br><span class=\"line\">        alert(this.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br><span class=\"line\">var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">person1.friends.push(&quot;Van&quot;);</span><br><span class=\"line\">alert(person1.friends);    //&quot;Shelby,Count,Van&quot;</span><br><span class=\"line\">alert(person2.friends);    //&quot;Shelby,Count&quot;</span><br><span class=\"line\">alert(person1.friends === person2.friends);</span><br><span class=\"line\">alert(person1.sayName === person2.sayName);</span><br><span class=\"line\">//false</span><br><span class=\"line\">//true</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态原型模式\"><a class=\"markdownIt-Anchor\" href=\"#动态原型模式\">#</a> 动态原型模式</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;</span><br><span class=\"line\">    if (typeof this.sayName != &quot;function&quot;)&#123;</span><br><span class=\"line\">        Person.prototype.sayName = function()&#123;</span><br><span class=\"line\">                alert(this.name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"寄生构造函数模式\"><a class=\"markdownIt-Anchor\" href=\"#寄生构造函数模式\">#</a> 寄生构造函数模式</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age, job)&#123;</span><br><span class=\"line\">        var o = new Object();</span><br><span class=\"line\">        o.name = name;</span><br><span class=\"line\">        o.age = age;</span><br><span class=\"line\">        o.job = job;</span><br><span class=\"line\">        o.sayName = function()&#123;</span><br><span class=\"line\">            alert(this.name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    var friend = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br><span class=\"line\">    friend.sayName();  //&quot;Nicholas&quot;</span><br></pre></td></tr></table></figure>\n<p>可以用这种方式扩展原生对象属性，但创建出来的对象和构造函数无关，也不能用 instanceof 确定类型，一般不使用</p>\n<h3 id=\"稳妥构造函数模式\"><a class=\"markdownIt-Anchor\" href=\"#稳妥构造函数模式\">#</a> 稳妥构造函数模式</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unction Person(name, age, job)&#123;</span><br><span class=\"line\">        var o = new Object();</span><br><span class=\"line\">        var name = name;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        o.sayName = function()&#123;</span><br><span class=\"line\">            alert(this.name);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    var friend = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</span><br><span class=\"line\">    friend.sayName();  //&quot;Nicholas&quot;</span><br></pre></td></tr></table></figure>\n<p>属性不会被外部修改，推荐用在安全环境</p>\n<h2 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h2>\n<h3 id=\"原型链\"><a class=\"markdownIt-Anchor\" href=\"#原型链\">#</a> 原型链</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function SuperType()&#123;</span><br><span class=\"line\">        this.property = true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SuperType.prototype.getSuperValue = function()&#123;</span><br><span class=\"line\">    return this.property;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function SubType()&#123;</span><br><span class=\"line\">    this.subproperty = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//􏸕􏴫􏽙 SuperType</span><br><span class=\"line\">SubType.prototype = new SuperType();</span><br><span class=\"line\">SubType.prototype.getSubValue = function ()&#123;</span><br><span class=\"line\">    return this.subproperty;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">var instance = new SubType();</span><br><span class=\"line\">alert(instance.getSuperValue()); // true</span><br></pre></td></tr></table></figure>\n<p>缺点：引用类型属性共享，没有办法在不影响所有对象实例的情况下给超类型的构造函数传参（超类型的实例属性会被改变）</p>\n<h3 id=\"借用构造函数\"><a class=\"markdownIt-Anchor\" href=\"#借用构造函数\">#</a> 借用构造函数</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function SuperType()&#123;</span><br><span class=\"line\">    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> function SubType()&#123;</span><br><span class=\"line\">    SuperType.call(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var instance1 = new SubType();</span><br><span class=\"line\">instance1.colors.push(&quot;black&quot;);</span><br><span class=\"line\">alert(instance1.colors);    //&quot;red,blue,green,black&quot;</span><br><span class=\"line\">var instance2 = new SubType();</span><br><span class=\"line\">alert(instance2.colors);    //&quot;red,blue,green&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function SuperType(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function SubType()&#123;</span><br><span class=\"line\">    SuperType.call(this, &quot;Nicholas&quot;);</span><br><span class=\"line\">    this.age = 29;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var instance = new SubType();</span><br><span class=\"line\">alert(instance.name);    //&quot;Nicholas&quot;;</span><br><span class=\"line\">alert(instance.age);     //29</span><br></pre></td></tr></table></figure>\n<p>缺点：无法复用</p>\n<h3 id=\"组合继承\"><a class=\"markdownIt-Anchor\" href=\"#组合继承\">#</a> 组合继承</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function SuperType(name)&#123;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = function()&#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function SubType(name, age)&#123;</span><br><span class=\"line\">    SuperType.call(this, name);</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SubType.prototype = new SuperType();</span><br><span class=\"line\">SubType.prototype.constructor = SubType;</span><br><span class=\"line\">SubType.prototype.sayAge = function()&#123;</span><br><span class=\"line\">    alert(this.age);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var instance1 = new SubType(&quot;Nicholas&quot;, 29);</span><br><span class=\"line\">instance1.colors.push(&quot;black&quot;);</span><br><span class=\"line\">alert(instance1.colors); //&quot;red,blue,green,black&quot;</span><br><span class=\"line\">instance1.sayName(); //&quot;Nicholas&quot;;</span><br><span class=\"line\">instance1.sayAge(); //29</span><br><span class=\"line\"></span><br><span class=\"line\">var instance2 = new SubType(&quot;Greg&quot;, 27);</span><br><span class=\"line\">alert(instance2.colors); //&quot;red,blue,green&quot;</span><br><span class=\"line\">instance2.sayName(); //&quot;Greg&quot;;</span><br><span class=\"line\">instance2.sayAge(); //27</span><br></pre></td></tr></table></figure>\n<h3 id=\"原型式继承\"><a class=\"markdownIt-Anchor\" href=\"#原型式继承\">#</a> 原型式继承</h3>\n<p>Object.create()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function object(o)&#123;</span><br><span class=\"line\">    function F()&#123;&#125;</span><br><span class=\"line\">    F.prototype = o;</span><br><span class=\"line\">    return new F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"寄生式继承\"><a class=\"markdownIt-Anchor\" href=\"#寄生式继承\">#</a> 寄生式继承</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createAnother(original)&#123;</span><br><span class=\"line\">    var clone=object(original);</span><br><span class=\"line\">    clone.sayHi = function()&#123;</span><br><span class=\"line\">        alert(&quot;hi&quot;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    return clone;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在原型式继承的基础上添加了自己的方法 (sayHi)</p>\n<h3 id=\"寄生组合式继承\"><a class=\"markdownIt-Anchor\" href=\"#寄生组合式继承\">#</a> 寄生组合式继承</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function inheritPrototype(subType, superType)&#123;</span><br><span class=\"line\">    var prototype = object(superType.prototype);</span><br><span class=\"line\">    prototype.constructor = subType;</span><br><span class=\"line\">    subType.prototype = prototype;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function SuperType(name)&#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">    this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SuperType.prototype.sayName = function()&#123;</span><br><span class=\"line\">    alert(this.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function SubType(name, age)&#123;</span><br><span class=\"line\">    SuperType.call(this, name);</span><br><span class=\"line\">    this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inheritPrototype(SubType, SuperType);</span><br><span class=\"line\">SubType.prototype.sayAge = function()&#123;</span><br><span class=\"line\">    alert(this.age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只调用了一次 SuperType 构造函数，并且在 SubType 的 prototype 上没有多余的属性，可以说是目前能选择的最佳继承方案了</p>\n",
            "tags": [
                "javascript高级笔记"
            ]
        },
        {
            "id": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/17.%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%84%E7%90%86%E4%B8%8E%E8%B0%83%E8%AF%95/",
            "url": "http://example.com/2019/06/14/js%E9%AB%98%E7%BA%A7/17.%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%84%E7%90%86%E4%B8%8E%E8%B0%83%E8%AF%95/",
            "title": "错误的处理与调试",
            "date_published": "2019-06-13T16:00:00.000Z",
            "content_html": "<h2 id=\"浏览器报告的错误\"><a class=\"markdownIt-Anchor\" href=\"#浏览器报告的错误\">#</a> 浏览器报告的错误</h2>\n<h2 id=\"错误处理\"><a class=\"markdownIt-Anchor\" href=\"#错误处理\">#</a> 错误处理</h2>\n<h3 id=\"try-catch\"><a class=\"markdownIt-Anchor\" href=\"#try-catch\">#</a> try-catch</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try&#123;</span><br><span class=\"line\">    // 可能会出错的代码</span><br><span class=\"line\">&#125; catch(error)&#123;</span><br><span class=\"line\">    // 处理</span><br><span class=\"line\">    console.error(error)</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">    // 都会执行</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"错误类型\"><a class=\"markdownIt-Anchor\" href=\"#错误类型\">#</a> 错误类型</h4>\n<ul>\n<li>Error</li>\n<li>EvalError: eval 报错 eg: new eval ();</li>\n<li>RangeError: 数值超出范围 eg: var items1 = new Array (-20);</li>\n<li>ReferenceError: 访问不存在的变量</li>\n<li>SyntaxError: 在 eval 中使用错误语法 eg: eval (“a ++ b”)</li>\n<li>TypeError: 类型错误 eg: var o = new 10;</li>\n<li>URIError: encodeURI 传入格式不正确</li>\n</ul>\n<h3 id=\"抛出错误\"><a class=\"markdownIt-Anchor\" href=\"#抛出错误\">#</a> 抛出错误</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throw 12345;</span><br><span class=\"line\">// 模拟浏览器错误</span><br><span class=\"line\">throw new SyntaxError(&quot;I don’t like your syntax.&quot;);</span><br><span class=\"line\">throw new TypeError(&quot;What type of variable do you take me for?&quot;); throw new RangeError(&quot;Sorry, you just don’t have the range.&quot;);</span><br><span class=\"line\">throw new EvalError(&quot;That doesn’t evaluate.&quot;);</span><br><span class=\"line\">throw new URIError(&quot;Uri, is that you?&quot;);</span><br><span class=\"line\">throw new ReferenceError(&quot;You didn’t cite your references properly.&quot;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误事件\"><a class=\"markdownIt-Anchor\" href=\"#错误事件\">#</a> 错误事件</h3>\n<p>没有通过 try-catch 处理的错误都会触发 window.error</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onerror = function(message, url, line)&#123;</span><br><span class=\"line\">        alert(message);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "javascript高级笔记"
            ]
        }
    ]
}