{
    "version": "https://jsonfeed.org/version/1",
    "title": "学习笔记 • All posts by \"bue笔记\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2017/05/25/bue/readme/",
            "url": "http://example.com/2017/05/25/bue/readme/",
            "title": "说明",
            "date_published": "2017-05-25T01:50:00.000Z",
            "content_html": "<p>百度 ife 任务里根据 vue 早期版本的源码研究而实现的简单 vue 项目 —Bue</p>\n<p>这里是我对 bue 的学习笔记</p>\n",
            "tags": [
                "Bue笔记"
            ]
        },
        {
            "id": "http://example.com/2017/05/25/bue/6/",
            "url": "http://example.com/2017/05/25/bue/6/",
            "title": "Bue源码阅读笔记（6）",
            "date_published": "2017-05-25T01:50:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nd2luZC9idWUvdHJlZS85ZTk4MDRjMmVlODAyYzI2NTgxOTkyMzZiMTBkYTQyZDZlYTE2MTM2\">当前版本</span></p>\n<h3 id=\"进展\"><a class=\"markdownIt-Anchor\" href=\"#进展\">#</a> 进展</h3>\n<ul>\n<li>v-on 实现</li>\n<li>完成动态 v-if 指令</li>\n</ul>\n<h3 id=\"代码执行补充\"><a class=\"markdownIt-Anchor\" href=\"#代码执行补充\">#</a> 代码执行补充</h3>\n<p>v-on: 和 v-if 类似，_init () 中把 on 指令相关函数放在了 directives 里面 --&gt; 使用 on 相关指令绑定事件</p>\n<p>v-repeat: 和 v-if 类似，_init () 中把 on 指令相关函数放在了 directives 里面 --&gt; 使用 repeat 相关指令绑定事件</p>\n<p>5.30 补充<br>\n这里需要详细的了解一下 repeat 指令里面的流程</p>\n<ul>\n<li>\n<ol>\n<li>首先执行 bind (), 给 repeat 指定了唯一的 uid, 并创建 repeat 注释</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>upadate<br>\na. 首次执行：进入 diff, 调用 build (), 给 v-repeat 内部变量 item 赋值，为 item 创建了 Bue 实例和数据缓存 (循环的子数据 (最终来看就是 item)[<span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMuaWQ=\">this.id</span>] = vm (即新创建的 Bue 实例)), 渲染 dom<br>\nb. 再次执行：数据变化之后，进入 diff, 判断是否有旧数据并打上记号，删除不存在的实例，把新实例插入到正确的位置 (感觉这里的第三步代码有问题。。。)</li>\n</ol>\n</li>\n</ul>\n",
            "tags": [
                "Bue笔记"
            ]
        },
        {
            "id": "http://example.com/2017/05/23/bue/5/",
            "url": "http://example.com/2017/05/23/bue/5/",
            "title": "Bue源码阅读笔记（5）",
            "date_published": "2017-05-23T02:30:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nd2luZC9idWUvdHJlZS84MTUxYzYyYTJmYTNjNjU1ODFmOTFjNzgzY2JmMTVhYWQzMDc4YWM5\">当前版本</span></p>\n<h3 id=\"进展\"><a class=\"markdownIt-Anchor\" href=\"#进展\">#</a> 进展</h3>\n<p>完成动态 v-if 指令</p>\n<h3 id=\"代码执行补充\"><a class=\"markdownIt-Anchor\" href=\"#代码执行补充\">#</a> 代码执行补充</h3>\n<p>当代码执行到 dom 渲染前，这个时候会进行 attribute 检查，如果存在自定义 attr (b-if), 直接走指令绑定_bindDirective --&gt; new Directive () --&gt; _initDef (), 这里不同指令对应的更新 update 函数不同，所以需要分类处理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let def = this.vm.$options.directives[this.name];</span><br><span class=\"line\">    _.extend(this, def);</span><br></pre></td></tr></table></figure>\n<p>–&gt; _bind () --&gt; this.update (this._watcher.value); 决定是否插入 dom (至此静态渲染已完成) --&gt; 渲染 dom，对内部变量进行赋值，但需要在先前做一些准备 (这部分代码的思路有问题，仅仅用于应付 if 指令)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// init.js</span><br><span class=\"line\">if (this.$parent) &#123;</span><br><span class=\"line\">  this.$data = options.parent.$data;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  this.$data = options.data || &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (this.$parent) &#123;</span><br><span class=\"line\">    this.observer = this.$parent.observer;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    this.observer = Observer.create(data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不熟悉知识点\"><a class=\"markdownIt-Anchor\" href=\"#不熟悉知识点\">#</a> 不熟悉知识点</h3>\n<ul>\n<li>document.createComment 插入注释，在这里主要用于 dom 占位</li>\n</ul>\n",
            "tags": [
                "Bue笔记"
            ]
        },
        {
            "id": "http://example.com/2017/05/18/bue/4/",
            "url": "http://example.com/2017/05/18/bue/4/",
            "title": "Bue源码阅读笔记（4）",
            "date_published": "2017-05-18T03:22:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nd2luZC9idWUvdHJlZS82MzQ1NGIwODYyN2JhNmNjYzQ1OWFlODYxNWM2MmQ1ZjFmNzg4ODE4\">当前版本</span></p>\n<h3 id=\"进展\"><a class=\"markdownIt-Anchor\" href=\"#进展\">#</a> 进展</h3>\n<ul>\n<li>✅ 监听对象变化</li>\n<li>✅ 监听数组变化</li>\n<li>✅ watch 库</li>\n<li>✅ 动态数据绑定</li>\n<li>✅ 批处理更新 DOM</li>\n<li>✅ 计算属性 computed</li>\n</ul>\n<h3 id=\"代码执行补充\"><a class=\"markdownIt-Anchor\" href=\"#代码执行补充\">#</a> 代码执行补充</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">批处理更新DOM : new Batcher() --&gt; 在Watcher.update的时候Batcher.push()将事件添加到队列中,</span><br><span class=\"line\">  利用setTimeout执行机制，在里面执行flush --&gt; flush()内执行并清空队列</span><br><span class=\"line\"></span><br><span class=\"line\">计算属性computed(静态 -&gt; 动态) : &#123;</span><br><span class=\"line\">  静态 ：_initComputed(),把函数定义到了Object get上面 ,就能获取到值了</span><br><span class=\"line\">  动态 ：在_initBindings()的时候, 订阅了get事件,之后$mount --&gt; _compile() --&gt; new Direcitve() </span><br><span class=\"line\">    --&gt; new Watcher() 在这里，进行了取值操作，就触发了get事件 --&gt; 收集依赖_collectDep() --&gt; </span><br><span class=\"line\">    把watcher放在了_sub数组里面, 当computed内部有变量改动时, 触发了set事件, 这个时候, </span><br><span class=\"line\">    会执行Watcher.cb, 即更新dom </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>ps: 这里我想错了，一直在找 user.name 的跟新触发了 info 的跟新的函数，其实即便在静态那里，user.name 的跟新也会导致 info 数据的跟新，只不过没触发 dom 跟新，所以这里的动态只是在 user.name 的_sub 里绑了一个触发 info 的 dom 更新的 Watcher</p>\n<p>ps2:nonono，上面我还是搞错了， <code>并不是</code>  user.name 的跟新导致了 info 数据的跟新，而是 user.name 的_sub 里绑了一个触发 info 的 dom 更新的 Watcher，在 info 的 dom 更新的时候，需要访问 info, 从而触发了 info 的 get 方法，最终进行的是 computed 上 info 的函数，重新给 info 赋值了，所以导致了 info 的改变 (因为这个时候 user.name 已经改变了)</p>\n<h3 id=\"本文总结\"><a class=\"markdownIt-Anchor\" href=\"#本文总结\">#</a> 本文总结</h3>\n<p>这个版本的代码我反反复复的看了一个下午，总算是更加深入的了解的代码的含义，也弥补了上一篇中一知半解的地方，配合作者的文章说明，理清了代码的执行流程，不过这个代码真的是绕的不行。。。最后吐槽一下这代码的耦合程度虽然低，但是文件分的太散，每次找函数定义都要花上不少的时间</p>\n",
            "tags": [
                "Bue笔记"
            ]
        },
        {
            "id": "http://example.com/2017/05/16/bue/3/",
            "url": "http://example.com/2017/05/16/bue/3/",
            "title": "Bue源码阅读笔记（3）",
            "date_published": "2017-05-16T02:00:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nd2luZC9idWUvdHJlZS84OWMwZDkzMDcxZDExN2VkZGI5Yjg1ZWRkZTk2ZmI2ZTEzMTczZDY2\">当前版本</span></p>\n<h2 id=\"相比之前-分离directive和watch的update操作\"><a class=\"markdownIt-Anchor\" href=\"#相比之前-分离directive和watch的update操作\">#</a> 相比之前 ： 分离 directive 和 watch 的 update 操作</h2>\n<h3 id=\"代码执行顺序\"><a class=\"markdownIt-Anchor\" href=\"#代码执行顺序\">#</a> 代码执行顺序</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_initData() 数据初始化 同 2 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">_initBindings() 创建一个Binding,在observer上订阅set监听函数 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">$mount() --&gt; compile() --&gt; 初始化节点并渲染dom,若是node节点,遍历子元素;若是文本节点，绑定directive，watcher(函数绕来绕去的感觉好乱，只能大致理解意思)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  node: 遍历</span><br><span class=\"line\">  text: &#123;</span><br><span class=\"line\">    普通文本节点：直接插入，</span><br><span class=\"line\">    指令节点：_bindDirective --&gt; 指令构造函数new Directive() --&gt; 添加new Watcher(),第一次手动触发dom更新</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">当数据变动时, 执行_updateBindingAt()，它会去把对应改变了的数据那里找出所有的watcher, 然后一一执行他们的cb, 一个都不放过</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Bue笔记"
            ]
        },
        {
            "id": "http://example.com/2017/05/09/bue/2/",
            "url": "http://example.com/2017/05/09/bue/2/",
            "title": "Bue源码阅读笔记（2）",
            "date_published": "2017-05-09T08:10:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nd2luZC9idWUvdHJlZS84MTEzOGRmNGQzNmU1MDAxNWFjODk2MmE1MGRhODI1OTY1MWVjOWVi\">对应版本</span></p>\n<ul>\n<li>✅ 监听对象变化</li>\n<li>✅ 监听数组变化</li>\n<li>✅ watch 库</li>\n<li>✅ 动态数据绑定</li>\n<li>❎ 不支持多层对象操作</li>\n</ul>\n<hr>\n<h3 id=\"代码执行顺序\"><a class=\"markdownIt-Anchor\" href=\"#代码执行顺序\">#</a> 代码执行顺序</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this._init() --&gt; 创建观察对象Observer.create() --&gt; 判断数据类型(数组或对象) --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  数组：重写Bue数组的方法，遍历子元素 -----------------↑</span><br><span class=\"line\">  对象：重定义对象属性(添加了消息触发函数)，遍历子元素----↑</span><br><span class=\"line\">&#125; -------&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">订阅监听数据并重新渲染的事件this.observer.on(&#x27;set&#x27;, this.$mount.bind(this));</span><br><span class=\"line\"></span><br><span class=\"line\">this.$watch 手动订阅监听事件</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"不熟悉知识点\"><a class=\"markdownIt-Anchor\" href=\"#不熟悉知识点\">#</a> 不熟悉知识点</h3>\n<ul>\n<li>1 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2RlZmluZVByb3BlcnR5\">Object.defineProperty</span></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法 Object.defineProperty(obj, prop, descriptor)</span><br><span class=\"line\"></span><br><span class=\"line\">参数 &#123;</span><br><span class=\"line\">  obj：要在其上定义属性的对象。</span><br><span class=\"line\">  prop：要定义或修改的属性的名称。</span><br><span class=\"line\">  descriptor：将被定义或修改的属性的描述符。</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">返回值：被传递给函数的对象。</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(this.value, key, &#123;</span><br><span class=\"line\">    enumerable: true,  //可定义的</span><br><span class=\"line\">    configurable: true, //可枚举的</span><br><span class=\"line\">   // value:&quot;111&quot;,         //值</span><br><span class=\"line\">    writable:true,     //可写的</span><br><span class=\"line\">    get: function () &#123;</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function (newVal) &#123;</span><br><span class=\"line\">        if (newVal === val) return;</span><br><span class=\"line\">        val = newVal;</span><br><span class=\"line\">        console.log(&#x27;你设置了&#x27; + key + &#x27; 新的&#x27; + key + &#x27; = &#x27; + newVal);</span><br><span class=\"line\">        ob.notify(&#x27;set&#x27;, key, newVal);</span><br><span class=\"line\">        ob.notify(`set:$&#123;key&#125;`, key, newVal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li>1. 数据初始化的时候会给 $observer 所有的字段添加一个 parent 字段，方便之后一层层的出发监听事件</li>\n</ul>\n",
            "tags": [
                "Bue笔记"
            ]
        },
        {
            "id": "http://example.com/2017/05/09/bue/1/",
            "url": "http://example.com/2017/05/09/bue/1/",
            "title": "Bue源码阅读笔记（1）",
            "date_published": "2017-05-09T07:30:00.000Z",
            "content_html": "<p>最简单的数据绑定 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3lvdW5nd2luZC9idWUvdHJlZS9kN2RlZGY2ZmY4YjNjZWNkNjg5MDNiODc4NjkwZmVmMmVmOGYxOGM4\">对应版本</span></p>\n<h3 id=\"代码执行顺序\"><a class=\"markdownIt-Anchor\" href=\"#代码执行顺序\">#</a> 代码执行顺序</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_init() --&gt; $mount() --&gt; _compile() --&gt; _compileNode() --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">检查html节点 &#123;</span><br><span class=\"line\">  nodeType == 1 (元素节点) : 遍历子节点，再次检查html节点,</span><br><span class=\"line\">  nodeType == 3 (文本节点) : 用正则匹配&#123;&#123;&#125;&#125;，并替换成数据</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"不熟悉知识点总结\"><a class=\"markdownIt-Anchor\" href=\"#不熟悉知识点总结\">#</a> 不熟悉知识点总结</h3>\n<ul>\n<li>1 Array.from: 把其他数据类型转为 array</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const bar = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];</span><br><span class=\"line\">Array.from(bar);</span><br><span class=\"line\">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">Array.from(&#x27;foo&#x27;);</span><br><span class=\"line\">// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Bue笔记"
            ]
        }
    ]
}