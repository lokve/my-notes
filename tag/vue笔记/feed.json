{
    "version": "https://jsonfeed.org/version/1",
    "title": "学习笔记 • All posts by \"vue笔记\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2018/06/07/vue/attr/",
            "url": "http://example.com/2018/06/07/vue/attr/",
            "title": "attr",
            "date_published": "2018-06-07T06:08:00.000Z",
            "content_html": "<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>在 parseHTML 首次处理 (剩下的属性都在这个方法里进行了第一次处理)<br>\n 代码在 vue/src/compiler/parser/index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseHTML(template, &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    start(tag, attrs, unary) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        // 对element的其他属性做处理</span><br><span class=\"line\">        processAttrs(element);</span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"processattrs\"><a class=\"markdownIt-Anchor\" href=\"#processattrs\">#</a> processAttrs</h2>\n<p>代码在 vue/src/compiler/parser/index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function processAttrs (el) &#123;</span><br><span class=\"line\">  const list = el.attrsList</span><br><span class=\"line\">  let i, l, name, rawName, value, modifiers, isProp</span><br><span class=\"line\">  for (i = 0, l = list.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    name = rawName = list[i].name</span><br><span class=\"line\">    value = list[i].value</span><br><span class=\"line\">    // dirRE /^v-|^@|^:/</span><br><span class=\"line\">    if (dirRE.test(name)) &#123;</span><br><span class=\"line\">      // mark element as dynamic</span><br><span class=\"line\">      el.hasBindings = true</span><br><span class=\"line\">      // modifiers</span><br><span class=\"line\">      modifiers = parseModifiers(name)</span><br><span class=\"line\">      if (modifiers) &#123;</span><br><span class=\"line\">        name = name.replace(modifierRE, &#x27;&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (bindRE.test(name)) &#123; // v-bind</span><br><span class=\"line\">        name = name.replace(bindRE, &#x27;&#x27;)</span><br><span class=\"line\">        value = parseFilters(value)</span><br><span class=\"line\">        isProp = false</span><br><span class=\"line\">        if (modifiers) &#123;</span><br><span class=\"line\">          if (modifiers.prop) &#123;</span><br><span class=\"line\">            isProp = true</span><br><span class=\"line\">            name = camelize(name)</span><br><span class=\"line\">            if (name === &#x27;innerHtml&#x27;) name = &#x27;innerHTML&#x27;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (modifiers.camel) &#123;</span><br><span class=\"line\">            name = camelize(name)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) &#123;</span><br><span class=\"line\">          addProp(el, name, value)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          addAttr(el, name, value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; else if (onRE.test(name)) &#123; // v-on</span><br><span class=\"line\">        name = name.replace(onRE, &#x27;&#x27;)</span><br><span class=\"line\">        addHandler(el, name, value, modifiers)</span><br><span class=\"line\">      &#125; else &#123; // normal directives</span><br><span class=\"line\">        name = name.replace(dirRE, &#x27;&#x27;)</span><br><span class=\"line\">        // parse arg</span><br><span class=\"line\">        const argMatch = name.match(argRE)</span><br><span class=\"line\">        const arg = argMatch &amp;&amp; argMatch[1]</span><br><span class=\"line\">        if (arg) &#123;</span><br><span class=\"line\">          name = name.slice(0, -(arg.length + 1))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        addDirective(el, name, rawName, value, arg, modifiers)</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; name === &#x27;model&#x27;) &#123;</span><br><span class=\"line\">          checkForAliasModel(el, value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // literal attribute 普通属性</span><br><span class=\"line\">      if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">        const expression = parseText(value, delimiters)</span><br><span class=\"line\">        if (expression) &#123;</span><br><span class=\"line\">          warn(</span><br><span class=\"line\">            `$&#123;name&#125;=&quot;$&#123;value&#125;&quot;: ` +</span><br><span class=\"line\">            &#x27;Interpolation inside attributes has been removed. &#x27; +</span><br><span class=\"line\">            &#x27;Use v-bind or the colon shorthand instead. For example, &#x27; +</span><br><span class=\"line\">            &#x27;instead of &lt;div id=&quot;&#123;&#123; val &#125;&#125;&quot;&gt;, use &lt;div :id=&quot;val&quot;&gt;.&#x27;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      addAttr(el, name, JSON.stringify(value))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Vue笔记"
            ]
        },
        {
            "id": "http://example.com/2018/06/07/vue/v-for/",
            "url": "http://example.com/2018/06/07/vue/v-for/",
            "title": "Vue源码阅读笔记 (v-for)",
            "date_published": "2018-06-07T03:08:00.000Z",
            "content_html": "<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>在 parseHTML 首次处理 v-for<br>\n 代码在 vue/src/compiler/parser/index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseHTML(template, &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    start(tag, attrs, unary) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        processFor(element);</span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"processfor\"><a class=\"markdownIt-Anchor\" href=\"#processfor\">#</a> processFor</h2>\n<p>代码在 vue/src/compiler/parser/index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function processFor (el) &#123;</span><br><span class=\"line\">  let exp</span><br><span class=\"line\">  if ((exp = getAndRemoveAttr(el, &#x27;v-for&#x27;))) &#123;</span><br><span class=\"line\">    // forAliasRE /(.*?)\\s+(?:in|of)\\s+(.*)/ 匹配 * in或者of *</span><br><span class=\"line\">    const inMatch = exp.match(forAliasRE)</span><br><span class=\"line\">    if (!inMatch) &#123;</span><br><span class=\"line\">      process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn(</span><br><span class=\"line\">        `Invalid v-for expression: $&#123;exp&#125;`</span><br><span class=\"line\">      )</span><br><span class=\"line\">      return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    el.for = inMatch[2].trim() // i in 9里面的 9</span><br><span class=\"line\">    const alias = inMatch[1].trim() // i in 9里面的 i</span><br><span class=\"line\"></span><br><span class=\"line\">    // forIteratorRE /\\((\\&#123;[^&#125;]*\\&#125;|[^,]*),([^,]*)(?:,([^,]*))?\\)/</span><br><span class=\"line\">    const iteratorMatch = alias.match(forIteratorRE)</span><br><span class=\"line\">    if (iteratorMatch) &#123;</span><br><span class=\"line\">      el.alias = iteratorMatch[1].trim() // i</span><br><span class=\"line\">      el.iterator1 = iteratorMatch[2].trim() // 第二个参数</span><br><span class=\"line\">      if (iteratorMatch[3]) &#123;</span><br><span class=\"line\">        el.iterator2 = iteratorMatch[3].trim() // 对象遍历可带第三个参数</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      el.alias = alias</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>element 多几个属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  alias:&quot;i&quot;,</span><br><span class=\"line\">  for:&quot;9&quot;,</span><br><span class=\"line\">  iterator1:&quot;index&quot; // 可能有</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"processkey\"><a class=\"markdownIt-Anchor\" href=\"#processkey\">#</a> processKey</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function processKey (el) &#123;</span><br><span class=\"line\">  const exp = getBindingAttr(el, &#x27;key&#x27;)</span><br><span class=\"line\">  if (exp) &#123;</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; el.tag === &#x27;template&#x27;) &#123;</span><br><span class=\"line\">      // template不能加key</span><br><span class=\"line\">      warn(`&lt;template&gt; cannot be keyed. Place the key on real elements instead.`)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    el.key = exp</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">element = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  key:&quot;i&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>未完待续</p>\n",
            "tags": [
                "Vue笔记"
            ]
        },
        {
            "id": "http://example.com/2018/06/07/vue/v-if/",
            "url": "http://example.com/2018/06/07/vue/v-if/",
            "title": "Vue源码阅读笔记 (v-if)",
            "date_published": "2018-06-07T03:08:00.000Z",
            "content_html": "<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>在 parseHTML 首次处理 v-if<br>\n 代码在 vue/src/compiler/parser/index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseHTML(template, &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    start(tag, attrs, unary) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        processIf(element);</span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"processif\"><a class=\"markdownIt-Anchor\" href=\"#processif\">#</a> processIf</h2>\n<p>代码在 vue/src/compiler/parser/index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function processIf (el) &#123;</span><br><span class=\"line\">  const exp = getAndRemoveAttr(el, &#x27;v-if&#x27;)</span><br><span class=\"line\">  if (exp) &#123;</span><br><span class=\"line\">    el.if = exp</span><br><span class=\"line\">    addIfCondition(el, &#123;</span><br><span class=\"line\">      exp: exp,</span><br><span class=\"line\">      block: el</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    if (getAndRemoveAttr(el, &#x27;v-else&#x27;) != null) &#123;</span><br><span class=\"line\">      el.else = true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const elseif = getAndRemoveAttr(el, &#x27;v-else-if&#x27;)</span><br><span class=\"line\">    if (elseif) &#123;</span><br><span class=\"line\">      el.elseif = elseif</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function addIfCondition (el, condition) &#123;</span><br><span class=\"line\">  if (!el.ifConditions) &#123;</span><br><span class=\"line\">    el.ifConditions = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  el.ifConditions.push(condition)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>element 多几个属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  if:&quot;i % 2 === 0&quot;,</span><br><span class=\"line\">  ifConditions: [&#123;</span><br><span class=\"line\">    block: el, // 所在元素，就是element</span><br><span class=\"line\">    exp: &quot;i % 2 === 0&quot;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>未完待续</p>\n",
            "tags": [
                "Vue笔记"
            ]
        },
        {
            "id": "http://example.com/2018/06/07/vue/class/",
            "url": "http://example.com/2018/06/07/vue/class/",
            "title": "Vue源码阅读笔记 (class,style)",
            "date_published": "2018-06-07T01:43:00.000Z",
            "content_html": "<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>在 parseHTML 首次处理 class,style<br>\n 代码在 vue/src/compiler/parser/index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseHTML(template, &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    start(tag, attrs, unary) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        for (let i = 0; i &lt; transforms.length; i++) &#123;</span><br><span class=\"line\">          transforms[i](element, options)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>transforms 里面包含了两个函数</p>\n<h2 id=\"class\"><a class=\"markdownIt-Anchor\" href=\"#class\">#</a> class</h2>\n<p>src/platforms/web/compiler/modules/class.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function transformNode (el: ASTElement, options: CompilerOptions) &#123;</span><br><span class=\"line\">  const warn = options.warn || baseWarn</span><br><span class=\"line\">  const staticClass = getAndRemoveAttr(el, &#x27;class&#x27;) // 获取class</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; staticClass) &#123;</span><br><span class=\"line\">    // 判断class=&quot;&#123;&#123;value&#125;&#125;&quot;这种情况</span><br><span class=\"line\">    const expression = parseText(staticClass, options.delimiters)</span><br><span class=\"line\">    if (expression) &#123;</span><br><span class=\"line\">      warn(</span><br><span class=\"line\">        `class=&quot;$&#123;staticClass&#125;&quot;: ` +</span><br><span class=\"line\">        &#x27;Interpolation inside attributes has been removed. &#x27; +</span><br><span class=\"line\">        &#x27;Use v-bind or the colon shorthand instead. For example, &#x27; +</span><br><span class=\"line\">        &#x27;instead of &lt;div class=&quot;&#123;&#123; val &#125;&#125;&quot;&gt;, use &lt;div :class=&quot;val&quot;&gt;.&#x27;</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 如果是静态class</span><br><span class=\"line\">  if (staticClass) &#123;</span><br><span class=\"line\">    el.staticClass = JSON.stringify(staticClass)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 判断:class这种情况</span><br><span class=\"line\">  const classBinding = getBindingAttr(el, &#x27;class&#x27;, false /* getStatic */)</span><br><span class=\"line\">  if (classBinding) &#123;</span><br><span class=\"line\">    el.classBinding = classBinding</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// vue/src/compiler/helpers.js</span><br><span class=\"line\">export function getBindingAttr (</span><br><span class=\"line\">  el: ASTElement,</span><br><span class=\"line\">  name: string,</span><br><span class=\"line\">  getStatic?: boolean</span><br><span class=\"line\">): ?string &#123;</span><br><span class=\"line\">  const dynamicValue =</span><br><span class=\"line\">    getAndRemoveAttr(el, &#x27;:&#x27; + name) ||</span><br><span class=\"line\">    getAndRemoveAttr(el, &#x27;v-bind:&#x27; + name)</span><br><span class=\"line\">  if (dynamicValue != null) &#123;</span><br><span class=\"line\">    return parseFilters(dynamicValue)</span><br><span class=\"line\">  &#125; else if (getStatic !== false) &#123;</span><br><span class=\"line\">    const staticValue = getAndRemoveAttr(el, name)</span><br><span class=\"line\">    if (staticValue != null) &#123;</span><br><span class=\"line\">      return JSON.stringify(staticValue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// src/compiler/parser/filter-parser.js</span><br><span class=\"line\">export function parseFilters (exp: string): string &#123;</span><br><span class=\"line\">  let inSingle = false</span><br><span class=\"line\">  let inDouble = false</span><br><span class=\"line\">  let inTemplateString = false</span><br><span class=\"line\">  let inRegex = false</span><br><span class=\"line\">  let curly = 0</span><br><span class=\"line\">  let square = 0</span><br><span class=\"line\">  let paren = 0</span><br><span class=\"line\">  let lastFilterIndex = 0</span><br><span class=\"line\">  let c, prev, i, expression, filters</span><br><span class=\"line\"></span><br><span class=\"line\">  for (i = 0; i &lt; exp.length; i++) &#123;</span><br><span class=\"line\">    prev = c</span><br><span class=\"line\">    c = exp.charCodeAt(i)</span><br><span class=\"line\">    if (inSingle) &#123;</span><br><span class=\"line\">      // 0x27 &#x27;      0x5C \\</span><br><span class=\"line\">      if (c === 0x27 &amp;&amp; prev !== 0x5C) inSingle = false</span><br><span class=\"line\">    &#125; else if (inDouble) &#123;</span><br><span class=\"line\">      // 0x22 &quot;</span><br><span class=\"line\">      if (c === 0x22 &amp;&amp; prev !== 0x5C) inDouble = false</span><br><span class=\"line\">    &#125; else if (inTemplateString) &#123;</span><br><span class=\"line\">      // 0x60 `</span><br><span class=\"line\">      if (c === 0x60 &amp;&amp; prev !== 0x5C) inTemplateString = false</span><br><span class=\"line\">    &#125; else if (inRegex) &#123;</span><br><span class=\"line\">      // 0x2f /</span><br><span class=\"line\">      if (c === 0x2f &amp;&amp; prev !== 0x5C) inRegex = false</span><br><span class=\"line\">    &#125; else if (</span><br><span class=\"line\">      c === 0x7C &amp;&amp; // pipe  0x7C |</span><br><span class=\"line\">      exp.charCodeAt(i + 1) !== 0x7C &amp;&amp;</span><br><span class=\"line\">      exp.charCodeAt(i - 1) !== 0x7C &amp;&amp;</span><br><span class=\"line\">      !curly &amp;&amp; !square &amp;&amp; !paren</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      if (expression === undefined) &#123;</span><br><span class=\"line\">        // first filter, end of expression</span><br><span class=\"line\">        lastFilterIndex = i + 1</span><br><span class=\"line\">        expression = exp.slice(0, i).trim()</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        pushFilter()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      switch (c) &#123;</span><br><span class=\"line\">        case 0x22: inDouble = true; break         // &quot;</span><br><span class=\"line\">        case 0x27: inSingle = true; break         // &#x27;</span><br><span class=\"line\">        case 0x60: inTemplateString = true; break // `</span><br><span class=\"line\">        case 0x28: paren++; break                 // (</span><br><span class=\"line\">        case 0x29: paren--; break                 // )</span><br><span class=\"line\">        case 0x5B: square++; break                // [</span><br><span class=\"line\">        case 0x5D: square--; break                // ]</span><br><span class=\"line\">        case 0x7B: curly++; break                 // &#123;</span><br><span class=\"line\">        case 0x7D: curly--; break                 // &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (c === 0x2f) &#123; // /</span><br><span class=\"line\">        let j = i - 1</span><br><span class=\"line\">        let p</span><br><span class=\"line\">        // find first non-whitespace prev char</span><br><span class=\"line\">        for (; j &gt;= 0; j--) &#123;</span><br><span class=\"line\">          p = exp.charAt(j)</span><br><span class=\"line\">          if (p !== &#x27; &#x27;) break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!p || !validDivisionCharRE.test(p)) &#123;</span><br><span class=\"line\">          inRegex = true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (expression === undefined) &#123;</span><br><span class=\"line\">    expression = exp.slice(0, i).trim()</span><br><span class=\"line\">  &#125; else if (lastFilterIndex !== 0) &#123;</span><br><span class=\"line\">    pushFilter()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function pushFilter () &#123;</span><br><span class=\"line\">    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim())</span><br><span class=\"line\">    lastFilterIndex = i + 1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (filters) &#123;</span><br><span class=\"line\">    for (i = 0; i &lt; filters.length; i++) &#123;</span><br><span class=\"line\">      expression = wrapFilter(expression, filters[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return expression</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"style\"><a class=\"markdownIt-Anchor\" href=\"#style\">#</a> style</h2>\n<p>src/platforms/web/compiler/modules/style.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function transformNode (el: ASTElement, options: CompilerOptions) &#123;</span><br><span class=\"line\">  const warn = options.warn || baseWarn</span><br><span class=\"line\">  const staticStyle = getAndRemoveAttr(el, &#x27;style&#x27;) // style</span><br><span class=\"line\">  if (staticStyle) &#123;</span><br><span class=\"line\">    /* istanbul ignore if */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">      // style=&quot;&#123;&#123; val &#125;&#125;&quot; 情况</span><br><span class=\"line\">      const expression = parseText(staticStyle, options.delimiters)</span><br><span class=\"line\">      if (expression) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `style=&quot;$&#123;staticStyle&#125;&quot;: ` +</span><br><span class=\"line\">          &#x27;Interpolation inside attributes has been removed. &#x27; +</span><br><span class=\"line\">          &#x27;Use v-bind or the colon shorthand instead. For example, &#x27; +</span><br><span class=\"line\">          &#x27;instead of &lt;div style=&quot;&#123;&#123; val &#125;&#125;&quot;&gt;, use &lt;div :style=&quot;val&quot;&gt;.&#x27;</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    el.staticStyle = JSON.stringify(parseStyleText(staticStyle))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const styleBinding = getBindingAttr(el, &#x27;style&#x27;, false /* getStatic */)</span><br><span class=\"line\">  if (styleBinding) &#123;</span><br><span class=\"line\">    el.styleBinding = styleBinding</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Vue笔记"
            ]
        },
        {
            "id": "http://example.com/2018/05/25/vue/4/",
            "url": "http://example.com/2018/05/25/vue/4/",
            "title": "Vue源码阅读笔记（4）(compile)",
            "date_published": "2018-05-25T02:14:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpdXRhby92dWUyLjAtc291cmNlL2Jsb2IvYmU0YWM3NzVlMjZlZmFlN2I2NGU1MjU0ZTIzYTk3ZDUwYTllODgwYy9jb21waWxlJUU2JUE2JTgyJUU4JUJGJUIwLm1k\">参考了的文章</span></p>\n<p>从这里开始我会尽可能的把源码里所有的 <code>if</code>  情况考虑进去，还是以一个简单例子开始，之后会不断的把这个例子补充完整，以完成对每一行的解读</p>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>模板编译分为三个阶段：生成 ast、优化静态内容、生成 render</p>\n<p>以下面代码开始</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;../dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  var vm = new Vue(&#123;</span><br><span class=\"line\">    el: &#x27;#app&#x27;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      message: &#x27;第一个vue实例&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"正则补充\"><a class=\"markdownIt-Anchor\" href=\"#正则补充\">#</a> 正则补充</h2>\n<p>这里用到了很多的正则判断，对于一些比较复杂的不清楚的在这里进行说明 (超的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpdXRhby92dWUyLjAtc291cmNlL2Jsb2IvYmU0YWM3NzVlMjZlZmFlN2I2NGU1MjU0ZTIzYTk3ZDUwYTllODgwYy9jb21waWxlJUUyJTgwJTk0JUUyJTgwJTk0JUU3JTk0JTlGJUU2JTg4JTkwYXN0Lm1k\">参考文章</span>)</p>\n<p>代码片段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (</span><br><span class=\"line\">  !endTag.test(rest) &amp;&amp;</span><br><span class=\"line\">  !startTagOpen.test(rest) &amp;&amp;</span><br><span class=\"line\">  !comment.test(rest) &amp;&amp;</span><br><span class=\"line\">  !conditionalComment.test(rest)</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>endTag = /<sup>&lt;/((?:[a-zA-Z_][\\w-.]_😃?[a-zA-Z_][\\w-.]_)[</sup>&gt;]*&gt;/<br>\nendTag 是匹配双标签的结束标签。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;&lt;/div&gt;&#x27;.match(endTag)</span><br><span class=\"line\">// [&quot;&lt;/div&gt;&quot;, &quot;div&quot;, index: 0, input: &quot;&lt;/div&gt;&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27;&lt;/div    &gt;&#x27;.match(endTag)</span><br><span class=\"line\">// [&quot;&lt;/div    &gt;&quot;, &quot;div&quot;, index: 0, input: &quot;&lt;/div    &gt;&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x27; &lt;/div    &gt;&#x27;.match(endTag)</span><br><span class=\"line\">// null</span><br></pre></td></tr></table></figure>\n<p>startTagOpen = /^&lt;((?:[a-zA-Z_][\\w-.]<em>😃?[a-zA-Z_][\\w-.]</em>)/<br>\n 匹配开始标签</p>\n<h2 id=\"compiletofunctions\"><a class=\"markdownIt-Anchor\" href=\"#compiletofunctions\">#</a> compileToFunctions</h2>\n<p>从 <code>compileToFunctions</code>  开始，路径 <code>/src/compiler/index.js</code> ,<br>\n 首先在 mount 方法里有使用到 <code>compileToFunctions</code>  方法，他返回了 render 函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class=\"line\">    shouldDecodeNewlines,</span><br><span class=\"line\">    delimiters: options.delimiters</span><br><span class=\"line\">&#125;, this)</span><br><span class=\"line\"></span><br><span class=\"line\">function compileToFunctions (</span><br><span class=\"line\">    template: string, // html模板</span><br><span class=\"line\">    options?: CompilerOptions, // 上面的参数</span><br><span class=\"line\">    vm?: Component // vue</span><br><span class=\"line\">  ): CompiledFunctionResult &#123;</span><br><span class=\"line\">    options = options || &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /* istanbul ignore if */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">      // detect possible CSP restriction</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        new Function(&#x27;return 1&#x27;)</span><br><span class=\"line\">      &#125; catch (e) &#123;</span><br><span class=\"line\">        if (e.toString().match(/unsafe-eval|CSP/)) &#123;</span><br><span class=\"line\">          warn(</span><br><span class=\"line\">            &#x27;It seems you are using the standalone build of Vue.js in an &#x27; +</span><br><span class=\"line\">            &#x27;environment with Content Security Policy that prohibits unsafe-eval. &#x27; +</span><br><span class=\"line\">            &#x27;The template compiler cannot work in this environment. Consider &#x27; +</span><br><span class=\"line\">            &#x27;relaxing the policy to allow unsafe-eval or pre-compiling your &#x27; +</span><br><span class=\"line\">            &#x27;templates into render functions.&#x27;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // check cache</span><br><span class=\"line\">    const key = options.delimiters</span><br><span class=\"line\">      ? String(options.delimiters) + template</span><br><span class=\"line\">      : template // key是模板html</span><br><span class=\"line\">    if (functionCompileCache[key]) &#123; // 应该是缓存</span><br><span class=\"line\">      return functionCompileCache[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // compile</span><br><span class=\"line\">    const compiled = compile(template, options)</span><br><span class=\"line\"></span><br><span class=\"line\">    // check compilation errors/tips</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">      if (compiled.errors &amp;&amp; compiled.errors.length) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `Error compiling template:\\n\\n$&#123;template&#125;\\n\\n` +</span><br><span class=\"line\">          compiled.errors.map(e =&gt; `- $&#123;e&#125;`).join(&#x27;\\n&#x27;) + &#x27;\\n&#x27;,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (compiled.tips &amp;&amp; compiled.tips.length) &#123;</span><br><span class=\"line\">        compiled.tips.forEach(msg =&gt; tip(msg, vm))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // turn code into functions</span><br><span class=\"line\">    const res = &#123;&#125;</span><br><span class=\"line\">    const fnGenErrors = []</span><br><span class=\"line\">    res.render = makeFunction(compiled.render, fnGenErrors)</span><br><span class=\"line\">    const l = compiled.staticRenderFns.length</span><br><span class=\"line\">    res.staticRenderFns = new Array(l)</span><br><span class=\"line\">    for (let i = 0; i &lt; l; i++) &#123;</span><br><span class=\"line\">      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // check function generation errors.</span><br><span class=\"line\">    // this should only happen if there is a bug in the compiler itself.</span><br><span class=\"line\">    // mostly for codegen development use</span><br><span class=\"line\">    /* istanbul ignore if */</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">      if ((!compiled.errors || !compiled.errors.length) &amp;&amp; fnGenErrors.length) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `Failed to generate render function:\\n\\n` +</span><br><span class=\"line\">          fnGenErrors.map((&#123; err, code &#125;) =&gt; `$&#123;err.toString()&#125; in\\n\\n$&#123;code&#125;\\n`).join(&#x27;\\n&#x27;),</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (functionCompileCache[key] = res)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>具体说明看上面注释</p>\n<p>运行到 <code>compile</code> ，我们跟着进去</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function compile (</span><br><span class=\"line\">    template: string,</span><br><span class=\"line\">    options?: CompilerOptions</span><br><span class=\"line\">  ): CompiledResult &#123;</span><br><span class=\"line\">    // finalOptions.prototype = baseOption</span><br><span class=\"line\">    const finalOptions = Object.create(baseOptions)</span><br><span class=\"line\">    const errors = []</span><br><span class=\"line\">    const tips = []</span><br><span class=\"line\">    // 定义了warn方法</span><br><span class=\"line\">    finalOptions.warn = (msg, tip) =&gt; &#123;</span><br><span class=\"line\">      (tip ? tips : errors).push(msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (options) &#123;</span><br><span class=\"line\">      // merge custom modules</span><br><span class=\"line\">      // 合并自定义modules</span><br><span class=\"line\">      // TODO 这里的options应该肯定没有这些参数才对啊？下同</span><br><span class=\"line\">      if (options.modules) &#123;</span><br><span class=\"line\">        finalOptions.modules = (baseOptions.modules || []).concat(options.modules)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // merge custom directives</span><br><span class=\"line\">      // 合并自定义directives</span><br><span class=\"line\">      if (options.directives) &#123;</span><br><span class=\"line\">        finalOptions.directives = extend(</span><br><span class=\"line\">          Object.create(baseOptions.directives),</span><br><span class=\"line\">          options.directives</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // copy other options</span><br><span class=\"line\">      // 赋值给finalOptions</span><br><span class=\"line\">      for (const key in options) &#123;</span><br><span class=\"line\">        if (key !== &#x27;modules&#x27; &amp;&amp; key !== &#x27;directives&#x27;) &#123;</span><br><span class=\"line\">          finalOptions[key] = options[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 把参数带到baseCompile</span><br><span class=\"line\">    const compiled = baseCompile(template, finalOptions)</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">      errors.push.apply(errors, detectErrors(compiled.ast))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    compiled.errors = errors</span><br><span class=\"line\">    compiled.tips = tips</span><br><span class=\"line\">    return compiled</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>第一句就出现了位置变量，根据 build/alias 的定义以及 web-runtime-with-compiler.js 里面的引用，可以发现在 <code>src/platforms/web/compiler/index.js</code>  里面使用了 createCompiler 方法，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* @flow */</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; isUnaryTag, canBeLeftOpenTag &#125; from &#x27;./util&#x27;</span><br><span class=\"line\">import &#123; genStaticKeys &#125; from &#x27;shared/util&#x27;</span><br><span class=\"line\">import &#123; createCompiler &#125; from &#x27;compiler/index&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import modules from &#x27;./modules/index&#x27;</span><br><span class=\"line\">import directives from &#x27;./directives/index&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;</span><br><span class=\"line\">  isPreTag,</span><br><span class=\"line\">  mustUseProp,</span><br><span class=\"line\">  isReservedTag,</span><br><span class=\"line\">  getTagNamespace</span><br><span class=\"line\">&#125; from &#x27;../util/index&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export const baseOptions: CompilerOptions = &#123;</span><br><span class=\"line\">  expectHTML: true,</span><br><span class=\"line\">  modules,</span><br><span class=\"line\">  directives,</span><br><span class=\"line\">  isPreTag,</span><br><span class=\"line\">  isUnaryTag,</span><br><span class=\"line\">  mustUseProp,</span><br><span class=\"line\">  canBeLeftOpenTag,</span><br><span class=\"line\">  isReservedTag,</span><br><span class=\"line\">  getTagNamespace,</span><br><span class=\"line\">  staticKeys: genStaticKeys(modules)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; compile, compileToFunctions &#125; = createCompiler(baseOptions)</span><br><span class=\"line\">export &#123; compile, compileToFunctions &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>然后 baseOptions 就在这里定义了，具体参数及方法会在用到的时候细看</p>\n<p>运行到 <code>baseCompile</code> ，然后进入 <code>parse</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function baseCompile (</span><br><span class=\"line\">  template: string,</span><br><span class=\"line\">  options: CompilerOptions</span><br><span class=\"line\">): CompiledResult &#123;</span><br><span class=\"line\">  const ast = parse(template.trim(), options)</span><br><span class=\"line\">  optimize(ast, options)</span><br><span class=\"line\">  const code = generate(ast, options)</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    ast,</span><br><span class=\"line\">    render: code.render,</span><br><span class=\"line\">    staticRenderFns: code.staticRenderFns</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>parse</code>  在 /src/compiler/parser/index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Convert HTML string to AST.</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function parse (</span><br><span class=\"line\">  template: string,</span><br><span class=\"line\">  options: CompilerOptions</span><br><span class=\"line\">): ASTElement | void &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  // warn函数</span><br><span class=\"line\">  warn = options.warn || baseWarn</span><br><span class=\"line\"></span><br><span class=\"line\">  // 获取命名空间，svg和math</span><br><span class=\"line\">  platformGetTagNamespace = options.getTagNamespace || no</span><br><span class=\"line\"></span><br><span class=\"line\">  // 需要使用props绑定的属性，比如value、selected等</span><br><span class=\"line\">  platformMustUseProp = options.mustUseProp || no</span><br><span class=\"line\"></span><br><span class=\"line\">  // 是否是pre标签</span><br><span class=\"line\">  platformIsPreTag = options.isPreTag || no</span><br><span class=\"line\"></span><br><span class=\"line\">  // 取options.modules里有preTransformNode参数的数组，下同</span><br><span class=\"line\">  preTransforms = pluckModuleFunction(options.modules, &#x27;preTransformNode&#x27;)</span><br><span class=\"line\">  transforms = pluckModuleFunction(options.modules, &#x27;transformNode&#x27;)</span><br><span class=\"line\">  postTransforms = pluckModuleFunction(options.modules, &#x27;postTransformNode&#x27;)</span><br><span class=\"line\">  delimiters = options.delimiters</span><br><span class=\"line\"></span><br><span class=\"line\">  const stack = []</span><br><span class=\"line\">  const preserveWhitespace = options.preserveWhitespace !== false</span><br><span class=\"line\">  let root</span><br><span class=\"line\">  let currentParent</span><br><span class=\"line\">  let inVPre = false</span><br><span class=\"line\">  let inPre = false</span><br><span class=\"line\">  let warned = false</span><br><span class=\"line\"></span><br><span class=\"line\">  function warnOnce (msg) &#123;</span><br><span class=\"line\">    if (!warned) &#123;</span><br><span class=\"line\">      warned = true</span><br><span class=\"line\">      warn(msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function endPre (element) &#123;</span><br><span class=\"line\">    // check pre state</span><br><span class=\"line\">    if (element.pre) &#123;</span><br><span class=\"line\">      inVPre = false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (platformIsPreTag(element.tag)) &#123;</span><br><span class=\"line\">      inPre = false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  parseHTML(template, &#123;</span><br><span class=\"line\">    warn,</span><br><span class=\"line\">    expectHTML: options.expectHTML,</span><br><span class=\"line\">    isUnaryTag: options.isUnaryTag,</span><br><span class=\"line\">    canBeLeftOpenTag: options.canBeLeftOpenTag,</span><br><span class=\"line\">    shouldDecodeNewlines: options.shouldDecodeNewlines,</span><br><span class=\"line\">    start (tag, attrs, unary) &#123;</span><br><span class=\"line\">      // check namespace.</span><br><span class=\"line\">      // inherit parent ns if there is one</span><br><span class=\"line\">      // 第一遍还不清楚是啥</span><br><span class=\"line\">      const ns = (currentParent &amp;&amp; currentParent.ns) || platformGetTagNamespace(tag)</span><br><span class=\"line\"></span><br><span class=\"line\">      // handle IE svg bug</span><br><span class=\"line\">      /* istanbul ignore if */</span><br><span class=\"line\">      if (isIE &amp;&amp; ns === &#x27;svg&#x27;) &#123;</span><br><span class=\"line\">        attrs = guardIESVGBug(attrs)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      const element: ASTElement = &#123;</span><br><span class=\"line\">        type: 1,</span><br><span class=\"line\">        tag,</span><br><span class=\"line\">        attrsList: attrs,</span><br><span class=\"line\">        attrsMap: makeAttrsMap(attrs), // 把attr转换成对象，并且检验重复属性</span><br><span class=\"line\">        parent: currentParent,</span><br><span class=\"line\">        children: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (ns) &#123;</span><br><span class=\"line\">        element.ns = ns</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // 如果标签是style和script</span><br><span class=\"line\">      if (isForbiddenTag(element) &amp;&amp; !isServerRendering()) &#123;</span><br><span class=\"line\">        element.forbidden = true</span><br><span class=\"line\">        process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn(</span><br><span class=\"line\">          &#x27;Templates should only be responsible for mapping the state to the &#x27; +</span><br><span class=\"line\">          &#x27;UI. Avoid placing tags with side-effects in your templates, such as &#x27; +</span><br><span class=\"line\">          `&lt;$&#123;tag&#125;&gt;` + &#x27;, as they will not be parsed.&#x27;</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // apply pre-transforms</span><br><span class=\"line\">      for (let i = 0; i &lt; preTransforms.length; i++) &#123;</span><br><span class=\"line\">        preTransforms[i](element, options)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (!inVPre) &#123;</span><br><span class=\"line\">        processPre(element) // 如果标签有v-pre，则element.pre = true</span><br><span class=\"line\">        if (element.pre) &#123;</span><br><span class=\"line\">          inVPre = true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (platformIsPreTag(element.tag)) &#123; // 判断tag是不是pre</span><br><span class=\"line\">        inPre = true</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (inVPre) &#123;</span><br><span class=\"line\">        processRawAttrs(element)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        processFor(element) // v-for</span><br><span class=\"line\">        processIf(element) // v-if</span><br><span class=\"line\">        processOnce(element) // v-once element.once = true</span><br><span class=\"line\">        processKey(element) // key element.key = i</span><br><span class=\"line\"></span><br><span class=\"line\">        // determine whether this is a plain element after</span><br><span class=\"line\">        // removing structural attributes</span><br><span class=\"line\">        // 不存在其他属性的&#x27;纯&#x27;元素</span><br><span class=\"line\">        element.plain = !element.key &amp;&amp; !attrs.length</span><br><span class=\"line\"></span><br><span class=\"line\">        processRef(element) // ref</span><br><span class=\"line\">        processSlot(element) // slot</span><br><span class=\"line\">        processComponent(element) // is</span><br><span class=\"line\"></span><br><span class=\"line\">        // transforms包含了class和style的处理函数</span><br><span class=\"line\">        // 给element添加了staticClass(class)和classBinding(:class||v-bind:class)属性</span><br><span class=\"line\">        // 给element添加了staticStyle(style)和styleBinding(:style||v-bind:style)属性</span><br><span class=\"line\">        for (let i = 0; i &lt; transforms.length; i++) &#123;</span><br><span class=\"line\">          transforms[i](element, options)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        processAttrs(element) // 处理除了上面的其他属性</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      function checkRootConstraints (el) &#123;</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">          // slot和template报错提示</span><br><span class=\"line\">          if (el.tag === &#x27;slot&#x27; || el.tag === &#x27;template&#x27;) &#123;</span><br><span class=\"line\">            warnOnce(</span><br><span class=\"line\">              `Cannot use &lt;$&#123;el.tag&#125;&gt; as component root element because it may ` +</span><br><span class=\"line\">              &#x27;contain multiple nodes.&#x27;</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          // 根节点不能加v-for报错提示</span><br><span class=\"line\">          if (el.attrsMap.hasOwnProperty(&#x27;v-for&#x27;)) &#123;</span><br><span class=\"line\">            warnOnce(</span><br><span class=\"line\">              &#x27;Cannot use v-for on stateful component root element because &#x27; +</span><br><span class=\"line\">              &#x27;it renders multiple elements.&#x27;</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // tree management</span><br><span class=\"line\">      if (!root) &#123; // 第一次进入这个if</span><br><span class=\"line\">        root = element</span><br><span class=\"line\">        checkRootConstraints(root) // 见上面函数</span><br><span class=\"line\">      &#125; else if (!stack.length) &#123;</span><br><span class=\"line\">        // allow root elements with v-if, v-else-if and v-else</span><br><span class=\"line\">        if (root.if &amp;&amp; (element.elseif || element.else)) &#123;</span><br><span class=\"line\">          checkRootConstraints(element)</span><br><span class=\"line\">          addIfCondition(root, &#123;</span><br><span class=\"line\">            exp: element.elseif,</span><br><span class=\"line\">            block: element</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125; else if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">          warnOnce(</span><br><span class=\"line\">            `Component template should contain exactly one root element. ` +</span><br><span class=\"line\">            `If you are using v-if on multiple elements, ` +</span><br><span class=\"line\">            `use v-else-if to chain them instead.`</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (currentParent &amp;&amp; !element.forbidden) &#123; // 第一次不进if</span><br><span class=\"line\">        if (element.elseif || element.else) &#123;</span><br><span class=\"line\">          processIfConditions(element, currentParent)</span><br><span class=\"line\">        &#125; else if (element.slotScope) &#123; // scoped slot</span><br><span class=\"line\">          currentParent.plain = false</span><br><span class=\"line\">          const name = element.slotTarget || &#x27;&quot;default&quot;&#x27;</span><br><span class=\"line\">          ;(currentParent.scopedSlots || (currentParent.scopedSlots = &#123;&#125;))[name] = element</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          currentParent.children.push(element)</span><br><span class=\"line\">          element.parent = currentParent</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (!unary) &#123; // 不是单标签</span><br><span class=\"line\">        currentParent = element</span><br><span class=\"line\">        stack.push(element)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        endPre(element)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // apply post-transforms</span><br><span class=\"line\">      // 不知道是啥</span><br><span class=\"line\">      for (let i = 0; i &lt; postTransforms.length; i++) &#123;</span><br><span class=\"line\">        postTransforms[i](element, options)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    end () &#123;</span><br><span class=\"line\">      // remove trailing whitespace</span><br><span class=\"line\">      const element = stack[stack.length - 1]</span><br><span class=\"line\">      const lastNode = element.children[element.children.length - 1]</span><br><span class=\"line\">      if (lastNode &amp;&amp; lastNode.type === 3 &amp;&amp; lastNode.text === &#x27; &#x27; &amp;&amp; !inPre) &#123;</span><br><span class=\"line\">        element.children.pop()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // pop stack 删除最近的一个闭合标签</span><br><span class=\"line\">      stack.length -= 1</span><br><span class=\"line\">      // currentParent变为上一层节点</span><br><span class=\"line\">      currentParent = stack[stack.length - 1]</span><br><span class=\"line\">      // pre做结束处理</span><br><span class=\"line\">      endPre(element)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chars (text: string) &#123;</span><br><span class=\"line\">      if (!currentParent) &#123; // 这里可能是Component template必须要有个根节点</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">          if (text === template) &#123;</span><br><span class=\"line\">            warnOnce(</span><br><span class=\"line\">              &#x27;Component template requires a root element, rather than just text.&#x27;</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125; else if ((text = text.trim())) &#123;</span><br><span class=\"line\">            warnOnce(</span><br><span class=\"line\">              `text &quot;$&#123;text&#125;&quot; outside root element will be ignored.`</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // IE textarea placeholder bug</span><br><span class=\"line\">      // ie才有的bug，现在没条件测试</span><br><span class=\"line\">      /* istanbul ignore if */</span><br><span class=\"line\">      if (isIE &amp;&amp;</span><br><span class=\"line\">          currentParent.tag === &#x27;textarea&#x27; &amp;&amp;</span><br><span class=\"line\">          currentParent.attrsMap.placeholder === text) &#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      const children = currentParent.children</span><br><span class=\"line\">      text = inPre || text.trim() // pre里面或者存在静态文本</span><br><span class=\"line\">        ? decodeHTMLCached(text) // text处理,取了textContent的值，在chrome把&amp;lt;转为了&lt;</span><br><span class=\"line\">        // only preserve whitespace if its not right after a starting tag</span><br><span class=\"line\">        : preserveWhitespace &amp;&amp; children.length ? &#x27; &#x27; : &#x27;&#x27;</span><br><span class=\"line\">      if (text) &#123;</span><br><span class=\"line\">        let expression</span><br><span class=\"line\">        if (!inVPre &amp;&amp; text !== &#x27; &#x27; &amp;&amp; (expression = parseText(text, delimiters))) &#123; // 判断是不是&#123;&#123;&#125;&#125;表达式, 并提取表达式为render函数</span><br><span class=\"line\">          children.push(&#123;</span><br><span class=\"line\">            type: 2,</span><br><span class=\"line\">            expression,</span><br><span class=\"line\">            text</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125; else if (text !== &#x27; &#x27; || !children.length || children[children.length - 1].text !== &#x27; &#x27;) &#123; // 纯粹的静态文本、父节点v-pre|pre、</span><br><span class=\"line\">          children.push(&#123;</span><br><span class=\"line\">            type: 3,</span><br><span class=\"line\">            text</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return root</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行到 <code>parseHTML</code> , 继续跟进</p>\n<p>文件在 src/compiler/parser/html-parser.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function parseHTML (html, options) &#123;</span><br><span class=\"line\">  const stack = [] // 一些赋值操作</span><br><span class=\"line\">  const expectHTML = options.expectHTML</span><br><span class=\"line\">  const isUnaryTag = options.isUnaryTag || no</span><br><span class=\"line\">  const canBeLeftOpenTag = options.canBeLeftOpenTag || no</span><br><span class=\"line\">  let index = 0</span><br><span class=\"line\">  let last, lastTag</span><br><span class=\"line\">  while (html) &#123; // 循环template模板</span><br><span class=\"line\">    last = html</span><br><span class=\"line\"></span><br><span class=\"line\">    // Make sure we&#x27;re not in a plaintext content element like script/style</span><br><span class=\"line\">    // 不是script,style,textarea中的一个</span><br><span class=\"line\">    if (!lastTag || !isPlainTextElement(lastTag)) &#123;</span><br><span class=\"line\">      let textEnd = html.indexOf(&#x27;&lt;&#x27;)</span><br><span class=\"line\">      if (textEnd === 0) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Comment: 是不是注释</span><br><span class=\"line\">        // 注释直接截取不做额外处理</span><br><span class=\"line\">        if (comment.test(html)) &#123;</span><br><span class=\"line\">          const commentEnd = html.indexOf(&#x27;--&gt;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">          if (commentEnd &gt;= 0) &#123;</span><br><span class=\"line\">            advance(commentEnd + 3)</span><br><span class=\"line\">            continue</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment</span><br><span class=\"line\">        // 看链接</span><br><span class=\"line\">        if (conditionalComment.test(html)) &#123;</span><br><span class=\"line\">          const conditionalEnd = html.indexOf(&#x27;]&gt;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">          if (conditionalEnd &gt;= 0) &#123;</span><br><span class=\"line\">            advance(conditionalEnd + 2)</span><br><span class=\"line\">            continue</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Doctype:</span><br><span class=\"line\">        const doctypeMatch = html.match(doctype)</span><br><span class=\"line\">        if (doctypeMatch) &#123;</span><br><span class=\"line\">          advance(doctypeMatch[0].length)</span><br><span class=\"line\">          continue</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // End tag: 末尾标签</span><br><span class=\"line\">        const endTagMatch = html.match(endTag)</span><br><span class=\"line\">        if (endTagMatch) &#123;</span><br><span class=\"line\">          const curIndex = index</span><br><span class=\"line\">          advance(endTagMatch[0].length)</span><br><span class=\"line\">          parseEndTag(endTagMatch[1], curIndex, index)</span><br><span class=\"line\">          continue</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Start tag: 开始标签</span><br><span class=\"line\">        const startTagMatch = parseStartTag()</span><br><span class=\"line\">        if (startTagMatch) &#123;</span><br><span class=\"line\">          handleStartTag(startTagMatch)</span><br><span class=\"line\">          continue</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      let text, rest, next</span><br><span class=\"line\">      if (textEnd &gt;= 0) &#123; // 第二次进这里 去除换行符</span><br><span class=\"line\">        rest = html.slice(textEnd)</span><br><span class=\"line\">        while (</span><br><span class=\"line\">          !endTag.test(rest) &amp;&amp; // 不是结束标签</span><br><span class=\"line\">          !startTagOpen.test(rest) &amp;&amp; // 不是开始标签</span><br><span class=\"line\">          !comment.test(rest) &amp;&amp; // 不是注释</span><br><span class=\"line\">          !conditionalComment.test(rest) // 不是![</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">          // &lt; in plain text, be forgiving and treat it as text</span><br><span class=\"line\">          // &lt;可能会存在文本中，fds&quot;&lt;&quot;fasdf,但在chrome里&lt;会被转化为&amp;lt;</span><br><span class=\"line\">          // 目前还不清楚怎么进这个条件</span><br><span class=\"line\">          // 不过这里的最终目的还是为了找到最近的并且是标签的&lt;</span><br><span class=\"line\">          next = rest.indexOf(&#x27;&lt;&#x27;, 1)</span><br><span class=\"line\">          if (next &lt; 0) break</span><br><span class=\"line\">          textEnd += next</span><br><span class=\"line\">          rest = html.slice(textEnd)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        text = html.substring(0, textEnd)</span><br><span class=\"line\">        advance(textEnd)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (textEnd &lt; 0) &#123;</span><br><span class=\"line\">        text = html</span><br><span class=\"line\">        html = &#x27;&#x27;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (options.chars &amp;&amp; text) &#123; // 本例第二次loop进入这里</span><br><span class=\"line\">        options.chars(text)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      var stackedTag = lastTag.toLowerCase()</span><br><span class=\"line\">      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp(&#x27;([\\\\s\\\\S]*?)(&lt;/&#x27; + stackedTag + &#x27;[^&gt;]*&gt;)&#x27;, &#x27;i&#x27;))</span><br><span class=\"line\">      var endTagLength = 0</span><br><span class=\"line\">      var rest = html.replace(reStackedTag, function (all, text, endTag) &#123;</span><br><span class=\"line\">        endTagLength = endTag.length</span><br><span class=\"line\">        if (!isPlainTextElement(stackedTag) &amp;&amp; stackedTag !== &#x27;noscript&#x27;) &#123;</span><br><span class=\"line\">          text = text</span><br><span class=\"line\">            .replace(/&lt;!--([\\s\\S]*?)--&gt;/g, &#x27;$1&#x27;)</span><br><span class=\"line\">            .replace(/&lt;!\\[CDATA\\[([\\s\\S]*?)]]&gt;/g, &#x27;$1&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (options.chars) &#123;</span><br><span class=\"line\">          options.chars(text)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &#x27;&#x27;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      index += html.length - rest.length</span><br><span class=\"line\">      html = rest</span><br><span class=\"line\">      parseEndTag(stackedTag, index - endTagLength, index)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (html === last) &#123;</span><br><span class=\"line\">      options.chars &amp;&amp; options.chars(html)</span><br><span class=\"line\">      if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; !stack.length &amp;&amp; options.warn) &#123;</span><br><span class=\"line\">        options.warn(`Mal-formatted tag at end of template: &quot;$&#123;html&#125;&quot;`)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Clean up any remaining tags</span><br><span class=\"line\">  parseEndTag()</span><br><span class=\"line\"></span><br><span class=\"line\">  function advance (n) &#123;</span><br><span class=\"line\">    index += n</span><br><span class=\"line\">    html = html.substring(n)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function parseStartTag () &#123;</span><br><span class=\"line\">    // match在不加g的时候同exec方法</span><br><span class=\"line\">    // 0返回匹配，1返回正则括号里的匹配</span><br><span class=\"line\">    const start = html.match(startTagOpen)</span><br><span class=\"line\">    if (start) &#123;</span><br><span class=\"line\">      const match = &#123;</span><br><span class=\"line\">        tagName: start[1],</span><br><span class=\"line\">        attrs: [],</span><br><span class=\"line\">        start: index</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // 给index重新赋值并且截取html模板</span><br><span class=\"line\">      advance(start[0].length)</span><br><span class=\"line\">      let end, attr</span><br><span class=\"line\">      // end匹配&gt;,attr获取标签的属性(id,class等)</span><br><span class=\"line\">      // attr并不能一次性获取全部属性，而是通过不断的遍历和截取字符窜每次获取一组属性</span><br><span class=\"line\">      // 这个匹配正则需要研究一下</span><br><span class=\"line\">      // /^\\s*([^\\s&quot;&#x27;&lt;&gt;\\/=]+)(?:\\s*((?:=))\\s*(?:&quot;([^&quot;]*)&quot;+|&#x27;([^&#x27;]*)&#x27;+|([^\\s&quot;&#x27;=&lt;&gt;`]+)))?/</span><br><span class=\"line\">      // 3,4,5分别匹配了id=&quot;app&quot;|id=&#x27;app&#x27;|id=app 三种属性书写格式</span><br><span class=\"line\">      // 当匹配到末尾标签&gt;时跳出循环</span><br><span class=\"line\">      while (!(end = html.match(startTagClose)) &amp;&amp; (attr = html.match(attribute))) &#123;</span><br><span class=\"line\">        advance(attr[0].length)</span><br><span class=\"line\">        match.attrs.push(attr)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (end) &#123;</span><br><span class=\"line\">        // 单标签斜杠</span><br><span class=\"line\">        match.unarySlash = end[1]</span><br><span class=\"line\">        advance(end[0].length)</span><br><span class=\"line\">        match.end = index // 末尾index</span><br><span class=\"line\">        return match</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function handleStartTag (match) &#123;</span><br><span class=\"line\">    const tagName = match.tagName</span><br><span class=\"line\">    const unarySlash = match.unarySlash</span><br><span class=\"line\"></span><br><span class=\"line\">    if (expectHTML) &#123;</span><br><span class=\"line\">      // 判断了p和 不是段落标签 (这是标签嵌套规范，可以自行搜索)</span><br><span class=\"line\">      if (lastTag === &#x27;p&#x27; &amp;&amp; isNonPhrasingTag(tagName)) &#123;</span><br><span class=\"line\">        parseEndTag(lastTag)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 可以不闭合的标签</span><br><span class=\"line\">      if (canBeLeftOpenTag(tagName) &amp;&amp; lastTag === tagName) &#123;</span><br><span class=\"line\">        parseEndTag(tagName)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 是否单标签</span><br><span class=\"line\">    const unary = isUnaryTag(tagName) || tagName === &#x27;html&#x27; &amp;&amp; lastTag === &#x27;head&#x27; || !!unarySlash</span><br><span class=\"line\"></span><br><span class=\"line\">    const l = match.attrs.length</span><br><span class=\"line\">    const attrs = new Array(l)</span><br><span class=\"line\">    for (let i = 0; i &lt; l; i++) &#123;</span><br><span class=\"line\">      const args = match.attrs[i]</span><br><span class=\"line\">      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778</span><br><span class=\"line\">      if (IS_REGEX_CAPTURING_BROKEN &amp;&amp; args[0].indexOf(&#x27;&quot;&quot;&#x27;) === -1) &#123;</span><br><span class=\"line\">        if (args[3] === &#x27;&#x27;) &#123; delete args[3] &#125;</span><br><span class=\"line\">        if (args[4] === &#x27;&#x27;) &#123; delete args[4] &#125;</span><br><span class=\"line\">        if (args[5] === &#x27;&#x27;) &#123; delete args[5] &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      const value = args[3] || args[4] || args[5] || &#x27;&#x27;</span><br><span class=\"line\">      attrs[i] = &#123;</span><br><span class=\"line\">        name: args[1],</span><br><span class=\"line\">        value: decodeAttr(</span><br><span class=\"line\">          value,</span><br><span class=\"line\">          options.shouldDecodeNewlines // ie才会出的问题，其他浏览器没有</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 不是单标签就添加到stack数组</span><br><span class=\"line\">    if (!unary) &#123;</span><br><span class=\"line\">      stack.push(&#123; tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs &#125;)</span><br><span class=\"line\">      lastTag = tagName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (options.start) &#123; // 这里调用start方法，回到start函数</span><br><span class=\"line\">      options.start(tagName, attrs, unary, match.start, match.end)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function parseEndTag (tagName, start, end) &#123;</span><br><span class=\"line\">    let pos, lowerCasedTagName</span><br><span class=\"line\">    if (start == null) start = index</span><br><span class=\"line\">    if (end == null) end = index</span><br><span class=\"line\"></span><br><span class=\"line\">    if (tagName) &#123;</span><br><span class=\"line\">      lowerCasedTagName = tagName.toLowerCase()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Find the closest opened tag of the same type</span><br><span class=\"line\">    // 找到最近的相同标签</span><br><span class=\"line\">    if (tagName) &#123;</span><br><span class=\"line\">      for (pos = stack.length - 1; pos &gt;= 0; pos--) &#123;</span><br><span class=\"line\">        if (stack[pos].lowerCasedTag === lowerCasedTagName) &#123;</span><br><span class=\"line\">          break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // If no tag name is provided, clean shop</span><br><span class=\"line\">      pos = 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (pos &gt;= 0) &#123;</span><br><span class=\"line\">      // Close all the open elements, up the stack</span><br><span class=\"line\">      //</span><br><span class=\"line\">      for (let i = stack.length - 1; i &gt;= pos; i--) &#123;</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp;</span><br><span class=\"line\">            (i &gt; pos || !tagName) &amp;&amp;</span><br><span class=\"line\">            options.warn) &#123;</span><br><span class=\"line\">          // 没有对应的结束标签</span><br><span class=\"line\">          options.warn(</span><br><span class=\"line\">            `tag &lt;$&#123;stack[i].tag&#125;&gt; has no matching end tag.`</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (options.end) &#123;</span><br><span class=\"line\">          options.end(stack[i].tag, start, end)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // Remove the open elements from the stack</span><br><span class=\"line\">      // 删除最后一个</span><br><span class=\"line\">      stack.length = pos</span><br><span class=\"line\">      // lastTag变成最后一个</span><br><span class=\"line\">      lastTag = pos &amp;&amp; stack[pos - 1].tag</span><br><span class=\"line\">    &#125; else if (lowerCasedTagName === &#x27;br&#x27;) &#123;</span><br><span class=\"line\">      if (options.start) &#123;</span><br><span class=\"line\">        options.start(tagName, [], true, start, end)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else if (lowerCasedTagName === &#x27;p&#x27;) &#123;</span><br><span class=\"line\">      if (options.start) &#123;</span><br><span class=\"line\">        options.start(tagName, [], false, start, end)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (options.end) &#123;</span><br><span class=\"line\">        options.end(tagName, start, end)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>parse 返回了一个 ast 树，所有的节点都经过了最基础的处理。<br>\n然后是 <code>optimize(ast, options)</code></p>\n<p><code>optimize</code>  在 src/compiler/optimizer.js</p>\n<p><code>optimize</code>  的作用是找出 ast 树里面的静态节点 (节点是静态文本也没有 v 事件绑定) 和静态根节点 (节点下的所有子节点都是静态节点)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Goal of the optimizer: walk the generated template AST tree</span><br><span class=\"line\"> * and detect sub-trees that are purely static, i.e. parts of</span><br><span class=\"line\"> * the DOM that never needs to change.</span><br><span class=\"line\"> * 找出ast里面的静态节点，然后不需要重复的取处理他们(因为他们是静态的不会改变的)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * Once we detect these sub-trees, we can:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 1. Hoist them into constants, so that we no longer need to</span><br><span class=\"line\"> *    create fresh nodes for them on each re-render;</span><br><span class=\"line\"> * 2. Completely skip them in the patching process.</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function optimize (root: ?ASTElement, options: CompilerOptions) &#123;</span><br><span class=\"line\">  if (!root) return</span><br><span class=\"line\">  isStaticKey = genStaticKeysCached(options.staticKeys || &#x27;&#x27;)</span><br><span class=\"line\">  isPlatformReservedTag = options.isReservedTag || no</span><br><span class=\"line\">  // first pass: mark all non-static nodes.</span><br><span class=\"line\">  // 标记节点是否静态</span><br><span class=\"line\">  markStatic(root)</span><br><span class=\"line\">  // second pass: mark static roots.</span><br><span class=\"line\">  // 标记是否是静态根节点</span><br><span class=\"line\">  markStaticRoots(root, false)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function markStatic (node: ASTNode) &#123;</span><br><span class=\"line\">  node.static = isStatic(node)</span><br><span class=\"line\">  if (node.type === 1) &#123;</span><br><span class=\"line\">    // do not make component slot content static. this avoids</span><br><span class=\"line\">    // 1. components not able to mutate slot nodes</span><br><span class=\"line\">    // 2. static slot content fails for hot-reloading</span><br><span class=\"line\">    if (</span><br><span class=\"line\">      !isPlatformReservedTag(node.tag) &amp;&amp;</span><br><span class=\"line\">      node.tag !== &#x27;slot&#x27; &amp;&amp;</span><br><span class=\"line\">      node.attrsMap[&#x27;inline-template&#x27;] == null</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for (let i = 0, l = node.children.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      const child = node.children[i]</span><br><span class=\"line\">      markStatic(child)</span><br><span class=\"line\">      if (!child.static) &#123;</span><br><span class=\"line\">        node.static = false</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function isStatic (node: ASTNode): boolean &#123;</span><br><span class=\"line\">  if (node.type === 2) &#123; // expression 有表达式就不是</span><br><span class=\"line\">    return false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (node.type === 3) &#123; // text // 文本就是</span><br><span class=\"line\">    return true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return !!(node.pre || ( // v-pre不做编译，是</span><br><span class=\"line\">    !node.hasBindings &amp;&amp; // no dynamic bindings 没有动态绑定</span><br><span class=\"line\">    !node.if &amp;&amp; !node.for &amp;&amp; // not v-if or v-for or v-else</span><br><span class=\"line\">    !isBuiltInTag(node.tag) &amp;&amp; // not a built-in</span><br><span class=\"line\">    isPlatformReservedTag(node.tag) &amp;&amp; // not a component</span><br><span class=\"line\">    !isDirectChildOfTemplateFor(node) &amp;&amp; // template没有for</span><br><span class=\"line\">    Object.keys(node).every(isStaticKey) // 节点的属性只能是isStaticKey里面那几个</span><br><span class=\"line\">  ))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function markStaticRoots (node: ASTNode, isInFor: boolean) &#123;</span><br><span class=\"line\">  if (node.type === 1) &#123;</span><br><span class=\"line\">    if (node.static || node.once) &#123;</span><br><span class=\"line\">      node.staticInFor = isInFor</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // For a node to qualify as a static root, it should have children that</span><br><span class=\"line\">    // are not just static text. Otherwise the cost of hoisting out will</span><br><span class=\"line\">    // outweigh the benefits and it&#x27;s better off to just always render it fresh.</span><br><span class=\"line\">    if (node.static &amp;&amp; node.children.length &amp;&amp; !( // 该节点静态</span><br><span class=\"line\">      node.children.length === 1 &amp;&amp; // 节点只有一个子节点</span><br><span class=\"line\">      node.children[0].type === 3 // 子节点是文本节点</span><br><span class=\"line\">    )) &#123;</span><br><span class=\"line\">      node.staticRoot = true</span><br><span class=\"line\">      return</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      node.staticRoot = false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (node.children) &#123; // 有多个子节点就进行循环递归判断</span><br><span class=\"line\">      for (let i = 0, l = node.children.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">        markStaticRoots(node.children[i], isInFor || !!node.for)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (node.ifConditions) &#123;</span><br><span class=\"line\">      walkThroughConditionsBlocks(node.ifConditions, isInFor)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Vue笔记"
            ]
        },
        {
            "id": "http://example.com/2018/01/23/vue/2/",
            "url": "http://example.com/2018/01/23/vue/2/",
            "title": "Vue源码阅读笔记（2）(Vue的生命周期)",
            "date_published": "2018-01-23T06:30:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpdXRhby92dWUyLjAtc291cmNlL2Jsb2IvbWFzdGVyLyVFNCVCQiU4RSVFNCVCOCU4MCVFNCVCOCVBQSVFNSVCMCU4RiVFNiVBMCU5NyVFNSVBRCU5MCVFNiU5RiVBNSVFNyU5QyU4QlZ1ZSVFNyU5QSU4NCVFNyU5NCU5RiVFNSU5MSVCRCVFNSU5MSVBOCVFNiU5QyU5Ri5tZA==\">参考了的文章</span><br>\n以文章提供的思路自己过一遍代码</p>\n<p>------------- 咯咯咯 ----------</p>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>以下实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  var vm = new Vue(&#123;</span><br><span class=\"line\">    el: &#x27;#app&#x27;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      message: &#x27;第一个vue实例&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      child: &#123;</span><br><span class=\"line\">        template: &quot;&lt;div&gt;&#123;&#123;a&#125;&#125;&lt;/div&gt;&quot;,</span><br><span class=\"line\">        inject: [&#x27;a&#x27;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    provide: &#123;</span><br><span class=\"line\">      a: &#x27;a&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>以 <code>new Vue</code>  开始，让我们来看一下 vue 都做了哪些工作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Vue (options) &#123; // vue定义的地方</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp;</span><br><span class=\"line\">    !(this instanceof Vue)) &#123; // 是不是new Vue()</span><br><span class=\"line\">    warn(&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this._init(options)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">initMixin(Vue) // _init</span><br></pre></td></tr></table></figure>\n<h2 id=\"init\"><a class=\"markdownIt-Anchor\" href=\"#init\">#</a> init</h2>\n<p>这里 vue 只触发了一个方法 <code>this._init(options)</code> <br>\n 跟进 <code>_init</code>  方法 src/core/instance/init.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype._init = function (options?: Object) &#123;</span><br><span class=\"line\">  const vm: Component = this</span><br><span class=\"line\">  // a uid</span><br><span class=\"line\">  vm._uid = uid++</span><br><span class=\"line\"></span><br><span class=\"line\">  let startTag, endTag</span><br><span class=\"line\">  /* istanbul ignore if */</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">    startTag = `vue-perf-init:$&#123;vm._uid&#125;`</span><br><span class=\"line\">    endTag = `vue-perf-end:$&#123;vm._uid&#125;`</span><br><span class=\"line\">    mark(startTag)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // a flag to avoid this being observed</span><br><span class=\"line\">  vm._isVue = true</span><br><span class=\"line\">  // merge options options是传进来的,options._isComponent是什么，貌似没有手动传这个参数？？</span><br><span class=\"line\">  if (options &amp;&amp; options._isComponent) &#123; // _isComponent是内部创建子组件时才会添加为true的属性</span><br><span class=\"line\">    // optimize internal component instantiation</span><br><span class=\"line\">    // since dynamic options merging is pretty slow, and none of the</span><br><span class=\"line\">    // internal component options needs special treatment.</span><br><span class=\"line\">    initInternalComponent(vm, options)</span><br><span class=\"line\">  &#125; else &#123; // 在这个案例下走的是else</span><br><span class=\"line\">    vm.$options = mergeOptions(</span><br><span class=\"line\">      resolveConstructorOptions(vm.constructor),</span><br><span class=\"line\">      options || &#123;&#125;,</span><br><span class=\"line\">      vm</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /* istanbul ignore else */</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">    initProxy(vm)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    vm._renderProxy = vm</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // expose real self</span><br><span class=\"line\">  vm._self = vm</span><br><span class=\"line\">  initLifecycle(vm)</span><br><span class=\"line\">  initEvents(vm)</span><br><span class=\"line\">  initRender(vm)</span><br><span class=\"line\">  callHook(vm, &#x27;beforeCreate&#x27;)</span><br><span class=\"line\">  initInjections(vm) // resolve injections before data/props</span><br><span class=\"line\">  initState(vm)</span><br><span class=\"line\">  initProvide(vm) // resolve provide after data/props</span><br><span class=\"line\">  callHook(vm, &#x27;created&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">  /* istanbul ignore if */</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">    vm._name = formatComponentName(vm, false)</span><br><span class=\"line\">    mark(endTag)</span><br><span class=\"line\">    measure(`$&#123;vm._name&#125; init`, startTag, endTag)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (vm.$options.el) &#123;</span><br><span class=\"line\">    vm.$mount(vm.$options.el)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个例子没有内部子组件，所以走 else 路线，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.$options = mergeOptions(</span><br><span class=\"line\">  resolveConstructorOptions(vm.constructor),</span><br><span class=\"line\">  options || &#123;&#125;,</span><br><span class=\"line\">  vm</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"resolveconstructoroptions\"><a class=\"markdownIt-Anchor\" href=\"#resolveconstructoroptions\">#</a> resolveConstructorOptions</h3>\n<p>这里的 <code>mergeOptions</code>  应该是一个类似 Object.assign 的方法， <code>resolveConstructorOptions</code>  猜不出意思，不过根据参考文章和具体代码，我知道了这个方法是在 <code>Vue.extend</code>  上才会被完全使用，在目前的情况下，这里原封不动的返回了 options</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function resolveConstructorOptions (Ctor: Class&lt;Component&gt;) &#123;</span><br><span class=\"line\">  let options = Ctor.options</span><br><span class=\"line\">  // 有super属性，说明Ctor是通过Vue.extend()方法创建的子类</span><br><span class=\"line\">  if (Ctor.super) &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return options // 在这里options没有经过任何处理就直接返回了</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mergeoptions\"><a class=\"markdownIt-Anchor\" href=\"#mergeoptions\">#</a> mergeOptions</h3>\n<p>现在来看 <code>mergeOptions</code> ，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Merge two option objects into a new one. 合并两个boject</span><br><span class=\"line\"> * Core utility used in both instantiation and inheritance.</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function mergeOptions (</span><br><span class=\"line\">  parent: Object,</span><br><span class=\"line\">  child: Object,</span><br><span class=\"line\">  vm?: Component</span><br><span class=\"line\">): Object &#123; // ts语法，必要返回一个object</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">    checkComponents(child) // 判断组件名是否合法</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  normalizeProps(child) // 格式化prop，暂不深究？</span><br><span class=\"line\">  normalizeDirectives(child) // 格式化directive，暂不深究？</span><br><span class=\"line\">  const extendsFrom = child.extends // options.extends</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * var CompA = &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 在没有调用 `Vue.extend` 时候继承 CompA</span><br><span class=\"line\">    var CompB = &#123;</span><br><span class=\"line\">      extends: CompA,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    在这种情况下才会有extends</span><br><span class=\"line\">   */</span><br><span class=\"line\">  if (extendsFrom) &#123;</span><br><span class=\"line\">    parent = typeof extendsFrom === &#x27;function&#x27;</span><br><span class=\"line\">      ? mergeOptions(parent, extendsFrom.options, vm)</span><br><span class=\"line\">      : mergeOptions(parent, extendsFrom, vm)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * var mixin = &#123;</span><br><span class=\"line\">      created: function () &#123; console.log(1) &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var vm = new Vue(&#123;</span><br><span class=\"line\">      created: function () &#123; console.log(2) &#125;,</span><br><span class=\"line\">      mixins: [mixin]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    // =&gt; 1</span><br><span class=\"line\">    // =&gt; 2</span><br><span class=\"line\">    这里也是</span><br><span class=\"line\">   */</span><br><span class=\"line\">  if (child.mixins) &#123;</span><br><span class=\"line\">    for (let i = 0, l = child.mixins.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      let mixin = child.mixins[i]</span><br><span class=\"line\">      if (mixin.prototype instanceof Vue) &#123;</span><br><span class=\"line\">        mixin = mixin.options</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      parent = mergeOptions(parent, mixin, vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const options = &#123;&#125;</span><br><span class=\"line\">  let key</span><br><span class=\"line\">  for (key in parent) &#123; // components,directives,filters,_base</span><br><span class=\"line\">    mergeField(key) // strats[key] = mergeAssets</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  for (key in child) &#123; // el、data</span><br><span class=\"line\">    if (!hasOwn(parent, key)) &#123;</span><br><span class=\"line\">      mergeField(key) // strats.el = defaultStrat strats.data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function mergeField (key) &#123;</span><br><span class=\"line\">    const strat = strats[key] || defaultStrat</span><br><span class=\"line\">    options[key] = strat(parent[key], child[key], vm, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  console.log(options)</span><br><span class=\"line\">  /*</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;components&quot;:&#123;&#125;,</span><br><span class=\"line\">    &quot;directives&quot;:&#123;&#125;,</span><br><span class=\"line\">    &quot;filters&quot;:&#123;&#125;,</span><br><span class=\"line\">    &quot;el&quot;:&quot;#app&quot;,</span><br><span class=\"line\">    data:funcion mergedInstanceDataFn,</span><br><span class=\"line\">    _base: Vue</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   */</span><br><span class=\"line\">  return options // components,directives,filters,_base,el,data</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>给 options 添加了 components,directives,filters,_base,el,data 属性</p>\n<h3 id=\"initproxy\"><a class=\"markdownIt-Anchor\" href=\"#initproxy\">#</a> initProxy</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initProxy = function initProxy (vm) &#123;</span><br><span class=\"line\">    if (hasProxy) &#123;</span><br><span class=\"line\">      // determine which proxy handler to use</span><br><span class=\"line\">      const options = vm.$options</span><br><span class=\"line\">      console.log(options)</span><br><span class=\"line\">      const handlers = options.render &amp;&amp; options.render._withStripped</span><br><span class=\"line\">        ? getHandler</span><br><span class=\"line\">        : hasHandler</span><br><span class=\"line\">      vm._renderProxy = new Proxy(vm, handlers)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      vm._renderProxy = vm</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>在开发环境中，如果支持 es6 的 proxy 语法，vm._renderProxy 等于一个 proxy 对象，<del>具体有什么用还未知，所以暂不深究</del><br>\n在下面的解读中，我已经知道最终的 render 生成函数就是在 vm._renderProxy 的环境下执行的。</p>\n<h3 id=\"initlifecycle\"><a class=\"markdownIt-Anchor\" href=\"#initlifecycle\">#</a> initLifecycle</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initLifecycle (vm: Component) &#123;</span><br><span class=\"line\">  const options = vm.$options</span><br><span class=\"line\">  console.log(options)</span><br><span class=\"line\"></span><br><span class=\"line\">  // locate first non-abstract parent</span><br><span class=\"line\">  let parent = options.parent</span><br><span class=\"line\">  if (parent &amp;&amp; !options.abstract) &#123; // 抽象节点相关？abstract暂不清楚在哪里用到</span><br><span class=\"line\">    while (parent.$options.abstract &amp;&amp; parent.$parent) &#123;</span><br><span class=\"line\">      parent = parent.$parent</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent.$children.push(vm)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.$parent = parent // 在这里是undefined</span><br><span class=\"line\">  vm.$root = parent ? parent.$root : vm // 在这里是vm</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.$children = []</span><br><span class=\"line\">  vm.$refs = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  vm._watcher = null</span><br><span class=\"line\">  vm._inactive = null</span><br><span class=\"line\">  vm._directInactive = false</span><br><span class=\"line\">  vm._isMounted = false</span><br><span class=\"line\">  vm._isDestroyed = false</span><br><span class=\"line\">  vm._isBeingDestroyed = false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化生命周期相关的标识</p>\n<p>options.abstract 用于判断是否是抽象组件，组件的父子关系建立会跳过抽象组件，抽象组件比如 keep-alive、transition 等。所有的子组件 $root 都指向顶级组件。</p>\n<h3 id=\"initevents\"><a class=\"markdownIt-Anchor\" href=\"#initevents\">#</a> initEvents</h3>\n<p>初始化 event 相关</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initEvents (vm: Component) &#123;</span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Object.create(null)没有继承任何原型方法，也就是说它的原型链没有上一层。</span><br><span class=\"line\">    console.log(Object.create(&#123;&#125;).toString);   // function toString() &#123; [native code] &#125;</span><br><span class=\"line\">    console.log(Object.create(null).toString); // undefined</span><br><span class=\"line\">    之前看到的也同理，只怪当初没baidu</span><br><span class=\"line\">  */</span><br><span class=\"line\">  vm._events = Object.create(null) // 比&#123;&#125;更干净</span><br><span class=\"line\">  vm._hasHookEvent = false</span><br><span class=\"line\">  // init parent attached events</span><br><span class=\"line\">  const listeners = vm.$options._parentListeners</span><br><span class=\"line\">  if (listeners) &#123; // 在这里是undefined</span><br><span class=\"line\">    updateComponentListeners(vm, listeners)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>_parentListeners 是父组件中绑定在自定义标签上的事件，供子组件处理。</p>\n<h3 id=\"initrender\"><a class=\"markdownIt-Anchor\" href=\"#initrender\">#</a> initRender</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initRender (vm: Component) &#123;</span><br><span class=\"line\">  vm.$vnode = null // the placeholder node in parent tree</span><br><span class=\"line\">  vm._vnode = null // the root of the child tree</span><br><span class=\"line\">  vm._staticTrees = null</span><br><span class=\"line\">  const parentVnode = vm.$options._parentVnode</span><br><span class=\"line\">  const renderContext = parentVnode &amp;&amp; parentVnode.context // undefined</span><br><span class=\"line\">  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext) // 都是undefined，具体使用到的时候再细看</span><br><span class=\"line\">  vm.$scopedSlots = emptyObject // Object.freeze(&#123;&#125;)</span><br><span class=\"line\">  // bind the createElement fn to this instance</span><br><span class=\"line\">  // so that we get proper render context inside it.</span><br><span class=\"line\">  // args order: tag, data, children, normalizationType, alwaysNormalize</span><br><span class=\"line\">  // internal version is used by render functions compiled from templates</span><br><span class=\"line\">  vm._c = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, false) // 等具体调用到的时候再来细看</span><br><span class=\"line\">  // normalization is always applied for the public version, used in</span><br><span class=\"line\">  // user-written render functions.</span><br><span class=\"line\">  vm.$createElement = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, true)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>l</mi><mi>o</mi><mi>t</mi><mi>s</mi><mtext>、</mtext></mrow><annotation encoding=\"application/x-tex\">slots、</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">、</span></span></span></span>scopedSlots、$createElement 相关</p>\n<h3 id=\"callhook\"><a class=\"markdownIt-Anchor\" href=\"#callhook\">#</a> callHook</h3>\n<h3 id=\"initinjections\"><a class=\"markdownIt-Anchor\" href=\"#initinjections\">#</a> initInjections</h3>\n<h3 id=\"initstate\"><a class=\"markdownIt-Anchor\" href=\"#initstate\">#</a> initState</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initState (vm: Component) &#123;</span><br><span class=\"line\">  vm._watchers = []</span><br><span class=\"line\">  const opts = vm.$options</span><br><span class=\"line\">  if (opts.props) initProps(vm, opts.props)</span><br><span class=\"line\">  if (opts.methods) initMethods(vm, opts.methods)</span><br><span class=\"line\">  if (opts.data) &#123;</span><br><span class=\"line\">    initData(vm)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    observe(vm._data = &#123;&#125;, true /* asRootData */)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (opts.computed) initComputed(vm, opts.computed)</span><br><span class=\"line\">  if (opts.watch) initWatch(vm, opts.watch)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很明显这里是 props、methods、data、computed、watch 相关操作</p>\n<h4 id=\"initprops\"><a class=\"markdownIt-Anchor\" href=\"#initprops\">#</a> initProps</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initProvide (vm: Component) &#123;</span><br><span class=\"line\">  const provide = vm.$options.provide</span><br><span class=\"line\">  console.log(provide)</span><br><span class=\"line\">  if (provide) &#123;</span><br><span class=\"line\">    vm._provided = typeof provide === &#x27;function&#x27;</span><br><span class=\"line\">      ? provide.call(vm)</span><br><span class=\"line\">      : provide</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"initmethods\"><a class=\"markdownIt-Anchor\" href=\"#initmethods\">#</a> initMethods</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initMethods (vm: Component, methods: Object) &#123;</span><br><span class=\"line\">  const props = vm.$options.props</span><br><span class=\"line\">  for (const key in methods) &#123;</span><br><span class=\"line\">    vm[key] = methods[key] == null ? noop : bind(methods[key], vm) // 给函数绑定环境</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">      if (methods[key] == null) &#123; // 不空</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `method &quot;$&#123;key&#125;&quot; has an undefined value in the component definition. ` +</span><br><span class=\"line\">          `Did you reference the function correctly?`,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (props &amp;&amp; hasOwn(props, key)) &#123; // 判断props里面的变量和methods的方法命名不同</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `method &quot;$&#123;key&#125;&quot; has already been defined as a prop.`,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"initdata\"><a class=\"markdownIt-Anchor\" href=\"#initdata\">#</a> initData</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initData (vm: Component) &#123;</span><br><span class=\"line\">  let data = vm.$options.data</span><br><span class=\"line\">  data = vm._data = typeof data === &#x27;function&#x27;</span><br><span class=\"line\">    ? getData(data, vm) // data.call(vm)</span><br><span class=\"line\">    : data || &#123;&#125;</span><br><span class=\"line\">  if (!isPlainObject(data)) &#123; // typeof is &#x27;object&#x27; ?</span><br><span class=\"line\">    data = &#123;&#125;</span><br><span class=\"line\">    process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn(</span><br><span class=\"line\">      &#x27;data functions should return an object:\\n&#x27; +</span><br><span class=\"line\">      &#x27;https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function&#x27;,</span><br><span class=\"line\">      vm</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // proxy data on instance</span><br><span class=\"line\">  const keys = Object.keys(data)</span><br><span class=\"line\">  const props = vm.$options.props</span><br><span class=\"line\">  let i = keys.length</span><br><span class=\"line\">  while (i--) &#123;</span><br><span class=\"line\">    if (props &amp;&amp; hasOwn(props, keys[i])) &#123; // 判断props是否已有key</span><br><span class=\"line\">      process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn(</span><br><span class=\"line\">        `The data property &quot;$&#123;keys[i]&#125;&quot; is already declared as a prop. ` +</span><br><span class=\"line\">        `Use prop default value instead.`,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125; else if (!isReserved(keys[i])) &#123; // 不以$ _ 开头</span><br><span class=\"line\">      proxy(vm, `_data`, keys[i]) // 设置了vm[key], vm._data[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // observe data</span><br><span class=\"line\">  observe(data, true /* asRootData */) // 监听数据 data.__ob__ = new Observer(data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先得到一个至少是 {} 的 object 类型的 data 数据，遍历 data，设置了 vm [key], vm._data [key]，最后给 data 设置了监听，具体什么用暂时未知</p>\n<h3 id=\"initcomputed\"><a class=\"markdownIt-Anchor\" href=\"#initcomputed\">#</a> initComputed</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initComputed (vm: Component, computed: Object) &#123;</span><br><span class=\"line\">  const watchers = vm._computedWatchers = Object.create(null)</span><br><span class=\"line\"></span><br><span class=\"line\">  for (const key in computed) &#123;</span><br><span class=\"line\">    const userDef = computed[key]</span><br><span class=\"line\">    let getter = typeof userDef === &#x27;function&#x27; ? userDef : userDef.get</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">      if (getter === undefined) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          `No getter function has been defined for computed property &quot;$&#123;key&#125;&quot;.`,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">        getter = noop</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // create internal watcher for the computed property.</span><br><span class=\"line\">    // 为computed属性添加watcher</span><br><span class=\"line\">    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions)</span><br><span class=\"line\"></span><br><span class=\"line\">    // component-defined computed properties are already defined on the</span><br><span class=\"line\">    // component prototype. We only need to define computed properties defined</span><br><span class=\"line\">    // at instantiation here.</span><br><span class=\"line\">    if (!(key in vm)) &#123; // computed属性只能定义在computed，不能和data，props等属性重复</span><br><span class=\"line\">      defineComputed(vm, key, userDef) // watcher.evaluate()看到这一步，下面再来细看</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"initwatch\"><a class=\"markdownIt-Anchor\" href=\"#initwatch\">#</a> initWatch</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function initWatch (vm: Component, watch: Object) &#123;</span><br><span class=\"line\">  for (const key in watch) &#123;</span><br><span class=\"line\">    const handler = watch[key]</span><br><span class=\"line\">    if (Array.isArray(handler)) &#123;</span><br><span class=\"line\">      for (let i = 0; i &lt; handler.length; i++) &#123;</span><br><span class=\"line\">        createWatcher(vm, key, handler[i])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      createWatcher(vm, key, handler)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function createWatcher (vm: Component, key: string, handler: any) &#123;</span><br><span class=\"line\">  let options</span><br><span class=\"line\">  if (isPlainObject(handler)) &#123;</span><br><span class=\"line\">    options = handler</span><br><span class=\"line\">    handler = handler.handler</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (typeof handler === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">    handler = vm[handler]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  vm.$watch(key, handler, options)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用了 vm.$watch</p>\n<h3 id=\"initprovide\"><a class=\"markdownIt-Anchor\" href=\"#initprovide\">#</a> initProvide</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initProvide (vm: Component) &#123;</span><br><span class=\"line\">  const provide = vm.$options.provide</span><br><span class=\"line\">  if (provide) &#123;</span><br><span class=\"line\">    vm._provided = typeof provide === &#x27;function&#x27;</span><br><span class=\"line\">      ? provide.call(vm)</span><br><span class=\"line\">      : provide</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"mount\"><a class=\"markdownIt-Anchor\" href=\"#mount\">#</a> $mount</h2>\n<p>vm.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mi>m</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">mount(vm.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">.</span></span></span></span>options.el)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype.$mount = function (</span><br><span class=\"line\">  el?: string | Element,</span><br><span class=\"line\">  hydrating?: boolean</span><br><span class=\"line\">): Component &#123;</span><br><span class=\"line\">  el = el &amp;&amp; query(el) // query基本等于doucment.querySelecter</span><br><span class=\"line\"></span><br><span class=\"line\">  /* istanbul ignore if || Do not mount Vue to &lt;html&gt; or &lt;body&gt;  */</span><br><span class=\"line\">  if (el === document.body || el === document.documentElement) &#123;</span><br><span class=\"line\">    process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn(</span><br><span class=\"line\">      `Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.`</span><br><span class=\"line\">    )</span><br><span class=\"line\">    return this</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const options = this.$options</span><br><span class=\"line\">  console.log(options.render) // 在这里是undefined</span><br><span class=\"line\">  // resolve template/el and convert to render function</span><br><span class=\"line\">  if (!options.render) &#123;</span><br><span class=\"line\">    let template = options.template</span><br><span class=\"line\">    console.log(template) // undefined</span><br><span class=\"line\">    if (template) &#123;</span><br><span class=\"line\">      if (typeof template === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">        if (template.charAt(0) === &#x27;#&#x27;) &#123;</span><br><span class=\"line\">          template = idToTemplate(template)</span><br><span class=\"line\">          /* istanbul ignore if */</span><br><span class=\"line\">          if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; !template) &#123;</span><br><span class=\"line\">            warn(</span><br><span class=\"line\">              `Template element not found or is empty: $&#123;options.template&#125;`,</span><br><span class=\"line\">              this</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; else if (template.nodeType) &#123;</span><br><span class=\"line\">        template = template.innerHTML</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">          warn(&#x27;invalid template option:&#x27; + template, this)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return this</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else if (el) &#123;</span><br><span class=\"line\">      template = getOuterHTML(el) // el.outerHTML</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (template) &#123;</span><br><span class=\"line\">      /* istanbul ignore if */</span><br><span class=\"line\">      if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        mark(&#x27;compile&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      const &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class=\"line\">        shouldDecodeNewlines,</span><br><span class=\"line\">        delimiters: options.delimiters</span><br><span class=\"line\">      &#125;, this)</span><br><span class=\"line\">      options.render = render</span><br><span class=\"line\">      options.staticRenderFns = staticRenderFns</span><br><span class=\"line\"></span><br><span class=\"line\">      /* istanbul ignore if */</span><br><span class=\"line\">      if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">        mark(&#x27;compile end&#x27;)</span><br><span class=\"line\">        measure(`$&#123;this._name&#125; compile`, &#x27;compile&#x27;, &#x27;compile end&#x27;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return mount.call(this, el, hydrating)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"compiletofunctions\"><a class=\"markdownIt-Anchor\" href=\"#compiletofunctions\">#</a> compileToFunctions</h3>\n<p>一步套一步，最重要的是 Convert HTML string to AST (转换 ast) 的过程，先是 parse 方法，这里面调用了 parseHTML 的方法<br>\n注： /src/platforms/web/compiler/index.js options 里的基本属性在这个文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Convert HTML string to AST.</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function parse (</span><br><span class=\"line\">  template: string,</span><br><span class=\"line\">  options: CompilerOptions</span><br><span class=\"line\">): ASTElement | void &#123;</span><br><span class=\"line\">  warn = options.warn || baseWarn</span><br><span class=\"line\">  platformGetTagNamespace = options.getTagNamespace || no</span><br><span class=\"line\">  platformMustUseProp = options.mustUseProp || no</span><br><span class=\"line\">  platformIsPreTag = options.isPreTag || no</span><br><span class=\"line\">  preTransforms = pluckModuleFunction(options.modules, &#x27;preTransformNode&#x27;)</span><br><span class=\"line\">  transforms = pluckModuleFunction(options.modules, &#x27;transformNode&#x27;)</span><br><span class=\"line\">  postTransforms = pluckModuleFunction(options.modules, &#x27;postTransformNode&#x27;)</span><br><span class=\"line\">  delimiters = options.delimiters</span><br><span class=\"line\">  console.log(options.modules)</span><br><span class=\"line\">  const stack = []</span><br><span class=\"line\">  const preserveWhitespace = options.preserveWhitespace !== false</span><br><span class=\"line\">  let root</span><br><span class=\"line\">  let currentParent</span><br><span class=\"line\">  let inVPre = false</span><br><span class=\"line\">  let inPre = false</span><br><span class=\"line\">  let warned = false</span><br><span class=\"line\"></span><br><span class=\"line\">  function warnOnce (msg) &#123;</span><br><span class=\"line\">    if (!warned) &#123;</span><br><span class=\"line\">      warned = true</span><br><span class=\"line\">      warn(msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function endPre (element) &#123;</span><br><span class=\"line\">    // check pre state</span><br><span class=\"line\">    if (element.pre) &#123;</span><br><span class=\"line\">      inVPre = false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (platformIsPreTag(element.tag)) &#123;</span><br><span class=\"line\">      inPre = false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  parseHTML(template, &#123;</span><br><span class=\"line\">    warn,</span><br><span class=\"line\">    expectHTML: options.expectHTML,</span><br><span class=\"line\">    isUnaryTag: options.isUnaryTag,</span><br><span class=\"line\">    canBeLeftOpenTag: options.canBeLeftOpenTag,</span><br><span class=\"line\">    shouldDecodeNewlines: options.shouldDecodeNewlines,</span><br><span class=\"line\">    start (tag, attrs, unary) &#123;</span><br><span class=\"line\">      // check namespace.</span><br><span class=\"line\">      // inherit parent ns if there is one</span><br><span class=\"line\">      const ns = (currentParent &amp;&amp; currentParent.ns) || platformGetTagNamespace(tag)</span><br><span class=\"line\"></span><br><span class=\"line\">      // handle IE svg bug</span><br><span class=\"line\">      /* istanbul ignore if */</span><br><span class=\"line\">      if (isIE &amp;&amp; ns === &#x27;svg&#x27;) &#123;</span><br><span class=\"line\">        attrs = guardIESVGBug(attrs)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      const element: ASTElement = &#123;</span><br><span class=\"line\">        type: 1,</span><br><span class=\"line\">        tag,</span><br><span class=\"line\">        attrsList: attrs,</span><br><span class=\"line\">        attrsMap: makeAttrsMap(attrs),</span><br><span class=\"line\">        parent: currentParent,</span><br><span class=\"line\">        children: []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (ns) &#123;</span><br><span class=\"line\">        element.ns = ns</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 判断是不是style或者script</span><br><span class=\"line\">      if (isForbiddenTag(element) &amp;&amp; !isServerRendering()) &#123;</span><br><span class=\"line\">        element.forbidden = true</span><br><span class=\"line\">        process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn(</span><br><span class=\"line\">          &#x27;Templates should only be responsible for mapping the state to the &#x27; +</span><br><span class=\"line\">          &#x27;UI. Avoid placing tags with side-effects in your templates, such as &#x27; +</span><br><span class=\"line\">          `&lt;$&#123;tag&#125;&gt;` + &#x27;, as they will not be parsed.&#x27;</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // apply pre-transforms</span><br><span class=\"line\">      for (let i = 0; i &lt; preTransforms.length; i++) &#123;</span><br><span class=\"line\">        preTransforms[i](element, options)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (!inVPre) &#123; // 是不是v-pre?</span><br><span class=\"line\">        processPre(element)</span><br><span class=\"line\">        if (element.pre) &#123;</span><br><span class=\"line\">          inVPre = true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (platformIsPreTag(element.tag)) &#123; // 是不是pre标签</span><br><span class=\"line\">        inPre = true</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (inVPre) &#123;</span><br><span class=\"line\">        processRawAttrs(element)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        // debugger</span><br><span class=\"line\">        processFor(element) // 检测v-for 详细阅读等到单独再看，下同</span><br><span class=\"line\">        processIf(element) // 检测v-if</span><br><span class=\"line\">        processOnce(element) // 检测v-once</span><br><span class=\"line\">        processKey(element) // 检测key属性</span><br><span class=\"line\"></span><br><span class=\"line\">        // determine whether this is a plain element after</span><br><span class=\"line\">        // removing structural attributes</span><br><span class=\"line\">        element.plain = !element.key &amp;&amp; !attrs.length</span><br><span class=\"line\"></span><br><span class=\"line\">        processRef(element) // 检测ref属性</span><br><span class=\"line\">        processSlot(element) // 检测slot属性</span><br><span class=\"line\">        processComponent(element) // 检测is属性</span><br><span class=\"line\">        for (let i = 0; i &lt; transforms.length; i++) &#123;</span><br><span class=\"line\">          transforms[i](element, options) // 检测class和style</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        processAttrs(element) // 检测attr</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      function checkRootConstraints (el) &#123;</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">          if (el.tag === &#x27;slot&#x27; || el.tag === &#x27;template&#x27;) &#123;</span><br><span class=\"line\">            warnOnce(</span><br><span class=\"line\">              `Cannot use &lt;$&#123;el.tag&#125;&gt; as component root element because it may ` +</span><br><span class=\"line\">              &#x27;contain multiple nodes.&#x27;</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (el.attrsMap.hasOwnProperty(&#x27;v-for&#x27;)) &#123;</span><br><span class=\"line\">            warnOnce(</span><br><span class=\"line\">              &#x27;Cannot use v-for on stateful component root element because &#x27; +</span><br><span class=\"line\">              &#x27;it renders multiple elements.&#x27;</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // tree management</span><br><span class=\"line\">      if (!root) &#123;</span><br><span class=\"line\">        root = element</span><br><span class=\"line\">        checkRootConstraints(root) // 检测根节点的合法性</span><br><span class=\"line\">      &#125; else if (!stack.length) &#123;</span><br><span class=\"line\">        // allow root elements with v-if, v-else-if and v-else</span><br><span class=\"line\">        if (root.if &amp;&amp; (element.elseif || element.else)) &#123;</span><br><span class=\"line\">          checkRootConstraints(element)</span><br><span class=\"line\">          addIfCondition(root, &#123;</span><br><span class=\"line\">            exp: element.elseif,</span><br><span class=\"line\">            block: element</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125; else if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">          warnOnce(</span><br><span class=\"line\">            `Component template should contain exactly one root element. ` +</span><br><span class=\"line\">            `If you are using v-if on multiple elements, ` +</span><br><span class=\"line\">            `use v-else-if to chain them instead.`</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (currentParent &amp;&amp; !element.forbidden) &#123;</span><br><span class=\"line\">        if (element.elseif || element.else) &#123;</span><br><span class=\"line\">          processIfConditions(element, currentParent)</span><br><span class=\"line\">        &#125; else if (element.slotScope) &#123; // scoped slot</span><br><span class=\"line\">          currentParent.plain = false</span><br><span class=\"line\">          const name = element.slotTarget || &#x27;&quot;default&quot;&#x27;</span><br><span class=\"line\">          ;(currentParent.scopedSlots || (currentParent.scopedSlots = &#123;&#125;))[name] = element</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          currentParent.children.push(element) // 添加子节点</span><br><span class=\"line\">          element.parent = currentParent // 指向父节点</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (!unary) &#123;</span><br><span class=\"line\">        currentParent = element</span><br><span class=\"line\">        stack.push(element)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        endPre(element)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // apply post-transforms</span><br><span class=\"line\">      for (let i = 0; i &lt; postTransforms.length; i++) &#123;</span><br><span class=\"line\">        postTransforms[i](element, options)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    end () &#123;</span><br><span class=\"line\">      // remove trailing whitespace</span><br><span class=\"line\">      const element = stack[stack.length - 1]</span><br><span class=\"line\">      const lastNode = element.children[element.children.length - 1]</span><br><span class=\"line\">      if (lastNode &amp;&amp; lastNode.type === 3 &amp;&amp; lastNode.text === &#x27; &#x27; &amp;&amp; !inPre) &#123;</span><br><span class=\"line\">        element.children.pop()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // pop stack</span><br><span class=\"line\">      stack.length -= 1</span><br><span class=\"line\">      currentParent = stack[stack.length - 1]</span><br><span class=\"line\">      endPre(element) // 如果有pre指令，做相关操作</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    chars (text: string) &#123;</span><br><span class=\"line\">      if (!currentParent) &#123; // 没有currentParent表示text在前面，类似于xxx&lt;xxx&gt;&lt;/xxx&gt;这样的</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">          if (text === template) &#123;</span><br><span class=\"line\">            warnOnce(</span><br><span class=\"line\">              &#x27;Component template requires a root element, rather than just text.&#x27;</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125; else if ((text = text.trim())) &#123;</span><br><span class=\"line\">            warnOnce(</span><br><span class=\"line\">              `text &quot;$&#123;text&#125;&quot; outside root element will be ignored.`</span><br><span class=\"line\">            )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // IE textarea placeholder bug</span><br><span class=\"line\">      /* istanbul ignore if */</span><br><span class=\"line\">      if (isIE &amp;&amp;</span><br><span class=\"line\">          currentParent.tag === &#x27;textarea&#x27; &amp;&amp;</span><br><span class=\"line\">          currentParent.attrsMap.placeholder === text) &#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      const children = currentParent.children</span><br><span class=\"line\">      text = inPre || text.trim()</span><br><span class=\"line\">        ? decodeHTMLCached(text)</span><br><span class=\"line\">        // only preserve whitespace if its not right after a starting tag</span><br><span class=\"line\">        : preserveWhitespace &amp;&amp; children.length ? &#x27; &#x27; : &#x27;&#x27;</span><br><span class=\"line\">      if (text) &#123;</span><br><span class=\"line\">        let expression</span><br><span class=\"line\">        if (!inVPre &amp;&amp; text !== &#x27; &#x27; &amp;&amp; (expression = parseText(text, delimiters))) &#123; // 表达式解析</span><br><span class=\"line\">          children.push(&#123;</span><br><span class=\"line\">            type: 2,</span><br><span class=\"line\">            expression,</span><br><span class=\"line\">            text</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125; else if (text !== &#x27; &#x27; || !children.length || children[children.length - 1].text !== &#x27; &#x27;) &#123;</span><br><span class=\"line\">          children.push(&#123;</span><br><span class=\"line\">            type: 3,</span><br><span class=\"line\">            text</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return root</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">export function parseHTML (html, options) &#123;</span><br><span class=\"line\">  const stack = []</span><br><span class=\"line\">  const expectHTML = options.expectHTML</span><br><span class=\"line\">  const isUnaryTag = options.isUnaryTag || no</span><br><span class=\"line\">  const canBeLeftOpenTag = options.canBeLeftOpenTag || no</span><br><span class=\"line\">  let index = 0</span><br><span class=\"line\">  let last, lastTag</span><br><span class=\"line\">  while (html) &#123; // html是&#x27;&lt;xxx&gt;xxxx&lt;/xxx&gt;&#x27;</span><br><span class=\"line\">    debugger</span><br><span class=\"line\">    last = html</span><br><span class=\"line\">    // Make sure we&#x27;re not in a plaintext content element like script/style</span><br><span class=\"line\">    if (!lastTag || !isPlainTextElement(lastTag)) &#123;</span><br><span class=\"line\">      let textEnd = html.indexOf(&#x27;&lt;&#x27;) // 以&lt;开头</span><br><span class=\"line\">      if (textEnd === 0) &#123; // 起始位</span><br><span class=\"line\">        // Comment:</span><br><span class=\"line\">        if (comment.test(html)) &#123; // 注释</span><br><span class=\"line\">          const commentEnd = html.indexOf(&#x27;--&gt;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">          if (commentEnd &gt;= 0) &#123;</span><br><span class=\"line\">            advance(commentEnd + 3)</span><br><span class=\"line\">            continue</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment</span><br><span class=\"line\">        if (conditionalComment.test(html)) &#123; // xml?</span><br><span class=\"line\">          const conditionalEnd = html.indexOf(&#x27;]&gt;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">          if (conditionalEnd &gt;= 0) &#123;</span><br><span class=\"line\">            advance(conditionalEnd + 2)</span><br><span class=\"line\">            continue</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Doctype:</span><br><span class=\"line\">        const doctypeMatch = html.match(doctype)</span><br><span class=\"line\">        if (doctypeMatch) &#123;</span><br><span class=\"line\">          advance(doctypeMatch[0].length)</span><br><span class=\"line\">          continue</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // End tag:</span><br><span class=\"line\">        const endTagMatch = html.match(endTag) // 结束标签&lt;/xxx&gt;</span><br><span class=\"line\">        if (endTagMatch) &#123;</span><br><span class=\"line\">          const curIndex = index</span><br><span class=\"line\">          advance(endTagMatch[0].length)</span><br><span class=\"line\">          parseEndTag(endTagMatch[1], curIndex, index)</span><br><span class=\"line\">          continue</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Start tag:</span><br><span class=\"line\">        const startTagMatch = parseStartTag() // 开始标签&lt;xxx&gt;</span><br><span class=\"line\">        if (startTagMatch) &#123;</span><br><span class=\"line\">          handleStartTag(startTagMatch)</span><br><span class=\"line\">          continue</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // html不以&lt;开头</span><br><span class=\"line\">      let text, rest, next</span><br><span class=\"line\">      if (textEnd &gt;= 0) &#123; // html中还存在&lt;</span><br><span class=\"line\">        rest = html.slice(textEnd)</span><br><span class=\"line\">        while (</span><br><span class=\"line\">          !endTag.test(rest) &amp;&amp;</span><br><span class=\"line\">          !startTagOpen.test(rest) &amp;&amp;</span><br><span class=\"line\">          !comment.test(rest) &amp;&amp;</span><br><span class=\"line\">          !conditionalComment.test(rest)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">          // &lt; in plain text, be forgiving and treat it as text</span><br><span class=\"line\">          next = rest.indexOf(&#x27;&lt;&#x27;, 1)</span><br><span class=\"line\">          if (next &lt; 0) break</span><br><span class=\"line\">          textEnd += next</span><br><span class=\"line\">          rest = html.slice(textEnd)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        text = html.substring(0, textEnd) // 截取到&lt;前的部分</span><br><span class=\"line\">        advance(textEnd)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (textEnd &lt; 0) &#123;</span><br><span class=\"line\">        text = html</span><br><span class=\"line\">        html = &#x27;&#x27;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (options.chars &amp;&amp; text) &#123;</span><br><span class=\"line\">        options.chars(text)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      var stackedTag = lastTag.toLowerCase()</span><br><span class=\"line\">      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp(&#x27;([\\\\s\\\\S]*?)(&lt;/&#x27; + stackedTag + &#x27;[^&gt;]*&gt;)&#x27;, &#x27;i&#x27;))</span><br><span class=\"line\">      var endTagLength = 0</span><br><span class=\"line\">      var rest = html.replace(reStackedTag, function (all, text, endTag) &#123;</span><br><span class=\"line\">        endTagLength = endTag.length</span><br><span class=\"line\">        if (!isPlainTextElement(stackedTag) &amp;&amp; stackedTag !== &#x27;noscript&#x27;) &#123;</span><br><span class=\"line\">          text = text</span><br><span class=\"line\">            .replace(/&lt;!--([\\s\\S]*?)--&gt;/g, &#x27;$1&#x27;)</span><br><span class=\"line\">            .replace(/&lt;!\\[CDATA\\[([\\s\\S]*?)]]&gt;/g, &#x27;$1&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (options.chars) &#123;</span><br><span class=\"line\">          options.chars(text)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return &#x27;&#x27;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      index += html.length - rest.length</span><br><span class=\"line\">      html = rest</span><br><span class=\"line\">      parseEndTag(stackedTag, index - endTagLength, index)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (html === last) &#123;</span><br><span class=\"line\">      options.chars &amp;&amp; options.chars(html)</span><br><span class=\"line\">      if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; !stack.length &amp;&amp; options.warn) &#123;</span><br><span class=\"line\">        options.warn(`Mal-formatted tag at end of template: &quot;$&#123;html&#125;&quot;`)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      break</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Clean up any remaining tags 清除剩余的标签，这里因该是清除了不合法的标签，如只有单个的p标签之类的</span><br><span class=\"line\">  parseEndTag()</span><br><span class=\"line\"></span><br><span class=\"line\">  function advance (n) &#123;</span><br><span class=\"line\">    index += n</span><br><span class=\"line\">    html = html.substring(n) // html截取</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function parseStartTag () &#123;</span><br><span class=\"line\">    const start = html.match(startTagOpen)</span><br><span class=\"line\">    console.log(start)</span><br><span class=\"line\">    if (start) &#123;</span><br><span class=\"line\">      const match = &#123;</span><br><span class=\"line\">        tagName: start[1], // 标签名</span><br><span class=\"line\">        attrs: [],</span><br><span class=\"line\">        start: index // 起始位置</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      advance(start[0].length)</span><br><span class=\"line\">      let end, attr</span><br><span class=\"line\">      while (!(end = html.match(startTagClose)) &amp;&amp; (attr = html.match(attribute))) &#123;</span><br><span class=\"line\">        // end匹配标签末尾&gt; attr匹配该标签的属性</span><br><span class=\"line\">        advance(attr[0].length)</span><br><span class=\"line\">        match.attrs.push(attr) // 添加属性</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (end) &#123;</span><br><span class=\"line\">        match.unarySlash = end[1]</span><br><span class=\"line\">        advance(end[0].length)</span><br><span class=\"line\">        match.end = index // 标签末尾的位置</span><br><span class=\"line\">        return match</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function handleStartTag (match) &#123;</span><br><span class=\"line\">    const tagName = match.tagName // 标签名</span><br><span class=\"line\">    const unarySlash = match.unarySlash</span><br><span class=\"line\"></span><br><span class=\"line\">    if (expectHTML) &#123;</span><br><span class=\"line\">      if (lastTag === &#x27;p&#x27; &amp;&amp; isNonPhrasingTag(tagName)) &#123; // isNonPhrasingTag：判断标签是不是集合(这个集合代表什么暂时不清楚)内的标签</span><br><span class=\"line\">        parseEndTag(lastTag)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (canBeLeftOpenTag(tagName) &amp;&amp; lastTag === tagName) &#123;</span><br><span class=\"line\">        parseEndTag(tagName)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const unary = isUnaryTag(tagName) || tagName === &#x27;html&#x27; &amp;&amp; lastTag === &#x27;head&#x27; || !!unarySlash</span><br><span class=\"line\"></span><br><span class=\"line\">    const l = match.attrs.length</span><br><span class=\"line\">    const attrs = new Array(l)</span><br><span class=\"line\">    for (let i = 0; i &lt; l; i++) &#123;</span><br><span class=\"line\">      const args = match.attrs[i]</span><br><span class=\"line\">      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778</span><br><span class=\"line\">      if (IS_REGEX_CAPTURING_BROKEN &amp;&amp; args[0].indexOf(&#x27;&quot;&quot;&#x27;) === -1) &#123;</span><br><span class=\"line\">        if (args[3] === &#x27;&#x27;) &#123; delete args[3] &#125;</span><br><span class=\"line\">        if (args[4] === &#x27;&#x27;) &#123; delete args[4] &#125;</span><br><span class=\"line\">        if (args[5] === &#x27;&#x27;) &#123; delete args[5] &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      const value = args[3] || args[4] || args[5] || &#x27;&#x27;</span><br><span class=\"line\">      attrs[i] = &#123;</span><br><span class=\"line\">        name: args[1],</span><br><span class=\"line\">        value: decodeAttr(</span><br><span class=\"line\">          value,</span><br><span class=\"line\">          options.shouldDecodeNewlines</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!unary) &#123;</span><br><span class=\"line\">      stack.push(&#123; tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs &#125;)</span><br><span class=\"line\">      lastTag = tagName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (options.start) &#123;</span><br><span class=\"line\">      options.start(tagName, attrs, unary, match.start, match.end)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function parseEndTag (tagName, start, end) &#123;</span><br><span class=\"line\">    let pos, lowerCasedTagName</span><br><span class=\"line\">    if (start == null) start = index</span><br><span class=\"line\">    if (end == null) end = index</span><br><span class=\"line\"></span><br><span class=\"line\">    if (tagName) &#123;</span><br><span class=\"line\">      lowerCasedTagName = tagName.toLowerCase()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Find the closest opened tag of the same type</span><br><span class=\"line\">    if (tagName) &#123; // 找到和闭合标签对应的开始标签 &lt;/p&gt; --&gt; &lt;p&gt;</span><br><span class=\"line\">      for (pos = stack.length - 1; pos &gt;= 0; pos--) &#123;</span><br><span class=\"line\">        if (stack[pos].lowerCasedTag === lowerCasedTagName) &#123;</span><br><span class=\"line\">          break</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // If no tag name is provided, clean shop</span><br><span class=\"line\">      pos = 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (pos &gt;= 0) &#123;</span><br><span class=\"line\">      // Close all the open elements, up the stack</span><br><span class=\"line\">      for (let i = stack.length - 1; i &gt;= pos; i--) &#123;</span><br><span class=\"line\">        if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp;</span><br><span class=\"line\">            (i &gt; pos || !tagName) &amp;&amp;</span><br><span class=\"line\">            options.warn) &#123;</span><br><span class=\"line\">          options.warn(</span><br><span class=\"line\">            `tag &lt;$&#123;stack[i].tag&#125;&gt; has no matching end tag.`</span><br><span class=\"line\">          )</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (options.end) &#123;</span><br><span class=\"line\">          options.end(stack[i].tag, start, end)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // Remove the open elements from the stack</span><br><span class=\"line\">      stack.length = pos</span><br><span class=\"line\">      lastTag = pos &amp;&amp; stack[pos - 1].tag</span><br><span class=\"line\">    &#125; else if (lowerCasedTagName === &#x27;br&#x27;) &#123;</span><br><span class=\"line\">      if (options.start) &#123;</span><br><span class=\"line\">        options.start(tagName, [], true, start, end)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else if (lowerCasedTagName === &#x27;p&#x27;) &#123;</span><br><span class=\"line\">      if (options.start) &#123;</span><br><span class=\"line\">        options.start(tagName, [], false, start, end)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (options.end) &#123;</span><br><span class=\"line\">        options.end(tagName, start, end)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>一层一层的解析 html，从<div><p></p></div> --&gt; <p></p></div> --&gt; … --&gt; </div>, 把每一个标签所含的属性、指令等提取出来，放在一个对象中，最终返回下面结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  type: 1,</span><br><span class=\"line\">  tag: &#x27;div&#x27;,</span><br><span class=\"line\">  plain: false,</span><br><span class=\"line\">  parent: undefined,</span><br><span class=\"line\">  attrs: [&#123;name:&#x27;id&#x27;, value: &#x27;&quot;app&quot;&#x27;&#125;],</span><br><span class=\"line\">  attrsList: [&#123;name:&#x27;id&#x27;, value: &#x27;app&#x27;&#125;],</span><br><span class=\"line\">  attrsMap: &#123;id: &#x27;app&#x27;&#125;,</span><br><span class=\"line\">  children: [&#123;</span><br><span class=\"line\">    type: 1,</span><br><span class=\"line\">    tag: &#x27;p&#x27;,</span><br><span class=\"line\">    plain: true,</span><br><span class=\"line\">    parent: ast,</span><br><span class=\"line\">    attrs: [],</span><br><span class=\"line\">    attrsList: [],</span><br><span class=\"line\">    attrsMap: &#123;&#125;,</span><br><span class=\"line\">    children: [&#123;</span><br><span class=\"line\">      expression: &quot;_s(message)&quot;,</span><br><span class=\"line\">      text: &quot;&#123;&#123;message&#125;&#125;&quot;,</span><br><span class=\"line\">      type: 2</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后是静态节点的判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Goal of the optimizer: walk the generated template AST tree</span><br><span class=\"line\"> * and detect sub-trees that are purely static, i.e. parts of</span><br><span class=\"line\"> * the DOM that never needs to change.</span><br><span class=\"line\"> * 删除ast中的静态（永远不会改变的）节点？</span><br><span class=\"line\"> * Once we detect these sub-trees, we can: 优点</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 1. Hoist them into constants, so that we no longer need to</span><br><span class=\"line\"> *    create fresh nodes for them on each re-render;</span><br><span class=\"line\"> *    在重新渲染的时候不用再去管这些节点</span><br><span class=\"line\"> * 2. Completely skip them in the patching process.在修补的时候无视他们？</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function optimize (root: ?ASTElement, options: CompilerOptions) &#123;</span><br><span class=\"line\">  // debugger</span><br><span class=\"line\">  if (!root) return</span><br><span class=\"line\">  isStaticKey = genStaticKeysCached(options.staticKeys || &#x27;&#x27;)</span><br><span class=\"line\">  isPlatformReservedTag = options.isReservedTag || no</span><br><span class=\"line\">  // first pass: mark all non-static nodes.</span><br><span class=\"line\">  markStatic(root)</span><br><span class=\"line\">  // second pass: mark static roots.</span><br><span class=\"line\">  markStaticRoots(root, false)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 得到结果</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  type: 1,</span><br><span class=\"line\">  tag: &#x27;div&#x27;,</span><br><span class=\"line\">  plain: false,</span><br><span class=\"line\">  parent: undefined,</span><br><span class=\"line\">  attrs: [&#123;name:&#x27;id&#x27;, value: &#x27;&quot;app&quot;&#x27;&#125;],</span><br><span class=\"line\">  attrsList: [&#123;name:&#x27;id&#x27;, value: &#x27;app&#x27;&#125;],</span><br><span class=\"line\">  attrsMap: &#123;id: &#x27;app&#x27;&#125;,</span><br><span class=\"line\">  static: false,</span><br><span class=\"line\">  staticRoot: false,</span><br><span class=\"line\">  children: [&#123;</span><br><span class=\"line\">    type: 1,</span><br><span class=\"line\">    tag: &#x27;p&#x27;,</span><br><span class=\"line\">    plain: true,</span><br><span class=\"line\">    parent: ast,</span><br><span class=\"line\">    attrs: [],</span><br><span class=\"line\">    attrsList: [],</span><br><span class=\"line\">    attrsMap: &#123;&#125;,</span><br><span class=\"line\">    static: false,</span><br><span class=\"line\">    staticRoot: false,</span><br><span class=\"line\">    children: [&#123;</span><br><span class=\"line\">      expression: &quot;_s(message)&quot;,</span><br><span class=\"line\">      text: &quot;&#123;&#123;message&#125;&#125;&quot;,</span><br><span class=\"line\">      type: 2,</span><br><span class=\"line\">      static: false</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // ps:按照例子其实children里有更多项的，但我不知道怎么复制打印出来的对象，就用了别人的输出</span><br></pre></td></tr></table></figure>\n<p>optimize 通过遍历 ast，主要判断了节点是不是 static (markStatic 方法)，staticRoot (markStaticRoots 方法)，<br>\n接下去是进行 generate 处理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function generate (</span><br><span class=\"line\">  ast: ASTElement | void,</span><br><span class=\"line\">  options: CompilerOptions</span><br><span class=\"line\">): &#123;</span><br><span class=\"line\">  render: string,</span><br><span class=\"line\">  staticRenderFns: Array&lt;string&gt;</span><br><span class=\"line\">&#125; &#123;</span><br><span class=\"line\">  // save previous staticRenderFns so generate calls can be nested</span><br><span class=\"line\">  const prevStaticRenderFns: Array&lt;string&gt; = staticRenderFns</span><br><span class=\"line\">  const currentStaticRenderFns: Array&lt;string&gt; = staticRenderFns = []</span><br><span class=\"line\">  const prevOnceCount = onceCount</span><br><span class=\"line\">  onceCount = 0</span><br><span class=\"line\">  currentOptions = options</span><br><span class=\"line\">  warn = options.warn || baseWarn</span><br><span class=\"line\">  transforms = pluckModuleFunction(options.modules, &#x27;transformCode&#x27;)</span><br><span class=\"line\">  dataGenFns = pluckModuleFunction(options.modules, &#x27;genData&#x27;)</span><br><span class=\"line\">  platformDirectives = options.directives || &#123;&#125;</span><br><span class=\"line\">  isPlatformReservedTag = options.isReservedTag || no</span><br><span class=\"line\">  const code = ast ? genElement(ast) : &#x27;_c(&quot;div&quot;)&#x27; // 生成render函数</span><br><span class=\"line\">  staticRenderFns = prevStaticRenderFns</span><br><span class=\"line\">  onceCount = prevOnceCount</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    render: `with(this)&#123;return $&#123;code&#125;&#125;`,</span><br><span class=\"line\">    staticRenderFns: currentStaticRenderFns</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function genElement (el: ASTElement): string &#123;</span><br><span class=\"line\">  if (el.staticRoot &amp;&amp; !el.staticProcessed) &#123;</span><br><span class=\"line\">    return genStatic(el) // static render</span><br><span class=\"line\">  &#125; else if (el.once &amp;&amp; !el.onceProcessed) &#123;</span><br><span class=\"line\">    return genOnce(el) // once render</span><br><span class=\"line\">  &#125; else if (el.for &amp;&amp; !el.forProcessed) &#123;</span><br><span class=\"line\">    return genFor(el) // for render</span><br><span class=\"line\">  &#125; else if (el.if &amp;&amp; !el.ifProcessed) &#123;</span><br><span class=\"line\">    return genIf(el) // if render</span><br><span class=\"line\">  &#125; else if (el.tag === &#x27;template&#x27; &amp;&amp; !el.slotTarget) &#123;</span><br><span class=\"line\">    return genChildren(el) || &#x27;void 0&#x27; // template render</span><br><span class=\"line\">  &#125; else if (el.tag === &#x27;slot&#x27;) &#123;</span><br><span class=\"line\">    return genSlot(el) // slot render</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // component or element</span><br><span class=\"line\">    let code</span><br><span class=\"line\">    if (el.component) &#123; // component render</span><br><span class=\"line\">      code = genComponent(el.component, el)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      const data = el.plain ? undefined : genData(el) // 拼接属性 生成头结点render</span><br><span class=\"line\"></span><br><span class=\"line\">      const children = el.inlineTemplate ? null : genChildren(el, true) // 遍历生成子节点render</span><br><span class=\"line\">      code = `_c(&#x27;$&#123;el.tag&#125;&#x27;$&#123;</span><br><span class=\"line\">        data ? `,$&#123;data&#125;` : &#x27;&#x27; // data</span><br><span class=\"line\">      &#125;$&#123;</span><br><span class=\"line\">        children ? `,$&#123;children&#125;` : &#x27;&#x27; // children</span><br><span class=\"line\">      &#125;)`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // module transforms</span><br><span class=\"line\">    for (let i = 0; i &lt; transforms.length; i++) &#123;</span><br><span class=\"line\">      code = transforms[i](el, code)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return code</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function genChildren (el: ASTElement, checkSkip?: boolean): string | void &#123;</span><br><span class=\"line\">  const children = el.children</span><br><span class=\"line\">  if (children.length) &#123;</span><br><span class=\"line\">    const el: any = children[0]</span><br><span class=\"line\">    // optimize single v-for</span><br><span class=\"line\">    if (children.length === 1 &amp;&amp;</span><br><span class=\"line\">        el.for &amp;&amp;</span><br><span class=\"line\">        el.tag !== &#x27;template&#x27; &amp;&amp;</span><br><span class=\"line\">        el.tag !== &#x27;slot&#x27;) &#123;</span><br><span class=\"line\">      return genElement(el)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const normalizationType = checkSkip ? getNormalizationType(children) : 0</span><br><span class=\"line\">    return `[$&#123;children.map(genNode).join(&#x27;,&#x27;)&#125;]$&#123;</span><br><span class=\"line\">      normalizationType ? `,$&#123;normalizationType&#125;` : &#x27;&#x27;</span><br><span class=\"line\">    &#125;`</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function genNode (node: ASTNode): string &#123;</span><br><span class=\"line\">  if (node.type === 1) &#123;</span><br><span class=\"line\">    return genElement(node)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return genText(node)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>generate --&gt; genElement --&gt; {<br>\n直接 render<br>\nchildren --&gt; 遍历判断 + render<br>\n}</p>\n<p>最终返回了一个静态节点的 render 和动态节点的 render。</p>\n<p>然后进行错误和建议的判断和提示</p>\n<p>然后是把 render 字符串通过 new Function 生成 render 函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// turn code into functions 生成render函数</span><br><span class=\"line\">    const res = &#123;&#125;</span><br><span class=\"line\">    const fnGenErrors = []</span><br><span class=\"line\">    res.render = makeFunction(compiled.render, fnGenErrors)</span><br><span class=\"line\">    const l = compiled.staticRenderFns.length</span><br><span class=\"line\">    res.staticRenderFns = new Array(l)</span><br><span class=\"line\">    for (let i = 0; i &lt; l; i++) &#123;</span><br><span class=\"line\">      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    。。。。。。</span><br><span class=\"line\"></span><br><span class=\"line\">    return (functionCompileCache[key] = res)</span><br><span class=\"line\"></span><br><span class=\"line\">    。。。。。。</span><br><span class=\"line\"></span><br><span class=\"line\">    render = function () &#123;</span><br><span class=\"line\">      with(this)&#123;return _c(&#x27;div&#x27;,&#123;attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125;&#125;,[_c(&#x27;p&#x27;,[_v(_s(message))])])&#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>顺便一提，render 里面的_c,_v 之类的方法在 src/core/instance/render.js 中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype._o = markOnce</span><br><span class=\"line\">Vue.prototype._n = toNumber</span><br><span class=\"line\">Vue.prototype._s = _toString</span><br><span class=\"line\">Vue.prototype._l = renderList</span><br><span class=\"line\">Vue.prototype._t = renderSlot</span><br><span class=\"line\">Vue.prototype._q = looseEqual</span><br><span class=\"line\">Vue.prototype._i = looseIndexOf</span><br><span class=\"line\">Vue.prototype._m = renderStatic</span><br><span class=\"line\">Vue.prototype._f = resolveFilter</span><br><span class=\"line\">Vue.prototype._k = checkKeyCodes</span><br><span class=\"line\">Vue.prototype._b = bindObjectProps</span><br><span class=\"line\">Vue.prototype._v = createTextVNode</span><br><span class=\"line\">Vue.prototype._e = createEmptyVNode</span><br><span class=\"line\">Vue.prototype._u = resolveScopedSlots</span><br></pre></td></tr></table></figure>\n<p>又回到 $mount 方法</p>\n<p>return mount.call(this, el, hydrating)</p>\n<h3 id=\"mountcomponent-srccoreinstancelifecyclejs\"><a class=\"markdownIt-Anchor\" href=\"#mountcomponent-srccoreinstancelifecyclejs\">#</a> mountComponent /src/core/instance/lifecycle.js</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// public mount method</span><br><span class=\"line\">Vue.prototype.$mount = function (</span><br><span class=\"line\">  el?: string | Element,</span><br><span class=\"line\">  hydrating?: boolean</span><br><span class=\"line\">): Component &#123;</span><br><span class=\"line\">  el = el &amp;&amp; inBrowser ? query(el) : undefined</span><br><span class=\"line\">  return mountComponent(this, el, hydrating)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function mountComponent (</span><br><span class=\"line\">  vm: Component,</span><br><span class=\"line\">  el: ?Element,</span><br><span class=\"line\">  hydrating?: boolean</span><br><span class=\"line\">): Component &#123;</span><br><span class=\"line\">  vm.$el = el</span><br><span class=\"line\">  if (!vm.$options.render) &#123;</span><br><span class=\"line\">    vm.$options.render = createEmptyVNode</span><br><span class=\"line\">    if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">      /* istanbul ignore if */</span><br><span class=\"line\">      if ((vm.$options.template &amp;&amp; vm.$options.template.charAt(0) !== &#x27;#&#x27;) ||</span><br><span class=\"line\">        vm.$options.el || el) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          &#x27;You are using the runtime-only build of Vue where the template &#x27; +</span><br><span class=\"line\">          &#x27;compiler is not available. Either pre-compile the templates into &#x27; +</span><br><span class=\"line\">          &#x27;render functions, or use the compiler-included build.&#x27;,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          &#x27;Failed to mount component: template or render function not defined.&#x27;,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  callHook(vm, &#x27;beforeMount&#x27;) // beforeMount处理</span><br><span class=\"line\">  debugger</span><br><span class=\"line\"></span><br><span class=\"line\">  let updateComponent</span><br><span class=\"line\">  /* istanbul ignore if */</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">    updateComponent = () =&gt; &#123;</span><br><span class=\"line\">      const name = vm._name</span><br><span class=\"line\">      const id = vm._uid</span><br><span class=\"line\">      const startTag = `vue-perf-start:$&#123;id&#125;`</span><br><span class=\"line\">      const endTag = `vue-perf-end:$&#123;id&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">      mark(startTag)</span><br><span class=\"line\">      const vnode = vm._render()</span><br><span class=\"line\">      mark(endTag)</span><br><span class=\"line\">      measure(`$&#123;name&#125; render`, startTag, endTag)</span><br><span class=\"line\"></span><br><span class=\"line\">      mark(startTag)</span><br><span class=\"line\">      vm._update(vnode, hydrating)</span><br><span class=\"line\">      mark(endTag)</span><br><span class=\"line\">      measure(`$&#123;name&#125; patch`, startTag, endTag)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    updateComponent = () =&gt; &#123;</span><br><span class=\"line\">      vm._update(vm._render(), hydrating)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  vm._watcher = new Watcher(vm, updateComponent, noop)</span><br><span class=\"line\">  hydrating = false</span><br><span class=\"line\"></span><br><span class=\"line\">  // manually mounted instance, call mounted on self</span><br><span class=\"line\">  // mounted is called for render-created child components in its inserted hook</span><br><span class=\"line\">  if (vm.$vnode == null) &#123;</span><br><span class=\"line\">    vm._isMounted = true</span><br><span class=\"line\">    callHook(vm, &#x27;mounted&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return vm</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>mountComponent 方法定义了 updateComponent，并设置了监听，最后又到了 Wathcer</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor (</span><br><span class=\"line\">    vm: Component,</span><br><span class=\"line\">    expOrFn: string | Function,</span><br><span class=\"line\">    cb: Function,</span><br><span class=\"line\">    options?: Object</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    this.vm = vm</span><br><span class=\"line\">    vm._watchers.push(this)</span><br><span class=\"line\">    // options</span><br><span class=\"line\">    if (options) &#123;</span><br><span class=\"line\">      this.deep = !!options.deep</span><br><span class=\"line\">      this.user = !!options.user</span><br><span class=\"line\">      this.lazy = !!options.lazy</span><br><span class=\"line\">      this.sync = !!options.sync</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      this.deep = this.user = this.lazy = this.sync = false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.cb = cb</span><br><span class=\"line\">    this.id = ++uid // uid for batching</span><br><span class=\"line\">    this.active = true</span><br><span class=\"line\">    this.dirty = this.lazy // for lazy watchers</span><br><span class=\"line\">    this.deps = []</span><br><span class=\"line\">    this.newDeps = []</span><br><span class=\"line\">    this.depIds = new Set()</span><br><span class=\"line\">    this.newDepIds = new Set()</span><br><span class=\"line\">    this.expression = process.env.NODE_ENV !== &#x27;production&#x27;</span><br><span class=\"line\">      ? expOrFn.toString()</span><br><span class=\"line\">      : &#x27;&#x27;</span><br><span class=\"line\">    // parse expression for getter</span><br><span class=\"line\">    if (typeof expOrFn === &#x27;function&#x27;) &#123;</span><br><span class=\"line\">      this.getter = expOrFn</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      this.getter = parsePath(expOrFn)</span><br><span class=\"line\">      if (!this.getter) &#123;</span><br><span class=\"line\">        this.getter = function () &#123;&#125;</span><br><span class=\"line\">        process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn(</span><br><span class=\"line\">          `Failed watching path: &quot;$&#123;expOrFn&#125;&quot; ` +</span><br><span class=\"line\">          &#x27;Watcher only accepts simple dot-delimited paths. &#x27; +</span><br><span class=\"line\">          &#x27;For full control, use a function instead.&#x27;,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.value = this.lazy</span><br><span class=\"line\">      ? undefined</span><br><span class=\"line\">      : this.get()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * Evaluate the getter, and re-collect dependencies.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  get () &#123;</span><br><span class=\"line\">    pushTarget(this)</span><br><span class=\"line\">    let value</span><br><span class=\"line\">    const vm = this.vm</span><br><span class=\"line\">    if (this.user) &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">        value = this.getter.call(vm, vm)</span><br><span class=\"line\">      &#125; catch (e) &#123;</span><br><span class=\"line\">        handleError(e, vm, `getter for watcher &quot;$&#123;this.expression&#125;&quot;`)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      value = this.getter.call(vm, vm)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // &quot;touch&quot; every property so they are all tracked as</span><br><span class=\"line\">    // dependencies for deep watching</span><br><span class=\"line\">    if (this.deep) &#123;</span><br><span class=\"line\">      traverse(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    popTarget()</span><br><span class=\"line\">    this.cleanupDeps()</span><br><span class=\"line\">    return value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Watcher 里面定义了 getter，又在最后调用了 get () 方法，然后在 get 里面，又使用了 getter 方法，其实就是 updateComponent 方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm._update(vm._render(), hydrating)</span><br></pre></td></tr></table></figure>\n<p>updateComponent 里面，显示执行了 vm._render ()，然后执行 vm._update ()</p>\n<h3 id=\"vm_render\"><a class=\"markdownIt-Anchor\" href=\"#vm_render\">#</a> vm._render()</h3>\n<p>vm._render () 在 src/core/instance/render.js 中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype._render = function (): VNode &#123;</span><br><span class=\"line\">    const vm: Component = this</span><br><span class=\"line\">    const &#123;</span><br><span class=\"line\">      render,</span><br><span class=\"line\">      staticRenderFns,</span><br><span class=\"line\">      _parentVnode</span><br><span class=\"line\">    &#125; = vm.$options</span><br><span class=\"line\"></span><br><span class=\"line\">    if (vm._isMounted) &#123;</span><br><span class=\"line\">      // clone slot nodes on re-renders</span><br><span class=\"line\">      for (const key in vm.$slots) &#123;</span><br><span class=\"line\">        vm.$slots[key] = cloneVNodes(vm.$slots[key])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vm.$scopedSlots = (_parentVnode &amp;&amp; _parentVnode.data.scopedSlots) || emptyObject</span><br><span class=\"line\"></span><br><span class=\"line\">    if (staticRenderFns &amp;&amp; !vm._staticTrees) &#123;</span><br><span class=\"line\">      vm._staticTrees = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // set parent vnode. this allows render functions to have access</span><br><span class=\"line\">    // to the data on the placeholder node.</span><br><span class=\"line\">    vm.$vnode = _parentVnode</span><br><span class=\"line\">    // render self</span><br><span class=\"line\">    let vnode</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      vnode = render.call(vm._renderProxy, vm.$createElement)</span><br><span class=\"line\">    &#125; catch (e) &#123;</span><br><span class=\"line\">      handleError(e, vm, `render function`)</span><br><span class=\"line\">      // return error render result,</span><br><span class=\"line\">      // or previous vnode to prevent render error causing blank component</span><br><span class=\"line\">      /* istanbul ignore else */</span><br><span class=\"line\">      if (process.env.NODE_ENV !== &#x27;production&#x27;) &#123;</span><br><span class=\"line\">        vnode = vm.$options.renderError</span><br><span class=\"line\">          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)</span><br><span class=\"line\">          : vm._vnode</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        vnode = vm._vnode</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // return empty vnode in case the render function errored out</span><br><span class=\"line\">    if (!(vnode instanceof VNode)) &#123;</span><br><span class=\"line\">      if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; Array.isArray(vnode)) &#123;</span><br><span class=\"line\">        warn(</span><br><span class=\"line\">          &#x27;Multiple root nodes returned from render function. Render function &#x27; +</span><br><span class=\"line\">          &#x27;should return a single root node.&#x27;,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      vnode = createEmptyVNode()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // set parent</span><br><span class=\"line\">    vnode.parent = _parentVnode</span><br><span class=\"line\">    return vnode</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，_render 返回了 vnode，而 vnode 是通过 render 函数产生的，这里的 render 函数，就是上面非静态节点的那个 render 函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function anonymous(</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">with(this)&#123;return _c(&#x27;div&#x27;,&#123;attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125;&#125;,[_c(&#x27;p&#x27;,[_v(_s(message))]),_v(&quot; &quot;),_m(0)])&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在这里，调用了_c,_v，_m 等<br>\n vm._c = (a, b, c, d) =&gt; createElement (vm, a, b, c, d, false)<br>\nVue.prototype._v = createTextVNode<br>\nVue.prototype._m = renderStatic<br>\nVue.prototype._s = _toString</p>\n<p>触发上面函数，先是被 proxy 的 has 捕捉到了，然后是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sharedPropertyDefinition.get = function proxyGetter () &#123;</span><br><span class=\"line\">    return this[sourceKey][key] // this[&#x27;_data&#x27;][&#x27;message&#x27;]</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>得到了 message 的值</p>\n<h4 id=\"createtextvnode\"><a class=\"markdownIt-Anchor\" href=\"#createtextvnode\">#</a> createTextVNode</h4>\n<p>src/core/vdom/vnode.js<br>\nmessage 就是 vm._data.message, _toString 就是把 message 转成 string，然后是 createTextVNode</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class VNode &#123;</span><br><span class=\"line\">  constructor (</span><br><span class=\"line\">    tag?: string,</span><br><span class=\"line\">    data?: VNodeData,</span><br><span class=\"line\">    children?: ?Array&lt;VNode&gt;,</span><br><span class=\"line\">    text?: string,</span><br><span class=\"line\">    elm?: Node,</span><br><span class=\"line\">    context?: Component,</span><br><span class=\"line\">    componentOptions?: VNodeComponentOptions</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    this.tag = tag</span><br><span class=\"line\">    this.data = data</span><br><span class=\"line\">    this.children = children</span><br><span class=\"line\">    this.text = text</span><br><span class=\"line\">    this.elm = elm</span><br><span class=\"line\">    this.ns = undefined</span><br><span class=\"line\">    this.context = context</span><br><span class=\"line\">    this.functionalContext = undefined</span><br><span class=\"line\">    this.key = data &amp;&amp; data.key</span><br><span class=\"line\">    this.componentOptions = componentOptions</span><br><span class=\"line\">    this.componentInstance = undefined</span><br><span class=\"line\">    this.parent = undefined</span><br><span class=\"line\">    this.raw = false</span><br><span class=\"line\">    this.isStatic = false</span><br><span class=\"line\">    this.isRootInsert = true</span><br><span class=\"line\">    this.isComment = false</span><br><span class=\"line\">    this.isCloned = false</span><br><span class=\"line\">    this.isOnce = false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ......</span><br><span class=\"line\"></span><br><span class=\"line\">  export function createTextVNode (val: string | number) &#123;</span><br><span class=\"line\">    return new VNode(undefined, undefined, undefined, String(val)) // 返回vnode</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里的 VNode 仅仅是初始化了一些值</p>\n<p>然后是 createElement</p>\n<h4 id=\"createelement\"><a class=\"markdownIt-Anchor\" href=\"#createelement\">#</a> createElement</h4>\n<p>src/core/vdom/create-element.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// wrapper function for providing a more flexible interface</span><br><span class=\"line\">// 翻译：包装函数为了提供一个更灵活的接口</span><br><span class=\"line\">// without getting yelled at by flow</span><br><span class=\"line\">export function createElement (</span><br><span class=\"line\">  context: Component,</span><br><span class=\"line\">  tag: any,</span><br><span class=\"line\">  data: any,</span><br><span class=\"line\">  children: any,</span><br><span class=\"line\">  normalizationType: any,</span><br><span class=\"line\">  alwaysNormalize: boolean</span><br><span class=\"line\">): VNode &#123;</span><br><span class=\"line\">  if (Array.isArray(data) || isPrimitive(data)) &#123;</span><br><span class=\"line\">    normalizationType = children</span><br><span class=\"line\">    children = data</span><br><span class=\"line\">    data = undefined</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (alwaysNormalize) normalizationType = ALWAYS_NORMALIZE</span><br><span class=\"line\">  return _createElement(context, tag, data, children, normalizationType)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function _createElement (</span><br><span class=\"line\">  context: Component,</span><br><span class=\"line\">  tag?: string | Class&lt;Component&gt; | Function | Object,</span><br><span class=\"line\">  data?: VNodeData,</span><br><span class=\"line\">  children?: any,</span><br><span class=\"line\">  normalizationType?: number</span><br><span class=\"line\">): VNode &#123;</span><br><span class=\"line\">  debugger</span><br><span class=\"line\">  if (data &amp;&amp; data.__ob__) &#123;</span><br><span class=\"line\">    process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; warn(</span><br><span class=\"line\">      `Avoid using observed data object as vnode data: $&#123;JSON.stringify(data)&#125;\\n` +</span><br><span class=\"line\">      &#x27;Always create fresh vnode data objects in each render!&#x27;,</span><br><span class=\"line\">      context</span><br><span class=\"line\">    )</span><br><span class=\"line\">    return createEmptyVNode()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (!tag) &#123;</span><br><span class=\"line\">    // in case of component :is set to falsy value</span><br><span class=\"line\">    return createEmptyVNode()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // support single function children as default scoped slot</span><br><span class=\"line\">  if (Array.isArray(children) &amp;&amp;</span><br><span class=\"line\">      typeof children[0] === &#x27;function&#x27;) &#123;</span><br><span class=\"line\">    data = data || &#123;&#125;</span><br><span class=\"line\">    data.scopedSlots = &#123; default: children[0] &#125;</span><br><span class=\"line\">    children.length = 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (normalizationType === ALWAYS_NORMALIZE) &#123;</span><br><span class=\"line\">    children = normalizeChildren(children)</span><br><span class=\"line\">  &#125; else if (normalizationType === SIMPLE_NORMALIZE) &#123;</span><br><span class=\"line\">    children = simpleNormalizeChildren(children)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let vnode, ns</span><br><span class=\"line\">  if (typeof tag === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">    let Ctor</span><br><span class=\"line\">    ns = config.getTagNamespace(tag)</span><br><span class=\"line\">    if (config.isReservedTag(tag)) &#123;</span><br><span class=\"line\">      // platform built-in elements</span><br><span class=\"line\">      vnode = new VNode(</span><br><span class=\"line\">        config.parsePlatformTagName(tag), data, children,</span><br><span class=\"line\">        undefined, undefined, context</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125; else if ((Ctor = resolveAsset(context.$options, &#x27;components&#x27;, tag))) &#123;</span><br><span class=\"line\">      // component</span><br><span class=\"line\">      vnode = createComponent(Ctor, data, context, children, tag)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // unknown or unlisted namespaced elements</span><br><span class=\"line\">      // check at runtime because it may get assigned a namespace when its</span><br><span class=\"line\">      // parent normalizes children</span><br><span class=\"line\">      vnode = new VNode(</span><br><span class=\"line\">        tag, data, children,</span><br><span class=\"line\">        undefined, undefined, context</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    // direct component options / constructor</span><br><span class=\"line\">    vnode = createComponent(tag, data, context, children)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (vnode) &#123;</span><br><span class=\"line\">    if (ns) applyNS(vnode, ns)</span><br><span class=\"line\">    return vnode</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return createEmptyVNode()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把数据的 VNode 放在了标签的 VNode 里，形成了父子关系（在某些情况下会返回一个空的 VNode）</p>\n<h4 id=\"renderstatic\"><a class=\"markdownIt-Anchor\" href=\"#renderstatic\">#</a> renderStatic</h4>\n<p>src/core/instance/render-helpers/render-static.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Runtime helper for rendering static trees.</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function renderStatic (</span><br><span class=\"line\">  index: number,</span><br><span class=\"line\">  isInFor?: boolean</span><br><span class=\"line\">): VNode | Array&lt;VNode&gt; &#123;</span><br><span class=\"line\">  let tree = this._staticTrees[index]</span><br><span class=\"line\">  // if has already-rendered static tree and not inside v-for,</span><br><span class=\"line\">  // we can reuse the same tree by doing a shallow clone.</span><br><span class=\"line\">  // 翻译：如果已存在渲染好的静态树并不在v-for之内，我们可以通过浅拷贝重用它</span><br><span class=\"line\">  if (tree &amp;&amp; !isInFor) &#123;</span><br><span class=\"line\">    return Array.isArray(tree)</span><br><span class=\"line\">      ? cloneVNodes(tree)</span><br><span class=\"line\">      : cloneVNode(tree)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // otherwise, render a fresh tree. 否则，渲染一颗新树</span><br><span class=\"line\">  tree = this._staticTrees[index] =</span><br><span class=\"line\">    this.$options.staticRenderFns[index].call(this._renderProxy)</span><br><span class=\"line\">  markStatic(tree, `__static__$&#123;index&#125;`, false)</span><br><span class=\"line\">  return tree</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里，tree 就是上面的静态渲染 render 函数所运行的结果 ---- 一个 VNode 对象，然后 markStatic 给 tree 添加了一些标识符</p>\n<p>看到这里我们已经可以得出 vm._render () 最终返回了一个 VNode 树</p>\n<p>然后就是 vm._update 了</p>\n<h3 id=\"vm_update\"><a class=\"markdownIt-Anchor\" href=\"#vm_update\">#</a> vm._update</h3>\n<p>该方法在 src/core/instance/lifecycle.js 里</p>\n<p>vm._update 里面先是调用了 patch 方法，给 vnode 添加了一个属性 elm，vnode 的 children 也是同样道理，这个 elm 其实就是经过处理后的 html 模板了。<br>\n然后在父节点插入了这个 elm，就是我们最终看到的页面 dom，最后通过 removeVnodes () 删除了旧的 html 和 vnode.data 里的一些东西 (这里没看懂)<br>\n 然后进行了一些赋值操作 update 就结束了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) &#123;</span><br><span class=\"line\">    const vm: Component = this</span><br><span class=\"line\">    if (vm._isMounted) &#123;</span><br><span class=\"line\">      callHook(vm, &#x27;beforeUpdate&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const prevEl = vm.$el</span><br><span class=\"line\">    const prevVnode = vm._vnode</span><br><span class=\"line\">    const prevActiveInstance = activeInstance</span><br><span class=\"line\">    activeInstance = vm</span><br><span class=\"line\">    vm._vnode = vnode</span><br><span class=\"line\">    // Vue.prototype.__patch__ is injected in entry points</span><br><span class=\"line\">    // based on the rendering backend used.</span><br><span class=\"line\">    if (!prevVnode) &#123;</span><br><span class=\"line\">      // initial render</span><br><span class=\"line\">      debugger</span><br><span class=\"line\">      vm.$el = vm.__patch__(</span><br><span class=\"line\">        vm.$el, vnode, hydrating, false /* removeOnly */,</span><br><span class=\"line\">        vm.$options._parentElm,</span><br><span class=\"line\">        vm.$options._refElm</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      // updates</span><br><span class=\"line\">      vm.$el = vm.__patch__(prevVnode, vnode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    activeInstance = prevActiveInstance</span><br><span class=\"line\">    // update __vue__ reference</span><br><span class=\"line\">    if (prevEl) &#123;</span><br><span class=\"line\">      prevEl.__vue__ = null</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (vm.$el) &#123;</span><br><span class=\"line\">      vm.$el.__vue__ = vm</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // if parent is an HOC, update its $el as well</span><br><span class=\"line\">    if (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) &#123;</span><br><span class=\"line\">      vm.$parent.$el = vm.$el</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // updated hook is called by the scheduler to ensure that children are</span><br><span class=\"line\">    // updated in a parent&#x27;s updated hook.</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>后面其实还有一些关于生命周期标识的操作等，不过在这里我先不做过多的研究了</p>\n<p>到了这里，一个基本的流程就应经完成了，文章就先到这了，以后应该会进行整理修改（一定）</p>\n<p>因面试碰到相关问题，最后对 vue 生命周期钩子做下面记录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initLifecycle(vm)</span><br><span class=\"line\">initEvents(vm)</span><br><span class=\"line\">initRender(vm)</span><br><span class=\"line\">callHook(vm, &#x27;beforeCreate&#x27;)</span><br><span class=\"line\">initInjections(vm) // resolve injections before data/props</span><br><span class=\"line\">initState(vm)</span><br><span class=\"line\">initProvide(vm) // resolve provide after data/props</span><br><span class=\"line\">callHook(vm, &#x27;created&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 转换ast</span><br><span class=\"line\">// ast处理(静态节点相关)</span><br><span class=\"line\">// 生成render函数</span><br><span class=\"line\">callHook(vm, &#x27;beforeMount&#x27;) // beforeMount处理</span><br><span class=\"line\">// 生成vnode树</span><br><span class=\"line\">// 替换真正的dom</span><br><span class=\"line\">callHook(vm, &#x27;mounted&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">// data改变</span><br><span class=\"line\">callHook(vm, &#x27;beforeUpdate&#x27;)</span><br><span class=\"line\">// vdom重构并patch</span><br><span class=\"line\">callHook(vm, &#x27;updated&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.$destroy</span><br><span class=\"line\">callHook(vm, &#x27;beforeDestroy&#x27;)</span><br><span class=\"line\">vm._watcher.teardown()</span><br><span class=\"line\">vm.__patch__(vm._vnode, null)</span><br><span class=\"line\">callHook(vm, &#x27;destroyed&#x27;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Vue笔记"
            ]
        },
        {
            "id": "http://example.com/2018/01/23/vue/3/",
            "url": "http://example.com/2018/01/23/vue/3/",
            "title": "Vue源码阅读笔记（3）(Vue的双向数据绑定)",
            "date_published": "2018-01-23T06:30:00.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpdXRhby92dWUyLjAtc291cmNlL2Jsb2IvbWFzdGVyLyVFNSU4RiU4QyVFNSU5MCU5MSVFNiU5NSVCMCVFNiU4RCVBRSVFNyVCQiU5MSVFNSVBRSU5QS5tZA==\">参考了的文章</span><br>\n以文章提供的思路自己过一遍代码</p>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>在 vue 的 created 生命周期之前，vue 对 data 进行了监听</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function initState (vm: Component) &#123;</span><br><span class=\"line\">  vm._watchers = []</span><br><span class=\"line\">  const opts = vm.$options</span><br><span class=\"line\">  if (opts.props) initProps(vm, opts.props)</span><br><span class=\"line\">  if (opts.methods) initMethods(vm, opts.methods)</span><br><span class=\"line\">  if (opts.data) &#123;</span><br><span class=\"line\">    initData(vm)</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    observe(vm._data = &#123;&#125;, true /* asRootData */)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (opts.computed) initComputed(vm, opts.computed)</span><br><span class=\"line\">  if (opts.watch) initWatch(vm, opts.watch)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 initData 最后<br>\n调用 observe (data, true /_ asRootData _/)</p>\n<p>src/core/observer/index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Attempt to create an observer instance for a value,</span><br><span class=\"line\"> * returns the new observer if successfully observed,</span><br><span class=\"line\"> * or the existing observer if the value already has one.</span><br><span class=\"line\"> * 给数据创建一个监听器实例</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function observe (value: any, asRootData: ?boolean): Observer | void &#123;</span><br><span class=\"line\">  if (!isObject(value)) &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  let ob: Observer | void</span><br><span class=\"line\">  if (hasOwn(value, &#x27;__ob__&#x27;) &amp;&amp; value.__ob__ instanceof Observer) &#123;</span><br><span class=\"line\">    ob = value.__ob__</span><br><span class=\"line\">  &#125; else if (</span><br><span class=\"line\">    observerState.shouldConvert &amp;&amp;</span><br><span class=\"line\">    !isServerRendering() &amp;&amp;</span><br><span class=\"line\">    (Array.isArray(value) || isPlainObject(value)) &amp;&amp;</span><br><span class=\"line\">    Object.isExtensible(value) &amp;&amp;</span><br><span class=\"line\">    !value._isVue</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    ob = new Observer(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (asRootData &amp;&amp; ob) &#123;</span><br><span class=\"line\">    ob.vmCount++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return ob</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">constructor (value: any) &#123;</span><br><span class=\"line\">    this.value = value</span><br><span class=\"line\">    this.dep = new Dep()</span><br><span class=\"line\">    this.vmCount = 0</span><br><span class=\"line\">    def(value, &#x27;__ob__&#x27;, this)</span><br><span class=\"line\">    if (Array.isArray(value)) &#123;</span><br><span class=\"line\">      const augment = hasProto</span><br><span class=\"line\">        ? protoAugment</span><br><span class=\"line\">        : copyAugment</span><br><span class=\"line\">      augment(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      this.observeArray(value)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      this.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  walk (obj: Object) &#123;</span><br><span class=\"line\">    const keys = Object.keys(obj)</span><br><span class=\"line\">    for (let i = 0; i &lt; keys.length; i++) &#123;</span><br><span class=\"line\">      defineReactive(obj, keys[i], obj[keys[i]])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /**</span><br><span class=\"line\"> * Define a reactive property on an Object.</span><br><span class=\"line\"> */</span><br><span class=\"line\">export function defineReactive (</span><br><span class=\"line\">  obj: Object,</span><br><span class=\"line\">  key: string,</span><br><span class=\"line\">  val: any,</span><br><span class=\"line\">  customSetter?: Function</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  const dep = new Dep()</span><br><span class=\"line\"></span><br><span class=\"line\">  const property = Object.getOwnPropertyDescriptor(obj, key)</span><br><span class=\"line\">  if (property &amp;&amp; property.configurable === false) &#123;</span><br><span class=\"line\">    return</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // cater for pre-defined getter/setters</span><br><span class=\"line\">  const getter = property &amp;&amp; property.get</span><br><span class=\"line\">  const setter = property &amp;&amp; property.set</span><br><span class=\"line\"></span><br><span class=\"line\">  let childOb = observe(val)</span><br><span class=\"line\">  Object.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: true,</span><br><span class=\"line\">    configurable: true,</span><br><span class=\"line\">    get: function reactiveGetter () &#123;</span><br><span class=\"line\">      const value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      if (Dep.target) &#123;</span><br><span class=\"line\">        dep.depend()</span><br><span class=\"line\">        if (childOb) &#123;</span><br><span class=\"line\">          childOb.dep.depend()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (Array.isArray(value)) &#123;</span><br><span class=\"line\">          dependArray(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function reactiveSetter (newVal) &#123;</span><br><span class=\"line\">      const value = getter ? getter.call(obj) : val</span><br><span class=\"line\">      /* eslint-disable no-self-compare */</span><br><span class=\"line\">      if (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">        return</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      /* eslint-enable no-self-compare */</span><br><span class=\"line\">      if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp; customSetter) &#123;</span><br><span class=\"line\">        customSetter()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (setter) &#123;</span><br><span class=\"line\">        setter.call(obj, newVal)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      childOb = observe(newVal)</span><br><span class=\"line\">      dep.notify()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>一步步看下来，最终在 defineReactive 函数里发现了对数据进行了 Object.defineProperty 操作。</p>\n<p>之后在给 message 赋值的时候，触发了 get 函数<br>\n到这里，就需要先看一下 Dep 了，因为在这里使用到了 Dep.target</p>\n<p>在代码执行到这里之前，及 Watcher.prototype.get 的时候，他调用了 pushTarget (this);（这里的 this 就是 Watcher）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pushTarget (_target) &#123;</span><br><span class=\"line\">  if (Dep.target) &#123; targetStack.push(Dep.target); &#125;</span><br><span class=\"line\">  Dep.target = _target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里把 Watcher 赋值给了 Dep.target，然后在 get 的时候把这个 Watcher 添加到了 Dep 的 subs 数组里面去了，当然在添加之前经过了判断，每个 Watcher 都对应有一个 id 的，不会重复添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addDep (dep: Dep) &#123;</span><br><span class=\"line\">    const id = dep.id</span><br><span class=\"line\">    if (!this.newDepIds.has(id)) &#123;</span><br><span class=\"line\">      this.newDepIds.add(id)</span><br><span class=\"line\">      this.newDeps.push(dep)</span><br><span class=\"line\">      if (!this.depIds.has(id)) &#123;</span><br><span class=\"line\">        dep.addSub(this)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>然后在 set 的时候，会调用这个 subs 数组，Wacther 的 update 方法，这里面一层层跟着运行，会发现他最后还是使用了下面的的更新方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updateComponent = function () &#123;</span><br><span class=\"line\">  vm._update(vm._render(), hydrating);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个就是页面的跟新方法，只不过他其实是放在了一个异步方法里面执行，这里就暂不多做研究了，可以根据参考文章了解。</p>\n<p>这里要说明一下，vue (应该) 是一个组件 (components) 就只对应一个用来跟新页面的 Watcher，这个 Watcher 是 vue 自动创建的，所以按照这里的案例，会发现他的 subs 里面其实只有一个 Watcher, 只要数据改变了，就会触发这个组件下的 vdom 重新更新，但是他依靠了 diff 算法，才实现的重用和部分更新。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>vue 双向绑定，分为 3 个部分 <code>observe</code> ,  <code>watcher</code> ,  <code>dep</code></p>\n<p>observe 用来监听数据，vue 会用递归的方式利用 <code>object.defineProperty</code>  对数据里面的所有值进行监听，对于数组，则会重写部分方法来实现监听。然后在 get 里面把一个 Watcher 放到 dep，set 的时候出发这个 watcher 列表</p>\n<p>watcher 就是跟新函数，调用其中的一些方法，能更新页面</p>\n<p>dep 是链接 observe 和 watcher 的桥梁，主要用来存放 watcher 列表</p>\n",
            "tags": [
                "Vue笔记"
            ]
        },
        {
            "id": "http://example.com/2018/01/22/vue/1/",
            "url": "http://example.com/2018/01/22/vue/1/",
            "title": "Vue源码阅读笔记（1）(从入口文件开始)",
            "date_published": "2018-01-22T06:30:00.000Z",
            "content_html": "<p>// 这是 vue 2.2.6 的源码阅读笔记</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpdXRhby92dWUyLjAtc291cmNlL2Jsb2IvbWFzdGVyLyVFNCVCQiU4RSVFNSU4NSVBNSVFNSU4RiVBMyVFNiU5NiU4NyVFNCVCQiVCNiVFNiU5RiVBNSVFNyU5QyU4QlZ1ZSVFNiVCQSU5MCVFNyVBMCU4MS5tZA==\">参考了的文章</span><br>\n以文章提供的思路自己过一遍代码</p>\n<h2 id=\"先过一遍流程文件加载顺序\"><a class=\"markdownIt-Anchor\" href=\"#先过一遍流程文件加载顺序\">#</a> 先过一遍流程（文件加载顺序）</h2>\n<p>按 npm run dev 的命令找来，文件执行顺序应该是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/src/entries/web-runtime-with-compiler.js   // $mount二次加工</span><br><span class=\"line\">--&gt; /src/entries/web-runtime.js    // 定义了Vue.config的一些方法、$mount、__patch__</span><br><span class=\"line\">--&gt; /src/core/index.js</span><br><span class=\"line\">--&gt; /src/core/instance/index.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"srccoreindexjs\"><a class=\"markdownIt-Anchor\" href=\"#srccoreindexjs\">#</a> /src/core/index.js</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;./instance/index&#x27;</span><br><span class=\"line\">import &#123; initGlobalAPI &#125; from &#x27;./global-api/index&#x27;</span><br><span class=\"line\">import &#123; isServerRendering &#125; from &#x27;core/util/env&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">initGlobalAPI(Vue)</span><br><span class=\"line\"></span><br><span class=\"line\">// 环境判断 服务器or浏览器</span><br><span class=\"line\">Object.defineProperty(Vue.prototype, &#x27;$isServer&#x27;, &#123;</span><br><span class=\"line\">  get: isServerRendering</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.version = &#x27;__VERSION__&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Vue</span><br></pre></td></tr></table></figure>\n<h3 id=\"srccoreinstanceindexjs\"><a class=\"markdownIt-Anchor\" href=\"#srccoreinstanceindexjs\">#</a> /src/core/instance/index.js</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/src/core/index.js</span><br><span class=\"line\">--&gt; /src/core/instance/index.js</span><br></pre></td></tr></table></figure>\n<p>这里是 vue 真正定义的地方</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Vue (options) &#123; // vue定义的地方</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &#x27;production&#x27; &amp;&amp;</span><br><span class=\"line\">    !(this instanceof Vue)) &#123; // 是不是new Vue()</span><br><span class=\"line\">    warn(&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this._init(options)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 下面是给vue.prototype添加方法</span><br><span class=\"line\">initMixin(Vue) // _init</span><br><span class=\"line\">stateMixin(Vue) // $data、$props、 $set、$delete、$watch</span><br><span class=\"line\">eventsMixin(Vue) // $on、 $once、 $off、 $emit</span><br><span class=\"line\">lifecycleMixin(Vue) // _update、 $forceUpdate、 $destroy</span><br><span class=\"line\">renderMixin(Vue) // $nextTick、 _render、 一些绑在了prototype的内部方法</span><br></pre></td></tr></table></figure>\n<h3 id=\"srccoreglobal-apiindexjs\"><a class=\"markdownIt-Anchor\" href=\"#srccoreglobal-apiindexjs\">#</a> /src/core/global-api/index.js</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/src/core/index.js</span><br><span class=\"line\">--&gt; /src/core/global-api/index.js</span><br></pre></td></tr></table></figure>\n<p>这里添加了一些？vue 全局方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.defineProperty(Vue, &#x27;config&#x27;, configDef)</span><br><span class=\"line\"></span><br><span class=\"line\">// exposed util methods.</span><br><span class=\"line\">// NOTE: these are not considered part of the public API - avoid relying on</span><br><span class=\"line\">// them unless you are aware of the risk.</span><br><span class=\"line\">// util方法虽然暴露出来了，但你最好不要使用(依赖)它，除非你知道他将会带来的风险（ps:我目前不知道）</span><br><span class=\"line\">Vue.util = &#123;</span><br><span class=\"line\">  warn,</span><br><span class=\"line\">  extend,</span><br><span class=\"line\">  mergeOptions,</span><br><span class=\"line\">  defineReactive</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.set = set</span><br><span class=\"line\">Vue.delete = del</span><br><span class=\"line\">Vue.nextTick = nextTick</span><br><span class=\"line\">Vue.options = Object.create(null)</span><br><span class=\"line\">config._assetTypes.forEach(type =&gt; &#123;</span><br><span class=\"line\">  Vue.options[type + &#x27;s&#x27;] = Object.create(null)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// this is used to identify the &quot;base&quot; constructor to extend all plain-object</span><br><span class=\"line\">// components with in Weex&#x27;s multi-instance scenarios. 为weex多实例方案？(这个应该是为weex服务的)</span><br><span class=\"line\">Vue.options._base = Vue</span><br><span class=\"line\"></span><br><span class=\"line\">initUse(Vue) // Vue.use</span><br><span class=\"line\">initMixin(Vue) // Vue.mixin</span><br><span class=\"line\">initExtend(Vue) // Vue.extend</span><br><span class=\"line\">initAssetRegisters(Vue) // Vue[&#x27;component&#x27;]、Vue[&#x27;directive&#x27;]、Vue[&#x27;filter&#x27;]</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Vue笔记"
            ]
        },
        {
            "id": "http://example.com/2018/01/22/vue/readme/",
            "url": "http://example.com/2018/01/22/vue/readme/",
            "title": "说明",
            "date_published": "2018-01-22T06:30:00.000Z",
            "content_html": "<p>vue2.2.6 的源码阅读笔记</p>\n<p>利用官方 vue 项目，配合 debugger 和 npm dev 命令，学习 vue 源码</p>\n",
            "tags": [
                "Vue笔记"
            ]
        }
    ]
}