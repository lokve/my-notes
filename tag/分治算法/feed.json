{
    "version": "https://jsonfeed.org/version/1",
    "title": "学习笔记 • All posts by \"分治算法\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/01/07/leetcode/241.Different%20Ways%20to%20Add%20Parentheses/index/",
            "url": "http://example.com/2024/01/07/leetcode/241.Different%20Ways%20to%20Add%20Parentheses/index/",
            "title": "241.Different Ways to Add Parentheses",
            "date_published": "2024-01-07T08:00:00.000Z",
            "content_html": "<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\">#</a> 题目</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZGlmZmVyZW50LXdheXMtdG8tYWRkLXBhcmVudGhlc2VzL2Rlc2NyaXB0aW9uLw==\">地址</span></p>\n<h3 id=\"我的答案1\"><a class=\"markdownIt-Anchor\" href=\"#我的答案1\">#</a> 我的答案 1</h3>\n<p>按照题目思路，先遍历出搜索算式，再挨个计算算式结果<br>\n分两步走，性能太差了</p>\n<p><img data-src=\"img.png\" alt=\"img.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">expression</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> diffWaysToCompute = <span class=\"keyword\">function</span>(<span class=\"params\">expression</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = expression.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/([\\+\\-\\*])/g</span>, <span class=\"string\">&quot;|$1|&quot;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;|&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [+arr[<span class=\"number\">0</span>]]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rsts = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sums = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> same = &#123;&#125;</span><br><span class=\"line\">    <span class=\"title function_\">pieceExp</span>(arr, rsts)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rsts);</span><br><span class=\"line\">    rsts.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!same[item]) &#123;</span><br><span class=\"line\">            same[item] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            sums.<span class=\"title function_\">push</span>(<span class=\"title function_\">calcValue</span>(item))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sums);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sums;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 会有重复结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pieceExp</span>(<span class=\"params\">arr, rsts</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dealArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; arr.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> item = arr[index];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ([<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>].<span class=\"title function_\">includes</span>(item)) &#123;</span><br><span class=\"line\">            dealArr.<span class=\"title function_\">push</span>([</span><br><span class=\"line\">                ...arr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, index - <span class=\"number\">1</span>),</span><br><span class=\"line\">                <span class=\"string\">`(<span class=\"subst\">$&#123;arr[index - <span class=\"number\">1</span>]&#125;</span><span class=\"subst\">$&#123;item&#125;</span><span class=\"subst\">$&#123;arr[index + <span class=\"number\">1</span>]&#125;</span>)`</span>,</span><br><span class=\"line\">                ...arr.<span class=\"title function_\">slice</span>(index + <span class=\"number\">2</span>),</span><br><span class=\"line\">            ]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dealArr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            rsts.<span class=\"title function_\">push</span>(item[<span class=\"number\">0</span>])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">pieceExp</span>(item, rsts)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calcValue</span> (str) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/([\\+\\-\\*])/g</span>, <span class=\"string\">&quot;|$1|&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\()/g</span>, <span class=\"string\">&#x27;$1|&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\))/g</span>, <span class=\"string\">&#x27;|$1&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;|&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nums = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> scopes = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] === <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// nums.push(&#x27;&#x27;);</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i] === <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scopes.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> expression = scopes.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">const</span> right = nums.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">const</span> left = nums.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (expression === <span class=\"string\">&#x27;+&#x27;</span>) &#123;</span><br><span class=\"line\">                    nums.<span class=\"title function_\">push</span>(left + right)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expression === <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">                    nums.<span class=\"title function_\">push</span>(left - right)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (expression === <span class=\"string\">&#x27;*&#x27;</span>) &#123;</span><br><span class=\"line\">                    nums.<span class=\"title function_\">push</span>(left * right)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                sum = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>].<span class=\"title function_\">includes</span>(arr[i])) &#123;</span><br><span class=\"line\">            scopes.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            nums.<span class=\"title function_\">push</span>(+arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">diffWaysToCompute</span>(<span class=\"string\">&quot;21-12-1&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考答案\"><a class=\"markdownIt-Anchor\" href=\"#参考答案\">#</a> 参考答案</h3>\n<p>利用递归遍历，以加减乘为中间分隔成左算式和右算式，<br>\n返回最小算式的结果，再循环组合<br>\n (哦，原来这是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvYWxnb3JpdGhtL2FsZy1jb3JlLWRpdmlkZS1hbmQtY29ucXVlci5odG1s\">分治算法</span>)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">input</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> diffWaysToCompute = <span class=\"keyword\">function</span>(<span class=\"params\">input</span>) &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; input.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(input[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> left = <span class=\"title function_\">diffWaysToCompute</span>(input.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, i));</span><br><span class=\"line\">            <span class=\"keyword\">let</span> right = <span class=\"title function_\">diffWaysToCompute</span>(input.<span class=\"title function_\">slice</span>(i+<span class=\"number\">1</span>));</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> l <span class=\"keyword\">of</span> left) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> r <span class=\"keyword\">of</span> right) &#123;</span><br><span class=\"line\">                    l = <span class=\"title class_\">Number</span>(l);</span><br><span class=\"line\">                    r = <span class=\"title class_\">Number</span>(r);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (input[i]==<span class=\"string\">&#x27;+&#x27;</span>) &#123;</span><br><span class=\"line\">                        res.<span class=\"title function_\">push</span>(l + r);       </span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input[i]==<span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">                        res.<span class=\"title function_\">push</span>(l - r);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        res.<span class=\"title function_\">push</span>(l * r);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.<span class=\"property\">length</span>!=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [input];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "leetcode",
                "分治算法"
            ]
        }
    ]
}