{
    "version": "https://jsonfeed.org/version/1",
    "title": "学习笔记 • All posts by \"算法基础\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2019/07/10/%E7%AE%97%E6%B3%95/01.%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2019/07/10/%E7%AE%97%E6%B3%95/01.%E6%8E%92%E5%BA%8F/",
            "title": "数据结构",
            "date_published": "2019-07-10T03:00:00.000Z",
            "content_html": "<h2 id=\"基础函数\"><a class=\"markdownIt-Anchor\" href=\"#基础函数\">#</a> 基础函数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function less (a, b) &#123;</span><br><span class=\"line\">    return a &lt; b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function exch (arr, i ,j) &#123;</span><br><span class=\"line\">    const cah = arr[i];</span><br><span class=\"line\">    arr[i] = arr[j];</span><br><span class=\"line\">    arr[j] = cah;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function isSorted (arr) &#123;</span><br><span class=\"line\">    for (let i = 1; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        if (less(arr[i], arr[i - 1])) return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function shuffle(array) &#123;</span><br><span class=\"line\">  var _array = array.concat();</span><br><span class=\"line\"></span><br><span class=\"line\">  for (var i = _array.length; i--; ) &#123;</span><br><span class=\"line\">    var j = Math.floor(Math.random() * (i + 1));</span><br><span class=\"line\">    var temp = _array[i];</span><br><span class=\"line\">    _array[i] = _array[j];</span><br><span class=\"line\">    _array[j] = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return _array;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function time(fn, name) &#123;</span><br><span class=\"line\">    var d1 = new Date();</span><br><span class=\"line\">    fn();</span><br><span class=\"line\">    var d2 = new Date();</span><br><span class=\"line\">    console.log(name, parseInt(d2 - d1) / 1000);//两个时间相差的秒数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"初级排序算法\"><a class=\"markdownIt-Anchor\" href=\"#初级排序算法\">#</a> 初级排序算法</h2>\n<h3 id=\"选择排序\"><a class=\"markdownIt-Anchor\" href=\"#选择排序\">#</a> 选择排序</h3>\n<p>找到数组中最小的数，和第一个交换。以此类推</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sort1(arr) &#123;</span><br><span class=\"line\">    const len = arr.length;</span><br><span class=\"line\">    for (let i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">        let min = i;</span><br><span class=\"line\">        for (let j = i + 1; j &lt; len; j++) &#123;</span><br><span class=\"line\">            if (less(arr[j], arr[min])) &#123;</span><br><span class=\"line\">                min = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            exch(arr, i, min);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>时间固定</p>\n<h3 id=\"插入排序\"><a class=\"markdownIt-Anchor\" href=\"#插入排序\">#</a> 插入排序</h3>\n<p>第 n 个数依次和前面的交换，直到大于前面的数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sort2(arr) &#123;</span><br><span class=\"line\">    for (let j = 1; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">        let key = arr[j];</span><br><span class=\"line\">        let i = j - 1;</span><br><span class=\"line\">        while(i &gt;= 0 &amp;&amp; arr[i] &gt; key) &#123;</span><br><span class=\"line\">            arr[i + 1] = arr[i];</span><br><span class=\"line\">            i = i - 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[i + 1] = key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>插入排序对于部分有序的数组十分高效，也很适合小规模数组。时间上期望二分之选择排序</p>\n<h3 id=\"希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#希尔排序\">#</a> 希尔排序</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sort3(arr) &#123; // 将a[]按升序排列</span><br><span class=\"line\">    const N = arr.length;</span><br><span class=\"line\">    let h = 1;</span><br><span class=\"line\">    while (h &lt; N/3) h = 3*h + 1; // 1, 4, 13, 40, 121, 364, 1093, ...</span><br><span class=\"line\">    while (h &gt;= 1) &#123; // 将数组变为h有序</span><br><span class=\"line\">        for (let i = h; i &lt; N; i++)&#123;</span><br><span class=\"line\">            for (int j = i; j &gt;= h &amp;&amp; less(a[j], a[j-h]); j -= h) &#123;</span><br><span class=\"line\">                exch(a, j, j-h);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    h = h/3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>5000 数据以上明显比上面的快</p>\n",
            "tags": [
                "算法基础"
            ]
        },
        {
            "id": "http://example.com/2019/07/02/%E7%AE%97%E6%B3%95/0.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "url": "http://example.com/2019/07/02/%E7%AE%97%E6%B3%95/0.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "title": "数据结构",
            "date_published": "2019-07-02T03:00:00.000Z",
            "content_html": "<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h2>\n<h2 id=\"栈\"><a class=\"markdownIt-Anchor\" href=\"#栈\">#</a> 栈</h2>\n<ul>\n<li>push 和 pop</li>\n<li>后进先出</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Stack &#123;</span><br><span class=\"line\">    constructor(...items) &#123;</span><br><span class=\"line\">        this.reverse = false;</span><br><span class=\"line\">        this.stack = [...items];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    push(...items) &#123;</span><br><span class=\"line\">        return this.reverse</span><br><span class=\"line\">            ? this.stack.unshift(...items)</span><br><span class=\"line\">            : this.stack.push(...items);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pop() &#123;</span><br><span class=\"line\">        return this.reverse ? this.stack.shift() : this.stack.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const stack = new Stack(4, 5);</span><br><span class=\"line\">stack.reverse = true;</span><br><span class=\"line\">console.log(stack.push(1, 2, 3) === 5) // true</span><br><span class=\"line\">console.log(stack.stack ===[1, 2, 3, 4, 5]) // true</span><br></pre></td></tr></table></figure>\n<h2 id=\"队列\"><a class=\"markdownIt-Anchor\" href=\"#队列\">#</a> 队列</h2>\n<ul>\n<li>unshift 和 pop</li>\n<li>先进先出</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Queue &#123;</span><br><span class=\"line\">    constructor(...items) &#123;</span><br><span class=\"line\">        this.reverse = false;</span><br><span class=\"line\">        this.queue = [...items];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    enqueue(...items) &#123;</span><br><span class=\"line\">        return this.reverse</span><br><span class=\"line\">            ? this.queue.push(...items)</span><br><span class=\"line\">            : this.queue.unshift(...items);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dequeue() &#123;</span><br><span class=\"line\">        return this.reverse ? this.queue.shift() : this.queue.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h2>\n<h3 id=\"单向链表\"><a class=\"markdownIt-Anchor\" href=\"#单向链表\">#</a> 单向链表</h3>\n<ul>\n<li>pop、unshift、shift、push、delete</li>\n<li>print</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Node &#123;</span><br><span class=\"line\">    constructor(data) &#123;</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">        this.next = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class NodeList &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.head = null;</span><br><span class=\"line\">        this.tail = null;</span><br><span class=\"line\">        this.length = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    push(data) &#123;</span><br><span class=\"line\">        if (!data) return null;</span><br><span class=\"line\">        const node =  new Node(data);</span><br><span class=\"line\">        if (this.isEmpty()) &#123;</span><br><span class=\"line\">          this.head = node</span><br><span class=\"line\">          this.tail = node</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            this.tail.next = node</span><br><span class=\"line\">            this.tail = node</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.length++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    unshift(data) &#123;</span><br><span class=\"line\">        if (!data) return null;</span><br><span class=\"line\">        const node =  new Node(data);</span><br><span class=\"line\">        if (this.isEmpty()) &#123;</span><br><span class=\"line\">          this.head = node</span><br><span class=\"line\">          this.tail = node</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.next = this.head;</span><br><span class=\"line\">        this.head = node</span><br><span class=\"line\">        this.length++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pop() &#123;</span><br><span class=\"line\">        if (this.isEmpty()) return null;</span><br><span class=\"line\">        let node = this.head;</span><br><span class=\"line\">        const tail = this.tail;</span><br><span class=\"line\">        if (this.length === 1) &#123;</span><br><span class=\"line\">            this.head = this.tail = null;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            while(node.next) &#123;</span><br><span class=\"line\">                if (node.next === this.tail) &#123;</span><br><span class=\"line\">                    node.next = null;</span><br><span class=\"line\">                    this.tail = node;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                node = node.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.length--;</span><br><span class=\"line\">        return tail;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    shift() &#123;</span><br><span class=\"line\">        if (this.isEmpty()) return null;</span><br><span class=\"line\">        const head = this.head;</span><br><span class=\"line\">        if (this.length === 1) &#123;</span><br><span class=\"line\">            this.head = this.tail = null;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            this.head = this.head.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.length--;</span><br><span class=\"line\">        return head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    get(index) &#123;</span><br><span class=\"line\">        if (index &lt; 0 || index &gt;= this.length) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let node = this.head;</span><br><span class=\"line\">        let i = 0;</span><br><span class=\"line\">        while(i &lt; index) &#123;</span><br><span class=\"line\">            node = node.next;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    delete(index) &#123;</span><br><span class=\"line\">        if (index &lt; 0 || index &gt;= this.length) &#123;</span><br><span class=\"line\">            return null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (index === 0) return this.shift();</span><br><span class=\"line\">        if (index === this.length - 1) return this.pop();</span><br><span class=\"line\">        let node = this.head;</span><br><span class=\"line\">        let last = null;</span><br><span class=\"line\">        let i = 0;</span><br><span class=\"line\">        while(i &lt; index) &#123;</span><br><span class=\"line\">            last = node;</span><br><span class=\"line\">            node = node.next;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last.next = node.next;</span><br><span class=\"line\">        this.length--;</span><br><span class=\"line\">        return node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    printf() &#123;</span><br><span class=\"line\">        if (this.length === 0) return null;</span><br><span class=\"line\">        let node = this.head;</span><br><span class=\"line\">        const list = [];</span><br><span class=\"line\">        while(node) &#123;</span><br><span class=\"line\">            list.push(node.data);</span><br><span class=\"line\">            node = node.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return list.join(&#x27; -&gt; &#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    isEmpty() &#123;</span><br><span class=\"line\">        return this.length === 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"双向链表\"><a class=\"markdownIt-Anchor\" href=\"#双向链表\">#</a> 双向链表</h3>\n<p>大致同上，要注意 prev 的指向</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Node &#123;</span><br><span class=\"line\">    constructor(data) &#123;</span><br><span class=\"line\">        // data 包含链表项应存储的值</span><br><span class=\"line\">        this.data = data;</span><br><span class=\"line\">        // next 是指向列表中下一项的指针</span><br><span class=\"line\">        this.next = null;</span><br><span class=\"line\">        // prev 是指向列表中上一项的指针</span><br><span class=\"line\">        this.prev = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\">#</a> 二叉树</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Node &#123;</span><br><span class=\"line\">    constructor(val) &#123;</span><br><span class=\"line\">        this.val = val;</span><br><span class=\"line\">        this.left = null;</span><br><span class=\"line\">        this.right = null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class BST &#123;</span><br><span class=\"line\">    constructor(...arg) &#123;</span><br><span class=\"line\">        this.root = null;</span><br><span class=\"line\">        if (arg.length) &#123;</span><br><span class=\"line\">            arg.forEach(v =&gt; this.insert(v))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    insert(val) &#123;</span><br><span class=\"line\">        if (this.root === null) &#123;</span><br><span class=\"line\">            this.root = new Node(val);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            let node = this.root;</span><br><span class=\"line\">            while (node) &#123; // 找到相应左/右节点插入</span><br><span class=\"line\">                if (node.val === val) return false;</span><br><span class=\"line\">                if (node.val &gt; val) &#123;</span><br><span class=\"line\">                    if (!node.left) &#123;</span><br><span class=\"line\">                        node.left = new Node(val);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    node = node.left;</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    if (!node.right) &#123;</span><br><span class=\"line\">                        node.right = new Node(val);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    node = node.right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    delete(val) &#123;</span><br><span class=\"line\">        let node = this.root;</span><br><span class=\"line\">        let prev = null;</span><br><span class=\"line\">        let type = null; // 记录前一步是左节点还是右节点</span><br><span class=\"line\">        if (node === null) return;</span><br><span class=\"line\">        while (node) &#123;</span><br><span class=\"line\">            if (node.val === val) &#123;</span><br><span class=\"line\">                // 如果存在左右节点，把右节点的最左子节点替换删除节点</span><br><span class=\"line\">                if (node.left &amp;&amp; node.right) &#123;</span><br><span class=\"line\">                    let left = node.right;</span><br><span class=\"line\">                    let prev = null;</span><br><span class=\"line\">                    while(left.left) &#123; // 找到最左子节点</span><br><span class=\"line\">                        if (left.left) &#123;</span><br><span class=\"line\">                            prev = left;</span><br><span class=\"line\">                            left = left.left;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    node.val = left.val;</span><br><span class=\"line\">                    if (prev) &#123; // 最左子节点的父节点指向他的右节点</span><br><span class=\"line\">                        prev.left = left.right;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        node.right = left.right;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; else &#123; // 其中一个/两个节点不存在</span><br><span class=\"line\">                    if (prev) &#123; // 有prev表示删除的不是根节点</span><br><span class=\"line\">                        prev[type] = node.left || node.right</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        this.root = node.left || node.right</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (node.val &gt; val) &#123;</span><br><span class=\"line\">                prev = node;</span><br><span class=\"line\">                node = node.left;</span><br><span class=\"line\">                type = &#x27;left&#x27;;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                prev = node;</span><br><span class=\"line\">                node = node.right;</span><br><span class=\"line\">                type = &#x27;right&#x27;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    preOrder() &#123;</span><br><span class=\"line\">        let node = this.root;</span><br><span class=\"line\">        const cache = [];</span><br><span class=\"line\">        const rst = [];</span><br><span class=\"line\">        while(node || cache.length) &#123;</span><br><span class=\"line\">            if (node) &#123;</span><br><span class=\"line\">                rst.push(node.val);</span><br><span class=\"line\">                node.right &amp;&amp; cache.push(node);</span><br><span class=\"line\">                node = node.left;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                const n = cache.pop();</span><br><span class=\"line\">                node = n.right</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return rst.join(&#x27;,&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    inOrder() &#123;</span><br><span class=\"line\">        let node = this.root;</span><br><span class=\"line\">        const cache = [];</span><br><span class=\"line\">        const rst = [];</span><br><span class=\"line\">        while(node || cache.length) &#123;</span><br><span class=\"line\">            if (node) &#123;</span><br><span class=\"line\">                cache.push(node);</span><br><span class=\"line\">                node = node.left;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                const n = cache.pop();</span><br><span class=\"line\">                rst.push(n.val);</span><br><span class=\"line\">                node = n.right</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rst.join(&#x27;,&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    postOrder() &#123;</span><br><span class=\"line\">        let node = this.root;</span><br><span class=\"line\">        const cache = [];</span><br><span class=\"line\">        const rst = [];</span><br><span class=\"line\">        while(node || cache.length) &#123;</span><br><span class=\"line\">            if (node) &#123;</span><br><span class=\"line\">                cache.push(node);</span><br><span class=\"line\">                node = node.left;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                const n = cache.pop();</span><br><span class=\"line\">                if (!isNaN(+n)) &#123;</span><br><span class=\"line\">                    rst.push(n);</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (n.right) &#123; // 如果有右节点，就先记住他的值</span><br><span class=\"line\">                    cache.push(n.val);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    rst.push(n.val);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                node = n.right</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rst.join(&#x27;,&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    bfs() &#123; // 层次遍历（广度优先遍历）BFS</span><br><span class=\"line\">        if (!this.root) return;</span><br><span class=\"line\">        const queue = [this.root];</span><br><span class=\"line\">        const rst = [];</span><br><span class=\"line\">        while(queue.length) &#123;</span><br><span class=\"line\">            const node = queue.shift();</span><br><span class=\"line\">            rst.push(node.val);</span><br><span class=\"line\">            if (node.left) &#123;</span><br><span class=\"line\">                queue.push(node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (node.right) &#123;</span><br><span class=\"line\">                queue.push(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rst.join(&#x27;,&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dfs() &#123; // 深度优先 DFS 前序遍历</span><br><span class=\"line\">        if (!this.root) return;</span><br><span class=\"line\">        const stack = [this.root];</span><br><span class=\"line\">        const rst = [];</span><br><span class=\"line\">        while(stack.length) &#123;</span><br><span class=\"line\">            const node = stack.pop();</span><br><span class=\"line\">            rst.push(node.val);</span><br><span class=\"line\">            if (node.right) &#123;</span><br><span class=\"line\">                stack.push(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (node.left) &#123;</span><br><span class=\"line\">                stack.push(node.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rst.join(&#x27;,&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    depth() &#123; // 最大深度</span><br><span class=\"line\">        if (!this.root) return;</span><br><span class=\"line\">        const queue = [this.root];</span><br><span class=\"line\">        const dep = [1];</span><br><span class=\"line\">        let max = 1;</span><br><span class=\"line\">        while(queue.length) &#123;</span><br><span class=\"line\">            const node = queue.shift();</span><br><span class=\"line\">            const level = dep.shift();</span><br><span class=\"line\">            max = Math.max(level, max);</span><br><span class=\"line\">            if (node.left) &#123;</span><br><span class=\"line\">                queue.push(node.left);</span><br><span class=\"line\">                dep.push(level + 1)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (node.right) &#123;</span><br><span class=\"line\">                queue.push(node.right);</span><br><span class=\"line\">                dep.push(level + 1)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const tree = new BST(50,10,33,22,66,77,43)</span><br></pre></td></tr></table></figure>\n<h2 id=\"图\"><a class=\"markdownIt-Anchor\" href=\"#图\">#</a> 图</h2>\n<h3 id=\"有向图\"><a class=\"markdownIt-Anchor\" href=\"#有向图\">#</a> 有向图</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Graph &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.graph = new Map();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 基础操作方法</span><br><span class=\"line\">    addVertex(vertex) &#123; // 添加定点</span><br><span class=\"line\">        if (this.graph.has(vertex)) return;</span><br><span class=\"line\">        this.graph.set(vertex, []);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    addEdge(vertex, node) &#123;</span><br><span class=\"line\">        const map = this.graph.get(vertex);</span><br><span class=\"line\">        if (map &amp;&amp; !map.includes(node)) &#123;</span><br><span class=\"line\">            map.push(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    print() &#123;</span><br><span class=\"line\">        for (let [key, value] of this.graph) &#123;</span><br><span class=\"line\">            console.log(key, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dfs(startNode) &#123; // 深度优先遍历</span><br><span class=\"line\">        if (!this.graph.has(startNode)) return;</span><br><span class=\"line\">        const rst = [];</span><br><span class=\"line\">        const findNode = (vertex) =&gt; &#123;</span><br><span class=\"line\">            rst.push(vertex);</span><br><span class=\"line\">            const map = this.graph.get(vertex);</span><br><span class=\"line\">            map.forEach(v =&gt; &#123;</span><br><span class=\"line\">                if (!rst.includes(v)) &#123;</span><br><span class=\"line\">                    findNode(v);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        findNode(startNode)</span><br><span class=\"line\">        console.log(rst.join(&#x27;,&#x27;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    bfs(startNode) &#123; // 广度</span><br><span class=\"line\">        if (!this.graph.has(startNode)) return;</span><br><span class=\"line\">        const rst = [];</span><br><span class=\"line\">        const queue = [startNode];</span><br><span class=\"line\">        while (queue.length) &#123;</span><br><span class=\"line\">            const node = queue.shift();</span><br><span class=\"line\">            if (rst.includes(node)) continue;</span><br><span class=\"line\">            rst.push(node);</span><br><span class=\"line\">            const map = this.graph.get(node)</span><br><span class=\"line\">            queue.push(...map);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(rst.join(&#x27;,&#x27;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    findAllPath(startNode) &#123; // bfs 找到startNode起点的所有路径</span><br><span class=\"line\">        if (!this.graph.has(startNode)) return;</span><br><span class=\"line\">        const queue = [startNode];</span><br><span class=\"line\">        let path = [];</span><br><span class=\"line\">        const rst = [];</span><br><span class=\"line\">        // debugger</span><br><span class=\"line\">        while (queue.length) &#123;</span><br><span class=\"line\">            const node = queue.shift();</span><br><span class=\"line\">            if (rst.includes(node)) continue;</span><br><span class=\"line\">            rst.push(node);</span><br><span class=\"line\">            const map = this.graph.get(node)</span><br><span class=\"line\">            queue.push(...map);</span><br><span class=\"line\">            if (!path.length) &#123;</span><br><span class=\"line\">                path.push(...map.map(v =&gt; [startNode, v]));</span><br><span class=\"line\">            &#125; else &#123; // 遍历已有的路径，如果有下家，加上去</span><br><span class=\"line\">                if (!map.length) continue;</span><br><span class=\"line\">                const tail = []</span><br><span class=\"line\">                const rest = []</span><br><span class=\"line\">                path.forEach(arr =&gt; &#123;</span><br><span class=\"line\">                    if (arr[arr.length - 1] === node) &#123;</span><br><span class=\"line\">                        tail.push(arr);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        rest.push(arr);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                if (!tail.length) continue;</span><br><span class=\"line\">                map.forEach(m =&gt; &#123;</span><br><span class=\"line\">                    tail.forEach((t) =&gt; &#123;</span><br><span class=\"line\">                        rest.push(t.concat(m))</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                path = rest;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        path.forEach(arr =&gt; console.log(arr.join(&#x27; =&gt; &#x27;)))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    findPath(startNode, secondNode)&#123; // bfs 在上面的基础上，到secondNode就停止增加路径</span><br><span class=\"line\">        if (!this.graph.has(startNode)) return;</span><br><span class=\"line\">        const queue = [startNode];</span><br><span class=\"line\">        let path = [];</span><br><span class=\"line\">        const rst = [];</span><br><span class=\"line\">        // debugger</span><br><span class=\"line\">        while (queue.length) &#123;</span><br><span class=\"line\">            const node = queue.shift();</span><br><span class=\"line\">            if (rst.includes(node)) continue;</span><br><span class=\"line\">            rst.push(node);</span><br><span class=\"line\">            const map = this.graph.get(node)</span><br><span class=\"line\">            queue.push(...map);</span><br><span class=\"line\">            if (!path.length) &#123;</span><br><span class=\"line\">                path.push(...map.map(v =&gt; [startNode, v]));</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                if (!map.length) continue;</span><br><span class=\"line\">                const tail = []</span><br><span class=\"line\">                const rest = []</span><br><span class=\"line\">                path.forEach(arr =&gt; &#123;</span><br><span class=\"line\">                    const last = arr[arr.length - 1];</span><br><span class=\"line\">                    if (last === node &amp;&amp; last !== secondNode) &#123;</span><br><span class=\"line\">                        tail.push(arr);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        rest.push(arr);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                if (!tail.length) continue;</span><br><span class=\"line\">                map.forEach(m =&gt; &#123;</span><br><span class=\"line\">                    tail.forEach((t) =&gt; &#123;</span><br><span class=\"line\">                        rest.push(t.concat(m))</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                path = rest;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        path.forEach(arr =&gt; console.log(arr.join(&#x27; =&gt; &#x27;)))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const g = new Graph();</span><br><span class=\"line\">const arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;];</span><br><span class=\"line\">for (let i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  g.addVertex(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">g.addEdge(&#x27;A&#x27;, &#x27;B&#x27;);</span><br><span class=\"line\">g.addEdge(&#x27;A&#x27;, &#x27;D&#x27;);</span><br><span class=\"line\">g.addEdge(&#x27;A&#x27;, &#x27;E&#x27;);</span><br><span class=\"line\">g.addEdge(&#x27;B&#x27;, &#x27;C&#x27;);</span><br><span class=\"line\">g.addEdge(&#x27;D&#x27;, &#x27;E&#x27;);</span><br><span class=\"line\">g.addEdge(&#x27;E&#x27;, &#x27;F&#x27;);</span><br><span class=\"line\">g.addEdge(&#x27;E&#x27;, &#x27;C&#x27;);</span><br><span class=\"line\">g.addEdge(&#x27;C&#x27;, &#x27;F&#x27;);</span><br><span class=\"line\">g.addEdge(&#x27;E&#x27;, &#x27;G&#x27;);</span><br><span class=\"line\">g.addEdge(&#x27;G&#x27;, &#x27;H&#x27;);</span><br><span class=\"line\">g.addEdge(&#x27;H&#x27;, &#x27;C&#x27;);</span><br><span class=\"line\">g.print();</span><br><span class=\"line\">g.findPath(&#x27;A&#x27;, &#x27;C&#x27;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"字典树\"><a class=\"markdownIt-Anchor\" href=\"#字典树\">#</a> 字典树</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class PrefixTreeNode &#123;</span><br><span class=\"line\">    constructor(value) &#123;</span><br><span class=\"line\">        this.children = &#123;&#125;;</span><br><span class=\"line\">        this.isEnd = false; // 表示到这里是一个完整的单词</span><br><span class=\"line\">        this.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class PrefixTree extends PrefixTreeNode &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        super(null);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 基础操作方法</span><br><span class=\"line\">    addWord(string) &#123;</span><br><span class=\"line\">        const addWordHelper = (node, str) =&gt; &#123;</span><br><span class=\"line\">            if (!str) return;</span><br><span class=\"line\">            const &#123;children&#125; = node;</span><br><span class=\"line\">            const w = str[0];</span><br><span class=\"line\">            if (!children[w]) &#123;</span><br><span class=\"line\">                children[w] = new PrefixTreeNode(w);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (str.length === 1) &#123;</span><br><span class=\"line\">                children[w].isEnd = true;</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            addWordHelper(children[w], str.slice(1));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        addWordHelper(this, string);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    predictWord(string) &#123;</span><br><span class=\"line\">        let rst = [];</span><br><span class=\"line\">        // debugger</span><br><span class=\"line\">        const findWordHelper = (node, str, string) =&gt; &#123;</span><br><span class=\"line\">            const &#123;children&#125; = node;</span><br><span class=\"line\">            if (!str) &#123;</span><br><span class=\"line\">                if (node.isEnd) &#123;</span><br><span class=\"line\">                    rst.push(string);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Object.values(children).forEach(v =&gt; &#123;</span><br><span class=\"line\">                    findWordHelper(v, &#x27;&#x27;, string + v.value)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                const w = str[0];</span><br><span class=\"line\">                if (children[w]) &#123;</span><br><span class=\"line\">                    findWordHelper(children[w], str.slice(1), string);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        findWordHelper(this, string, string);</span><br><span class=\"line\"></span><br><span class=\"line\">        return rst;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    logAllWords() &#123;</span><br><span class=\"line\">        return this.predictWord(&#x27;&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const tree = new PrefixTree();</span><br><span class=\"line\">tree.addWord(&#x27;be&#x27;)</span><br><span class=\"line\">tree.addWord(&#x27;ball&#x27;)</span><br><span class=\"line\">tree.addWord(&#x27;bell&#x27;)</span><br><span class=\"line\">tree.addWord(&#x27;bear&#x27;)</span><br><span class=\"line\">tree.addWord(&#x27;tear&#x27;)</span><br><span class=\"line\">tree.addWord(&#x27;bad&#x27;)</span><br><span class=\"line\">console.log(tree.predictWord(&#x27;t&#x27;))</span><br></pre></td></tr></table></figure>\n<h2 id=\"哈希表\"><a class=\"markdownIt-Anchor\" href=\"#哈希表\">#</a> 哈希表</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// by 司徒正美</span><br><span class=\"line\">class Hash &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.table = new Array(1024);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hash(data) &#123;</span><br><span class=\"line\">        //就将字符串中的每个字符的ASCLL码值相加起来，再对数组的长度取余</span><br><span class=\"line\">        var total = 0;</span><br><span class=\"line\">        for (var i = 0; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">            total += data.charCodeAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(&quot;Hash Value: &quot; + data + &quot; -&gt; &quot; + total);</span><br><span class=\"line\">        return total % this.table.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    insert(key, val) &#123;</span><br><span class=\"line\">        var pos = this.hash(key);</span><br><span class=\"line\">        this.table[pos] = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    get(key) &#123;</span><br><span class=\"line\">        var pos = this.hash(key);</span><br><span class=\"line\">        return this.table[pos]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    show() &#123;</span><br><span class=\"line\">        for (var i = 0; i &lt; this.table.length; i++) &#123;</span><br><span class=\"line\">            if (this.table[i] != undefined) &#123;</span><br><span class=\"line\">                console.log(i + &quot;:&quot; + this.table[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var someNames = [&quot;David&quot;, &quot;Jennifer&quot;, &quot;Donnie&quot;, &quot;Raymond&quot;, &quot;Cynthia&quot;, &quot;Mike&quot;, &quot;Clayton&quot;, &quot;Danny&quot;, &quot;Jonathan&quot;];</span><br><span class=\"line\">var hash = new Hash();</span><br><span class=\"line\">for (var i = 0; i &lt; someNames.length; ++i) &#123;</span><br><span class=\"line\">    hash.insert(someNames[i], someNames[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hash.show();</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法基础"
            ]
        }
    ]
}